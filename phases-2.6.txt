# Machine code for foo():
  <fi#-2>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+8]
  <fi#-1>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+4]
  <fi#0>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#1>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#2>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#3>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
Live Outs: EAX

entry: 0x7fde4a85a558, LLVM BB @0x7fde4a40cee0, ID#0:
	%reg1024<def> = MOV32rm <fi#-1>, 1, %reg0, 0, %reg0, Mem:LD(4,4) [FixedStack-1 + 0]
	%reg1025<def> = MOV32rm <fi#-2>, 1, %reg0, 0, %reg0, Mem:LD(4,4) [FixedStack-2 + 0]
	MOV32mr <fi#1>, 1, %reg0, 0, %reg0, %reg1024
	MOV32mr <fi#2>, 1, %reg0, 0, %reg0, %reg1025
	%reg1026<def> = MOV32rm <fi#1>, 1, %reg0, 0, %reg0
	%reg1027<def> = MOV32rm <fi#2>, 1, %reg0, 0, %reg0
	%reg1028<def> = ADD32rr %reg1026, %reg1027, %EFLAGS<imp-def>
	MOV32mr <fi#3>, 1, %reg0, 0, %reg0, %reg1028
	%reg1029<def> = MOV32rm <fi#3>, 1, %reg0, 0, %reg0
	MOV32mr <fi#0>, 1, %reg0, 0, %reg0, %reg1029
	%reg1030<def> = MOV32rm <fi#0>, 1, %reg0, 0, %reg0
	%EAX<def> = MOV32rr %reg1030
	RET

# End machine code for foo().

# Machine code for foo():
  <fi#-2>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+8]
  <fi#-1>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+4]
  <fi#0>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#1>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#2>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#3>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
Live Outs: EAX

entry: 0x7fde4a85a558, LLVM BB @0x7fde4a40cee0, ID#0:
	%EAX<def> = MOV32rm <fi#-1>, 1, %reg0, 0, %reg0, Mem:LD(4,4) [FixedStack-1 + 0]
	%ECX<def> = MOV32rm <fi#-2>, 1, %reg0, 0, %reg0, Mem:LD(4,4) [FixedStack-2 + 0]
	MOV32mr <fi#1>, 1, %reg0, 0, %reg0, %EAX<kill>
	MOV32mr <fi#2>, 1, %reg0, 0, %reg0, %ECX<kill>
	%EAX<def> = MOV32rm <fi#1>, 1, %reg0, 0, %reg0
	%ECX<def> = MOV32rm <fi#2>, 1, %reg0, 0, %reg0
	%EAX<def> = ADD32rr %EAX, %ECX<kill>, %EFLAGS<imp-def,dead>
	MOV32mr <fi#3>, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm <fi#3>, 1, %reg0, 0, %reg0
	MOV32mr <fi#0>, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm <fi#0>, 1, %reg0, 0, %reg0
	RET %EAX<imp-use,kill>

# End machine code for foo().

# Machine code for foo():
  <fi#-2>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+8]
  <fi#-1>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+4]
  <fi#0>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#1>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#2>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#3>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
Live Outs: EAX

entry: 0x7fde4a85a558, LLVM BB @0x7fde4a40cee0, ID#0:
	%EAX<def> = MOV32rm <fi#-1>, 1, %reg0, 0, %reg0, Mem:LD(4,4) [FixedStack-1 + 0]
	%ECX<def> = MOV32rm <fi#-2>, 1, %reg0, 0, %reg0, Mem:LD(4,4) [FixedStack-2 + 0]
	MOV32mr <fi#1>, 1, %reg0, 0, %reg0, %EAX<kill>
	MOV32mr <fi#2>, 1, %reg0, 0, %reg0, %ECX<kill>
	%EAX<def> = MOV32rm <fi#1>, 1, %reg0, 0, %reg0
	%ECX<def> = MOV32rm <fi#2>, 1, %reg0, 0, %reg0
	%EAX<def> = ADD32rr %EAX, %ECX<kill>, %EFLAGS<imp-def,dead>
	MOV32mr <fi#3>, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm <fi#3>, 1, %reg0, 0, %reg0
	MOV32mr <fi#0>, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm <fi#0>, 1, %reg0, 0, %reg0
	RET %EAX<imp-use,kill>

# End machine code for foo().

# Machine code for foo():
  <fi#-2>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+8]
  <fi#-1>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+4]
  <fi#0>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#1>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#2>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
  <fi#3>: size is 4 bytes, alignment is 4 bytes, at location [SP+4]
Live Outs: EAX

entry: 0x7fde4a85a558, LLVM BB @0x7fde4a40cee0, ID#0:
	%EAX<def> = MOV32rm <fi#-1>, 1, %reg0, 0, %reg0, Mem:LD(4,4) [FixedStack-1 + 0]
	%ECX<def> = MOV32rm <fi#-2>, 1, %reg0, 0, %reg0, Mem:LD(4,4) [FixedStack-2 + 0]
	MOV32mr <fi#1>, 1, %reg0, 0, %reg0, %EAX<kill>
	MOV32mr <fi#2>, 1, %reg0, 0, %reg0, %ECX<kill>
	%EAX<def> = MOV32rm <fi#1>, 1, %reg0, 0, %reg0
	%ECX<def> = MOV32rm <fi#2>, 1, %reg0, 0, %reg0
	%EAX<def> = ADD32rr %EAX, %ECX<kill>, %EFLAGS<imp-def,dead>
	MOV32mr <fi#3>, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm <fi#3>, 1, %reg0, 0, %reg0
	MOV32mr <fi#0>, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm <fi#0>, 1, %reg0, 0, %reg0
	RET %EAX<imp-use,kill>

# End machine code for foo().

# Machine code for foo():
  <fi#-2>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+8]
  <fi#-1>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+4]
  <fi#0>: size is 4 bytes, alignment is 4 bytes, at location [SP-4]
  <fi#1>: size is 4 bytes, alignment is 4 bytes, at location [SP-8]
  <fi#2>: size is 4 bytes, alignment is 4 bytes, at location [SP-12]
  <fi#3>: size is 4 bytes, alignment is 4 bytes, at location [SP-16]
Live Outs: EAX

entry: 0x7fde4a85a558, LLVM BB @0x7fde4a40cee0, ID#0:
	%ESP<def> = SUB32ri8 %ESP, 16, %EFLAGS<imp-def,dead>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 20, %reg0, Mem:LD(4,4) [FixedStack-1 + 0]
	%ECX<def> = MOV32rm %ESP, 1, %reg0, 24, %reg0, Mem:LD(4,4) [FixedStack-2 + 0]
	MOV32mr %ESP, 1, %reg0, 8, %reg0, %EAX<kill>
	MOV32mr %ESP, 1, %reg0, 4, %reg0, %ECX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 8, %reg0
	%ECX<def> = MOV32rm %ESP, 1, %reg0, 4, %reg0
	%EAX<def> = ADD32rr %EAX, %ECX<kill>, %EFLAGS<imp-def,dead>
	MOV32mr %ESP, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 0, %reg0
	MOV32mr %ESP, 1, %reg0, 12, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 12, %reg0
	%ESP<def> = ADD32ri8 %ESP, 16, %EFLAGS<imp-def,dead>
	RET %EAX<imp-use,kill>

# End machine code for foo().

# Machine code for foo():
  <fi#-2>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+8]
  <fi#-1>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+4]
  <fi#0>: size is 4 bytes, alignment is 4 bytes, at location [SP-4]
  <fi#1>: size is 4 bytes, alignment is 4 bytes, at location [SP-8]
  <fi#2>: size is 4 bytes, alignment is 4 bytes, at location [SP-12]
  <fi#3>: size is 4 bytes, alignment is 4 bytes, at location [SP-16]
Live Outs: EAX

entry: 0x7fde4a85a558, LLVM BB @0x7fde4a40cee0, ID#0:
	%ESP<def> = SUB32ri8 %ESP, 16, %EFLAGS<imp-def,dead>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 20, %reg0, Mem:LD(4,4) [FixedStack-1 + 0]
	%ECX<def> = MOV32rm %ESP, 1, %reg0, 24, %reg0, Mem:LD(4,4) [FixedStack-2 + 0]
	MOV32mr %ESP, 1, %reg0, 8, %reg0, %EAX<kill>
	MOV32mr %ESP, 1, %reg0, 4, %reg0, %ECX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 8, %reg0
	%ECX<def> = MOV32rm %ESP, 1, %reg0, 4, %reg0
	%EAX<def> = ADD32rr %EAX, %ECX<kill>, %EFLAGS<imp-def,dead>
	MOV32mr %ESP, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 0, %reg0
	MOV32mr %ESP, 1, %reg0, 12, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 12, %reg0
	%ESP<def> = ADD32ri8 %ESP, 16, %EFLAGS<imp-def,dead>
	RET %EAX<imp-use,kill>

# End machine code for foo().

# Machine code for foo():
  <fi#-2>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+8]
  <fi#-1>: size is 4 bytes, alignment is 1 byte, fixed at location [SP+4]
  <fi#0>: size is 4 bytes, alignment is 4 bytes, at location [SP-4]
  <fi#1>: size is 4 bytes, alignment is 4 bytes, at location [SP-8]
  <fi#2>: size is 4 bytes, alignment is 4 bytes, at location [SP-12]
  <fi#3>: size is 4 bytes, alignment is 4 bytes, at location [SP-16]
Live Outs: EAX

entry: 0x7fde4a85a558, LLVM BB @0x7fde4a40cee0, ID#0:
	%ESP<def> = SUB32ri8 %ESP, 16, %EFLAGS<imp-def,dead>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 20, %reg0, Mem:LD(4,4) [FixedStack-1 + 0]
	%ECX<def> = MOV32rm %ESP, 1, %reg0, 24, %reg0, Mem:LD(4,4) [FixedStack-2 + 0]
	MOV32mr %ESP, 1, %reg0, 8, %reg0, %EAX<kill>
	MOV32mr %ESP, 1, %reg0, 4, %reg0, %ECX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 8, %reg0
	%ECX<def> = MOV32rm %ESP, 1, %reg0, 4, %reg0
	%EAX<def> = ADD32rr %EAX, %ECX<kill>, %EFLAGS<imp-def,dead>
	MOV32mr %ESP, 1, %reg0, 0, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 0, %reg0
	MOV32mr %ESP, 1, %reg0, 12, %reg0, %EAX<kill>
	%EAX<def> = MOV32rm %ESP, 1, %reg0, 12, %reg0
	%ESP<def> = ADD32ri8 %ESP, 16, %EFLAGS<imp-def,dead>
	RET %EAX<imp-use,kill>

# End machine code for foo().


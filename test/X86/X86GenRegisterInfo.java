/**
 * TableGen created file.
 * <p>
 * Register Information Source Fgrament
 * Automatically generated by .td file, do not edit!
 * Powered by Xlous zeng
 * </p>
 */
package backend.target.x86;

import backend.target.TargetRegisterInfo;
import backend.target.TargetRegisterClass;

public class X86GenRegisterInfo extends TargetRegisterInfo implements X86GenRegisterNames, X86GenInstrNames
{	
	//GR16 Register Class...
	public static final int[] GR16 = {
		AX, CX, DX, SI, DI, BX, BP, SP, R8W, R9W, R10W, R11W, R14W, R15W, R12W, R13W, 
	};


	//GR32 Register Class...
	public static final int[] GR32 = {
		EAX, ECX, EDX, ESI, EDI, EBX, EBP, ESP, R8D, R9D, R10D, R11D, R14D, R15D, R12D, R13D, 
	};


	//GR64 Register Class...
	public static final int[] GR64 = {
		RAX, RCX, RDX, RSI, RDI, R8, R9, R10, R11, RBX, R14, R15, R12, R13, RBP, RSP, RIP, 
	};


	//GR8_ABCD_L Register Class...
	public static final int[] GR8_ABCD_L = {
		AL, CL, DL, BL, 
	};


	//GR8_ABCD_H Register Class...
	public static final int[] GR8_ABCD_H = {
		AH, CH, DH, BH, 
	};


	//GR64_NOSP Register Class...
	public static final int[] GR64_NOSP = {
		RAX, RCX, RDX, RSI, RDI, R8, R9, R10, R11, RBX, R14, R15, R12, R13, RBP, 
	};


	//GR32_ABCD Register Class...
	public static final int[] GR32_ABCD = {
		EAX, ECX, EDX, EBX, 
	};


	//CCR Register Class...
	public static final int[] CCR = {
		EFLAGS, 
	};


	//GR64_ABCD Register Class...
	public static final int[] GR64_ABCD = {
		RAX, RCX, RDX, RBX, 
	};


	//RFP80 Register Class...
	public static final int[] RFP80 = {
		FP0, FP1, FP2, FP3, FP4, FP5, FP6, 
	};


	//GR32_NOREX Register Class...
	public static final int[] GR32_NOREX = {
		EAX, ECX, EDX, ESI, EDI, EBX, EBP, ESP, 
	};


	//RFP64 Register Class...
	public static final int[] RFP64 = {
		FP0, FP1, FP2, FP3, FP4, FP5, FP6, 
	};


	//VR256 Register Class...
	public static final int[] VR256 = {
		YMM0, YMM1, YMM2, YMM3, YMM4, YMM5, YMM6, YMM7, YMM8, YMM9, YMM10, YMM11, YMM12, YMM13, YMM14, YMM15, 
	};


	//FR32 Register Class...
	public static final int[] FR32 = {
		XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15, 
	};


	//FR64 Register Class...
	public static final int[] FR64 = {
		XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15, 
	};


	//VR128 Register Class...
	public static final int[] VR128 = {
		XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15, 
	};


	//GR64_NOREX Register Class...
	public static final int[] GR64_NOREX = {
		RAX, RCX, RDX, RSI, RDI, RBX, RBP, RSP, 
	};


	//GR8_NOREX Register Class...
	public static final int[] GR8_NOREX = {
		AL, CL, DL, AH, CH, DH, BL, BH, SIL, DIL, BPL, SPL, 
	};


	//RFP32 Register Class...
	public static final int[] RFP32 = {
		FP0, FP1, FP2, FP3, FP4, FP5, FP6, 
	};


	//GR32_NOSP Register Class...
	public static final int[] GR32_NOSP = {
		EAX, ECX, EDX, ESI, EDI, EBX, EBP, R8D, R9D, R10D, R11D, R14D, R15D, R12D, R13D, 
	};


	//GR16_ABCD Register Class...
	public static final int[] GR16_ABCD = {
		AX, CX, DX, BX, 
	};


	//VR64 Register Class...
	public static final int[] VR64 = {
		MM0, MM1, MM2, MM3, MM4, MM5, MM6, MM7, 
	};


	//GR8 Register Class...
	public static final int[] GR8 = {
		AL, CL, DL, AH, CH, DH, BL, BH, SIL, DIL, BPL, SPL, R8B, R9B, R10B, R11B, R14B, R15B, R12B, R13B, 
	};


	//GR64_NOREX_NOSP Register Class...
	public static final int[] GR64_NOREX_NOSP = {
		RAX, RCX, RDX, RSI, RDI, RBX, RBP, 
	};


	//GR16_NOREX Register Class...
	public static final int[] GR16_NOREX = {
		AX, CX, DX, SI, DI, BX, BP, SP, 
	};


	//GR32_AD Register Class...
	public static final int[] GR32_AD = {
		EAX, EDX, 
	};


	//RST Register Class...
	public static final int[] RST = {
		ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, 
	};


	// GR16VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR16VTs = {
		MVT.SimpleValueType.i16, MVT.SimpleValueType.Other
	};


	// GR32VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR32VTs = {
		MVT.SimpleValueType.i32, MVT.SimpleValueType.Other
	};


	// GR64VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR64VTs = {
		MVT.SimpleValueType.i64, MVT.SimpleValueType.Other
	};


	// GR8_ABCD_LVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR8_ABCD_LVTs = {
		MVT.SimpleValueType.i8, MVT.SimpleValueType.Other
	};


	// GR8_ABCD_HVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR8_ABCD_HVTs = {
		MVT.SimpleValueType.i8, MVT.SimpleValueType.Other
	};


	// GR64_NOSPVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR64_NOSPVTs = {
		MVT.SimpleValueType.i64, MVT.SimpleValueType.Other
	};


	// GR32_ABCDVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR32_ABCDVTs = {
		MVT.SimpleValueType.i32, MVT.SimpleValueType.Other
	};


	// CCRVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] CCRVTs = {
		MVT.SimpleValueType.i32, MVT.SimpleValueType.Other
	};


	// GR64_ABCDVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR64_ABCDVTs = {
		MVT.SimpleValueType.i64, MVT.SimpleValueType.Other
	};


	// RFP80VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] RFP80VTs = {
		MVT.SimpleValueType.f80, MVT.SimpleValueType.Other
	};


	// GR32_NOREXVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR32_NOREXVTs = {
		MVT.SimpleValueType.i32, MVT.SimpleValueType.Other
	};


	// RFP64VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] RFP64VTs = {
		MVT.SimpleValueType.f64, MVT.SimpleValueType.Other
	};


	// VR256VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] VR256VTs = {
		MVT.SimpleValueType.v8i32, MVT.SimpleValueType.v4i64, MVT.SimpleValueType.v8f32, MVT.SimpleValueType.v4f64, MVT.SimpleValueType.Other
	};


	// FR32VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] FR32VTs = {
		MVT.SimpleValueType.f32, MVT.SimpleValueType.Other
	};


	// FR64VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] FR64VTs = {
		MVT.SimpleValueType.f64, MVT.SimpleValueType.Other
	};


	// VR128VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] VR128VTs = {
		MVT.SimpleValueType.v16i8, MVT.SimpleValueType.v8i16, MVT.SimpleValueType.v4i32, MVT.SimpleValueType.v2i64, MVT.SimpleValueType.v4f32, MVT.SimpleValueType.v2f64, MVT.SimpleValueType.Other
	};


	// GR64_NOREXVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR64_NOREXVTs = {
		MVT.SimpleValueType.i64, MVT.SimpleValueType.Other
	};


	// GR8_NOREXVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR8_NOREXVTs = {
		MVT.SimpleValueType.i8, MVT.SimpleValueType.Other
	};


	// RFP32VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] RFP32VTs = {
		MVT.SimpleValueType.f32, MVT.SimpleValueType.Other
	};


	// GR32_NOSPVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR32_NOSPVTs = {
		MVT.SimpleValueType.i32, MVT.SimpleValueType.Other
	};


	// GR16_ABCDVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR16_ABCDVTs = {
		MVT.SimpleValueType.i16, MVT.SimpleValueType.Other
	};


	// VR64VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] VR64VTs = {
		MVT.SimpleValueType.v8i8, MVT.SimpleValueType.v4i16, MVT.SimpleValueType.v2i32, MVT.SimpleValueType.v1i64, MVT.SimpleValueType.v2f32, MVT.SimpleValueType.Other
	};


	// GR8VTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR8VTs = {
		MVT.SimpleValueType.i8, MVT.SimpleValueType.Other
	};


	// GR64_NOREX_NOSPVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR64_NOREX_NOSPVTs = {
		MVT.SimpleValueType.i64, MVT.SimpleValueType.Other
	};


	// GR16_NOREXVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR16_NOREXVTs = {
		MVT.SimpleValueType.i16, MVT.SimpleValueType.Other
	};


	// GR32_ADVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] GR32_ADVTs = {
		MVT.SimpleValueType.i32, MVT.SimpleValueType.Other
	};


	// RSTVTs Register Class Value Type...
	public static final MVT.SimpleValueType[] RSTVTs = {
		MVT.SimpleValueType.f80, MVT.SimpleValueType.f64, MVT.SimpleValueType.f32, MVT.SimpleValueType.Other
	};


	// Defines the Register Class ID.
	public static final int GR16RegClassID = 1;
	public static final int GR32RegClassID = 2;
	public static final int GR64RegClassID = 3;
	public static final int GR8_ABCD_LRegClassID = 4;
	public static final int GR8_ABCD_HRegClassID = 5;
	public static final int GR64_NOSPRegClassID = 6;
	public static final int GR32_ABCDRegClassID = 7;
	public static final int CCRRegClassID = 8;
	public static final int GR64_ABCDRegClassID = 9;
	public static final int RFP80RegClassID = 10;
	public static final int GR32_NOREXRegClassID = 11;
	public static final int RFP64RegClassID = 12;
	public static final int VR256RegClassID = 13;
	public static final int FR32RegClassID = 14;
	public static final int FR64RegClassID = 15;
	public static final int VR128RegClassID = 16;
	public static final int GR64_NOREXRegClassID = 17;
	public static final int GR8_NOREXRegClassID = 18;
	public static final int RFP32RegClassID = 19;
	public static final int GR32_NOSPRegClassID = 20;
	public static final int GR16_ABCDRegClassID = 21;
	public static final int VR64RegClassID = 22;
	public static final int GR8RegClassID = 23;
	public static final int GR64_NOREX_NOSPRegClassID = 24;
	public static final int GR16_NOREXRegClassID = 25;
	public static final int GR32_ADRegClassID = 26;
	public static final int RSTRegClassID = 27;


	// Register Class declaration
	public final static GR16Class GR16RegClass = GR16Class.getInstance();
	public final static GR32Class GR32RegClass = GR32Class.getInstance();
	public final static GR64Class GR64RegClass = GR64Class.getInstance();
	public final static GR8_ABCD_LClass GR8_ABCD_LRegClass = GR8_ABCD_LClass.getInstance();
	public final static GR8_ABCD_HClass GR8_ABCD_HRegClass = GR8_ABCD_HClass.getInstance();
	public final static GR64_NOSPClass GR64_NOSPRegClass = GR64_NOSPClass.getInstance();
	public final static GR32_ABCDClass GR32_ABCDRegClass = GR32_ABCDClass.getInstance();
	public final static CCRClass CCRRegClass = CCRClass.getInstance();
	public final static GR64_ABCDClass GR64_ABCDRegClass = GR64_ABCDClass.getInstance();
	public final static RFP80Class RFP80RegClass = RFP80Class.getInstance();
	public final static GR32_NOREXClass GR32_NOREXRegClass = GR32_NOREXClass.getInstance();
	public final static RFP64Class RFP64RegClass = RFP64Class.getInstance();
	public final static VR256Class VR256RegClass = VR256Class.getInstance();
	public final static FR32Class FR32RegClass = FR32Class.getInstance();
	public final static FR64Class FR64RegClass = FR64Class.getInstance();
	public final static VR128Class VR128RegClass = VR128Class.getInstance();
	public final static GR64_NOREXClass GR64_NOREXRegClass = GR64_NOREXClass.getInstance();
	public final static GR8_NOREXClass GR8_NOREXRegClass = GR8_NOREXClass.getInstance();
	public final static RFP32Class RFP32RegClass = RFP32Class.getInstance();
	public final static GR32_NOSPClass GR32_NOSPRegClass = GR32_NOSPClass.getInstance();
	public final static GR16_ABCDClass GR16_ABCDRegClass = GR16_ABCDClass.getInstance();
	public final static VR64Class VR64RegClass = VR64Class.getInstance();
	public final static GR8Class GR8RegClass = GR8Class.getInstance();
	public final static GR64_NOREX_NOSPClass GR64_NOREX_NOSPRegClass = GR64_NOREX_NOSPClass.getInstance();
	public final static GR16_NOREXClass GR16_NOREXRegClass = GR16_NOREXClass.getInstance();
	public final static GR32_ADClass GR32_ADRegClass = GR32_ADClass.getInstance();
	public final static RSTClass RSTRegClass = RSTClass.getInstance();



	public final static class GR16Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR16Class();

		public static GR16Class getInstance() { return instance;}

		private GR16Class()
		{
			 super(GR16VTs, 2, 2, GR16); 
		}

    static const unsigned X86_GR16_AO_64[] = {
      X86::AX,  X86::CX,   X86::DX,   X86::SI,   X86::DI,
      X86::R8W, X86::R9W,  X86::R10W, X86::R11W,
      X86::BX, X86::R14W, X86::R15W,  X86::R12W, X86::R13W, X86::BP
    };

    GR16Class::iterator
    GR16Class::allocation_order_begin(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit())
        return X86_GR16_AO_64;
      else
        return begin();
    }

    GR16Class::iterator
    GR16Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit()) {
        // Does the function dedicate RBP to being a frame ptr?
        if (RI->hasFP(MF))
          // If so, don't allocate SP or BP.
          return array_endof(X86_GR16_AO_64) - 1;
        else
          // If not, just don't allocate SP.
          return array_endof(X86_GR16_AO_64);
      } else {
        // Does the function dedicate EBP to being a frame ptr?
        if (RI->hasFP(MF))
          // If so, don't allocate SP or BP.
          return begin() + 6;
        else
          // If not, just don't allocate SP.
          return begin() + 7;
      }
    }
  

	}

	public final static class GR32Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR32Class();

		public static GR32Class getInstance() { return instance;}

		private GR32Class()
		{
			 super(GR32VTs, 4, 4, GR32); 
		}

    static const unsigned X86_GR32_AO_64[] = {
      X86::EAX, X86::ECX,  X86::EDX,  X86::ESI,  X86::EDI,
      X86::R8D, X86::R9D,  X86::R10D, X86::R11D,
      X86::EBX, X86::R14D, X86::R15D, X86::R12D, X86::R13D, X86::EBP
    };

    GR32Class::iterator
    GR32Class::allocation_order_begin(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit())
        return X86_GR32_AO_64;
      else
        return begin();
    }

    GR32Class::iterator
    GR32Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit()) {
        // Does the function dedicate RBP to being a frame ptr?
        if (RI->hasFP(MF))
          // If so, don't allocate ESP or EBP.
          return array_endof(X86_GR32_AO_64) - 1;
        else
          // If not, just don't allocate ESP.
          return array_endof(X86_GR32_AO_64);
      } else {
        // Does the function dedicate EBP to being a frame ptr?
        if (RI->hasFP(MF))
          // If so, don't allocate ESP or EBP.
          return begin() + 6;
        else
          // If not, just don't allocate ESP.
          return begin() + 7;
      }
    }
  

	}

	public final static class GR64Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR64Class();

		public static GR64Class getInstance() { return instance;}

		private GR64Class()
		{
			 super(GR64VTs, 8, 8, GR64); 
		}

    GR64Class::iterator
    GR64Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return begin();  // None of these are allocatable in 32-bit.
      if (RI->hasFP(MF)) // Does the function dedicate RBP to being a frame ptr?
        return end()-3;  // If so, don't allocate RIP, RSP or RBP
      else
        return end()-2;  // If not, just don't allocate RIP or RSP
    }
  

	}

	public final static class GR8_ABCD_LClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR8_ABCD_LClass();

		public static GR8_ABCD_LClass getInstance() { return instance;}

		private GR8_ABCD_LClass()
		{
			 super(GR8_ABCD_LVTs, 1, 1, GR8_ABCD_L); 
		}


	}

	public final static class GR8_ABCD_HClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR8_ABCD_HClass();

		public static GR8_ABCD_HClass getInstance() { return instance;}

		private GR8_ABCD_HClass()
		{
			 super(GR8_ABCD_HVTs, 1, 1, GR8_ABCD_H); 
		}


	}

	public final static class GR64_NOSPClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR64_NOSPClass();

		public static GR64_NOSPClass getInstance() { return instance;}

		private GR64_NOSPClass()
		{
			 super(GR64_NOSPVTs, 8, 8, GR64_NOSP); 
		}

    GR64_NOSPClass::iterator
    GR64_NOSPClass::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return begin();  // None of these are allocatable in 32-bit.
      if (RI->hasFP(MF)) // Does the function dedicate RBP to being a frame ptr?
        return end()-1;  // If so, don't allocate RBP
      else
        return end();  // If not, any reg in this class is ok.
    }
  

	}

	public final static class GR32_ABCDClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR32_ABCDClass();

		public static GR32_ABCDClass getInstance() { return instance;}

		private GR32_ABCDClass()
		{
			 super(GR32_ABCDVTs, 4, 4, GR32_ABCD); 
		}


	}

	public final static class CCRClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new CCRClass();

		public static CCRClass getInstance() { return instance;}

		private CCRClass()
		{
			 super(CCRVTs, 4, 4, CCR); 
		}


	}

	public final static class GR64_ABCDClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR64_ABCDClass();

		public static GR64_ABCDClass getInstance() { return instance;}

		private GR64_ABCDClass()
		{
			 super(GR64_ABCDVTs, 8, 8, GR64_ABCD); 
		}


	}

	public final static class RFP80Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new RFP80Class();

		public static RFP80Class getInstance() { return instance;}

		private RFP80Class()
		{
			 super(RFP80VTs, 10, 4, RFP80); 
		}


	}

	public final static class GR32_NOREXClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR32_NOREXClass();

		public static GR32_NOREXClass getInstance() { return instance;}

		private GR32_NOREXClass()
		{
			 super(GR32_NOREXVTs, 4, 4, GR32_NOREX); 
		}

    GR32_NOREXClass::iterator
    GR32_NOREXClass::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      // Does the function dedicate RBP / EBP to being a frame ptr?
      if (RI->hasFP(MF))
        // If so, don't allocate ESP or EBP.
        return end() - 2;
      else
        // If not, just don't allocate ESP.
        return end() - 1;
    }
  

	}

	public final static class RFP64Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new RFP64Class();

		public static RFP64Class getInstance() { return instance;}

		private RFP64Class()
		{
			 super(RFP64VTs, 8, 4, RFP64); 
		}


	}

	public final static class VR256Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new VR256Class();

		public static VR256Class getInstance() { return instance;}

		private VR256Class()
		{
			 super(VR256VTs, 32, 32, VR256); 
		}


	}

	public final static class FR32Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new FR32Class();

		public static FR32Class getInstance() { return instance;}

		private FR32Class()
		{
			 super(FR32VTs, 4, 4, FR32); 
		}

    FR32Class::iterator
    FR32Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return end()-8; // Only XMM0 to XMM7 are available in 32-bit mode.
      else
        return end();
    }
  

	}

	public final static class FR64Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new FR64Class();

		public static FR64Class getInstance() { return instance;}

		private FR64Class()
		{
			 super(FR64VTs, 8, 8, FR64); 
		}

    FR64Class::iterator
    FR64Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return end()-8; // Only XMM0 to XMM7 are available in 32-bit mode.
      else
        return end();
    }
  

	}

	public final static class VR128Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new VR128Class();

		public static VR128Class getInstance() { return instance;}

		private VR128Class()
		{
			 super(VR128VTs, 16, 16, VR128); 
		}

    VR128Class::iterator
    VR128Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (!Subtarget.is64Bit())
        return end()-8; // Only XMM0 to XMM7 are available in 32-bit mode.
      else
        return end();
    }
  

	}

	public final static class GR64_NOREXClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR64_NOREXClass();

		public static GR64_NOREXClass getInstance() { return instance;}

		private GR64_NOREXClass()
		{
			 super(GR64_NOREXVTs, 8, 8, GR64_NOREX); 
		}

    GR64_NOREXClass::iterator
    GR64_NOREXClass::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      // Does the function dedicate RBP to being a frame ptr?
      if (RI->hasFP(MF))
        // If so, don't allocate RSP or RBP.
        return end() - 2;
      else
        // If not, just don't allocate RSP.
        return end() - 1;
    }
  

	}

	public final static class GR8_NOREXClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR8_NOREXClass();

		public static GR8_NOREXClass getInstance() { return instance;}

		private GR8_NOREXClass()
		{
			 super(GR8_NOREXVTs, 1, 1, GR8_NOREX); 
		}

    static const unsigned X86_GR8_NOREX_AO_64[] = {
      X86::AL, X86::CL, X86::DL, X86::SIL, X86::DIL, X86::BL, X86::BPL
    };

    GR8_NOREXClass::iterator
    GR8_NOREXClass::allocation_order_begin(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit())
        return X86_GR8_NOREX_AO_64;
      else
        return begin();
    }

    GR8_NOREXClass::iterator
    GR8_NOREXClass::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      // Does the function dedicate RBP / EBP to being a frame ptr?
      if (!Subtarget.is64Bit())
        // In 32-mode, none of the 8-bit registers aliases EBP or ESP.
        return begin() + 8;
      else if (RI->hasFP(MF))
        // If so, don't allocate SPL or BPL.
        return array_endof(X86_GR8_NOREX_AO_64) - 1;
      else
        // If not, just don't allocate SPL.
        return array_endof(X86_GR8_NOREX_AO_64);
    }
  

	}

	public final static class RFP32Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new RFP32Class();

		public static RFP32Class getInstance() { return instance;}

		private RFP32Class()
		{
			 super(RFP32VTs, 4, 4, RFP32); 
		}


	}

	public final static class GR32_NOSPClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR32_NOSPClass();

		public static GR32_NOSPClass getInstance() { return instance;}

		private GR32_NOSPClass()
		{
			 super(GR32_NOSPVTs, 4, 4, GR32_NOSP); 
		}

    static const unsigned X86_GR32_NOSP_AO_64[] = {
      X86::EAX, X86::ECX,  X86::EDX,  X86::ESI,  X86::EDI,
      X86::R8D, X86::R9D,  X86::R10D, X86::R11D,
      X86::EBX, X86::R14D, X86::R15D, X86::R12D, X86::R13D, X86::EBP
    };

    GR32_NOSPClass::iterator
    GR32_NOSPClass::allocation_order_begin(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit())
        return X86_GR32_NOSP_AO_64;
      else
        return begin();
    }

    GR32_NOSPClass::iterator
    GR32_NOSPClass::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit()) {
        // Does the function dedicate RBP to being a frame ptr?
        if (RI->hasFP(MF))
          // If so, don't allocate EBP.
          return array_endof(X86_GR32_NOSP_AO_64) - 1;
        else
          // If not, any reg in this class is ok.
          return array_endof(X86_GR32_NOSP_AO_64);
      } else {
        // Does the function dedicate EBP to being a frame ptr?
        if (RI->hasFP(MF))
          // If so, don't allocate EBP.
          return begin() + 6;
        else
          // If not, any reg in this class is ok.
          return begin() + 7;
      }
    }
  

	}

	public final static class GR16_ABCDClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR16_ABCDClass();

		public static GR16_ABCDClass getInstance() { return instance;}

		private GR16_ABCDClass()
		{
			 super(GR16_ABCDVTs, 2, 2, GR16_ABCD); 
		}


	}

	public final static class VR64Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new VR64Class();

		public static VR64Class getInstance() { return instance;}

		private VR64Class()
		{
			 super(VR64VTs, 8, 8, VR64); 
		}


	}

	public final static class GR8Class extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR8Class();

		public static GR8Class getInstance() { return instance;}

		private GR8Class()
		{
			 super(GR8VTs, 1, 1, GR8); 
		}

    static const unsigned X86_GR8_AO_64[] = {
      X86::AL,   X86::CL,   X86::DL,   X86::SIL, X86::DIL,
      X86::R8B,  X86::R9B,  X86::R10B, X86::R11B,
      X86::BL,   X86::R14B, X86::R15B, X86::R12B, X86::R13B, X86::BPL
    };

    GR8Class::iterator
    GR8Class::allocation_order_begin(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      if (Subtarget.is64Bit())
        return X86_GR8_AO_64;
      else
        return begin();
    }

    GR8Class::iterator
    GR8Class::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      const X86Subtarget &Subtarget = TM.getSubtarget<X86Subtarget>();
      // Does the function dedicate RBP / EBP to being a frame ptr?
      if (!Subtarget.is64Bit())
        // In 32-mode, none of the 8-bit registers aliases EBP or ESP.
        return begin() + 8;
      else if (RI->hasFP(MF))
        // If so, don't allocate SPL or BPL.
        return array_endof(X86_GR8_AO_64) - 1;
      else
        // If not, just don't allocate SPL.
        return array_endof(X86_GR8_AO_64);
    }
  

	}

	public final static class GR64_NOREX_NOSPClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR64_NOREX_NOSPClass();

		public static GR64_NOREX_NOSPClass getInstance() { return instance;}

		private GR64_NOREX_NOSPClass()
		{
			 super(GR64_NOREX_NOSPVTs, 8, 8, GR64_NOREX_NOSP); 
		}

    GR64_NOREX_NOSPClass::iterator
    GR64_NOREX_NOSPClass::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      // Does the function dedicate RBP to being a frame ptr?
      if (RI->hasFP(MF))
        // If so, don't allocate RBP.
        return end() - 1;
      else
        // If not, any reg in this class is ok.
        return end();
    }
  

	}

	public final static class GR16_NOREXClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR16_NOREXClass();

		public static GR16_NOREXClass getInstance() { return instance;}

		private GR16_NOREXClass()
		{
			 super(GR16_NOREXVTs, 2, 2, GR16_NOREX); 
		}

    GR16_NOREXClass::iterator
    GR16_NOREXClass::allocation_order_end(const MachineFunction &MF) const {
      const TargetMachine &TM = MF.getTarget();
      const TargetRegisterInfo *RI = TM.getRegisterInfo();
      // Does the function dedicate RBP / EBP to being a frame ptr?
      if (RI->hasFP(MF))
        // If so, don't allocate SP or BP.
        return end() - 2;
      else
        // If not, just don't allocate SP.
        return end() - 1;
    }
  

	}

	public final static class GR32_ADClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new GR32_ADClass();

		public static GR32_ADClass getInstance() { return instance;}

		private GR32_ADClass()
		{
			 super(GR32_ADVTs, 4, 4, GR32_AD); 
		}


	}

	public final static class RSTClass extends TargetRegisterClass
	{
		// Only allow one instance for this class.

		private static instance = new RSTClass();

		public static RSTClass getInstance() { return instance;}

		private RSTClass()
		{
			 super(RSTVTs, 10, 4, RST); 
		}

    RSTClass::iterator
    RSTClass::allocation_order_end(const MachineFunction &MF) const {
      return begin();
    }
  

	}


	// GR16 Sub-register Classes...
	public static final TargetRegisterClass[] GR16SubRegClasses = {
		GR8RegClass, GR8RegClass, 
	};

	// GR32 Sub-register Classes...
	public static final TargetRegisterClass[] GR32SubRegClasses = {
		GR8RegClass, GR8RegClass, GR16RegClass, 
	};

	// GR64 Sub-register Classes...
	public static final TargetRegisterClass[] GR64SubRegClasses = {
		GR8RegClass, GR8RegClass, GR16RegClass, GR32RegClass, 
	};

	// GR8_ABCD_L Sub-register Classes...
	public static final TargetRegisterClass[] GR8_ABCD_LSubRegClasses = {
		
	};

	// GR8_ABCD_H Sub-register Classes...
	public static final TargetRegisterClass[] GR8_ABCD_HSubRegClasses = {
		
	};

	// GR64_NOSP Sub-register Classes...
	public static final TargetRegisterClass[] GR64_NOSPSubRegClasses = {
		GR8RegClass, GR8RegClass, GR16RegClass, GR32_NOSPRegClass, 
	};

	// GR32_ABCD Sub-register Classes...
	public static final TargetRegisterClass[] GR32_ABCDSubRegClasses = {
		GR8_ABCD_LRegClass, GR8_ABCD_HRegClass, GR16_ABCDRegClass, 
	};

	// CCR Sub-register Classes...
	public static final TargetRegisterClass[] CCRSubRegClasses = {
		
	};

	// GR64_ABCD Sub-register Classes...
	public static final TargetRegisterClass[] GR64_ABCDSubRegClasses = {
		GR8_ABCD_LRegClass, GR8_ABCD_HRegClass, GR16_ABCDRegClass, GR32_ABCDRegClass, 
	};

	// RFP80 Sub-register Classes...
	public static final TargetRegisterClass[] RFP80SubRegClasses = {
		
	};

	// GR32_NOREX Sub-register Classes...
	public static final TargetRegisterClass[] GR32_NOREXSubRegClasses = {
		GR8_NOREXRegClass, GR8_NOREXRegClass, GR16_NOREXRegClass, 
	};

	// RFP64 Sub-register Classes...
	public static final TargetRegisterClass[] RFP64SubRegClasses = {
		
	};

	// VR256 Sub-register Classes...
	public static final TargetRegisterClass[] VR256SubRegClasses = {
		
	};

	// FR32 Sub-register Classes...
	public static final TargetRegisterClass[] FR32SubRegClasses = {
		
	};

	// FR64 Sub-register Classes...
	public static final TargetRegisterClass[] FR64SubRegClasses = {
		
	};

	// VR128 Sub-register Classes...
	public static final TargetRegisterClass[] VR128SubRegClasses = {
		
	};

	// GR64_NOREX Sub-register Classes...
	public static final TargetRegisterClass[] GR64_NOREXSubRegClasses = {
		GR8_NOREXRegClass, GR8_NOREXRegClass, GR16_NOREXRegClass, GR32_NOREXRegClass, 
	};

	// GR8_NOREX Sub-register Classes...
	public static final TargetRegisterClass[] GR8_NOREXSubRegClasses = {
		
	};

	// RFP32 Sub-register Classes...
	public static final TargetRegisterClass[] RFP32SubRegClasses = {
		
	};

	// GR32_NOSP Sub-register Classes...
	public static final TargetRegisterClass[] GR32_NOSPSubRegClasses = {
		GR8RegClass, GR8RegClass, GR16RegClass, 
	};

	// GR16_ABCD Sub-register Classes...
	public static final TargetRegisterClass[] GR16_ABCDSubRegClasses = {
		GR8_ABCD_LRegClass, GR8_ABCD_HRegClass, 
	};

	// VR64 Sub-register Classes...
	public static final TargetRegisterClass[] VR64SubRegClasses = {
		
	};

	// GR8 Sub-register Classes...
	public static final TargetRegisterClass[] GR8SubRegClasses = {
		
	};

	// GR64_NOREX_NOSP Sub-register Classes...
	public static final TargetRegisterClass[] GR64_NOREX_NOSPSubRegClasses = {
		GR8_NOREXRegClass, GR8_NOREXRegClass, GR16_NOREXRegClass, GR32_NOREXRegClass, 
	};

	// GR16_NOREX Sub-register Classes...
	public static final TargetRegisterClass[] GR16_NOREXSubRegClasses = {
		GR8_NOREXRegClass, GR8_NOREXRegClass, 
	};

	// GR32_AD Sub-register Classes...
	public static final TargetRegisterClass[] GR32_ADSubRegClasses = {
		GR8_ABCD_LRegClass, GR8_ABCD_HRegClass, GR16_ABCDRegClass, 
	};

	// RST Sub-register Classes...
	public static final TargetRegisterClass[] RSTSubRegClasses = {
		
	};

	// GR16 Super-register Classes...
	public static final TargetRegisterClass[] GR16SuperRegClasses = {
		GR32_NOSPRegClass, GR64_NOSPRegClass, GR64RegClass, GR32RegClass, 
	};

	// GR32 Super-register Classes...
	public static final TargetRegisterClass[] GR32SuperRegClasses = {
		GR64RegClass, 
	};

	// GR64 Super-register Classes...
	public static final TargetRegisterClass[] GR64SuperRegClasses = {
		
	};

	// GR8_ABCD_L Super-register Classes...
	public static final TargetRegisterClass[] GR8_ABCD_LSuperRegClasses = {
		GR16_ABCDRegClass, GR64_ABCDRegClass, GR32_ABCDRegClass, GR32_ADRegClass, 
	};

	// GR8_ABCD_H Super-register Classes...
	public static final TargetRegisterClass[] GR8_ABCD_HSuperRegClasses = {
		GR16_ABCDRegClass, GR64_ABCDRegClass, GR32_ABCDRegClass, GR32_ADRegClass, 
	};

	// GR64_NOSP Super-register Classes...
	public static final TargetRegisterClass[] GR64_NOSPSuperRegClasses = {
		
	};

	// GR32_ABCD Super-register Classes...
	public static final TargetRegisterClass[] GR32_ABCDSuperRegClasses = {
		GR64_ABCDRegClass, 
	};

	// CCR Super-register Classes...
	public static final TargetRegisterClass[] CCRSuperRegClasses = {
		
	};

	// GR64_ABCD Super-register Classes...
	public static final TargetRegisterClass[] GR64_ABCDSuperRegClasses = {
		
	};

	// RFP80 Super-register Classes...
	public static final TargetRegisterClass[] RFP80SuperRegClasses = {
		
	};

	// GR32_NOREX Super-register Classes...
	public static final TargetRegisterClass[] GR32_NOREXSuperRegClasses = {
		GR64_NOREXRegClass, GR64_NOREX_NOSPRegClass, 
	};

	// RFP64 Super-register Classes...
	public static final TargetRegisterClass[] RFP64SuperRegClasses = {
		
	};

	// VR256 Super-register Classes...
	public static final TargetRegisterClass[] VR256SuperRegClasses = {
		
	};

	// FR32 Super-register Classes...
	public static final TargetRegisterClass[] FR32SuperRegClasses = {
		
	};

	// FR64 Super-register Classes...
	public static final TargetRegisterClass[] FR64SuperRegClasses = {
		
	};

	// VR128 Super-register Classes...
	public static final TargetRegisterClass[] VR128SuperRegClasses = {
		
	};

	// GR64_NOREX Super-register Classes...
	public static final TargetRegisterClass[] GR64_NOREXSuperRegClasses = {
		
	};

	// GR8_NOREX Super-register Classes...
	public static final TargetRegisterClass[] GR8_NOREXSuperRegClasses = {
		GR64_NOREXRegClass, GR32_NOREXRegClass, GR16_NOREXRegClass, GR64_NOREX_NOSPRegClass, 
	};

	// RFP32 Super-register Classes...
	public static final TargetRegisterClass[] RFP32SuperRegClasses = {
		
	};

	// GR32_NOSP Super-register Classes...
	public static final TargetRegisterClass[] GR32_NOSPSuperRegClasses = {
		GR64_NOSPRegClass, 
	};

	// GR16_ABCD Super-register Classes...
	public static final TargetRegisterClass[] GR16_ABCDSuperRegClasses = {
		GR64_ABCDRegClass, GR32_ABCDRegClass, GR32_ADRegClass, 
	};

	// VR64 Super-register Classes...
	public static final TargetRegisterClass[] VR64SuperRegClasses = {
		
	};

	// GR8 Super-register Classes...
	public static final TargetRegisterClass[] GR8SuperRegClasses = {
		GR32_NOSPRegClass, GR64_NOSPRegClass, GR64RegClass, GR32RegClass, GR16RegClass, 
	};

	// GR64_NOREX_NOSP Super-register Classes...
	public static final TargetRegisterClass[] GR64_NOREX_NOSPSuperRegClasses = {
		
	};

	// GR16_NOREX Super-register Classes...
	public static final TargetRegisterClass[] GR16_NOREXSuperRegClasses = {
		GR64_NOREXRegClass, GR32_NOREXRegClass, GR64_NOREX_NOSPRegClass, 
	};

	// GR32_AD Super-register Classes...
	public static final TargetRegisterClass[] GR32_ADSuperRegClasses = {
		
	};

	// RST Super-register Classes...
	public static final TargetRegisterClass[] RSTSuperRegClasses = {
		
	};
	// GR16 Register Class sub-classes...
	public static final TargetRegisterClass[] GR16SubClasses = {
		GR16_ABCDRegClass, GR16_NOREXRegClass, 
	};
		// GR32 Register Class sub-classes...
	public static final TargetRegisterClass[] GR32SubClasses = {
		GR32_ABCDRegClass, GR32_NOREXRegClass, GR32_NOSPRegClass, GR32_ADRegClass, 
	};
		// GR64 Register Class sub-classes...
	public static final TargetRegisterClass[] GR64SubClasses = {
		GR64_NOSPRegClass, GR64_ABCDRegClass, GR64_NOREXRegClass, GR64_NOREX_NOSPRegClass, 
	};
		// GR8_ABCD_L Register Class sub-classes...
	public static final TargetRegisterClass[] GR8_ABCD_LSubClasses = {
		
	};
		// GR8_ABCD_H Register Class sub-classes...
	public static final TargetRegisterClass[] GR8_ABCD_HSubClasses = {
		
	};
		// GR64_NOSP Register Class sub-classes...
	public static final TargetRegisterClass[] GR64_NOSPSubClasses = {
		GR64_ABCDRegClass, GR64_NOREX_NOSPRegClass, 
	};
		// GR32_ABCD Register Class sub-classes...
	public static final TargetRegisterClass[] GR32_ABCDSubClasses = {
		GR32_ADRegClass, 
	};
		// CCR Register Class sub-classes...
	public static final TargetRegisterClass[] CCRSubClasses = {
		
	};
		// GR64_ABCD Register Class sub-classes...
	public static final TargetRegisterClass[] GR64_ABCDSubClasses = {
		
	};
		// RFP80 Register Class sub-classes...
	public static final TargetRegisterClass[] RFP80SubClasses = {
		
	};
		// GR32_NOREX Register Class sub-classes...
	public static final TargetRegisterClass[] GR32_NOREXSubClasses = {
		GR32_ABCDRegClass, GR32_ADRegClass, 
	};
		// RFP64 Register Class sub-classes...
	public static final TargetRegisterClass[] RFP64SubClasses = {
		RFP80RegClass, 
	};
		// VR256 Register Class sub-classes...
	public static final TargetRegisterClass[] VR256SubClasses = {
		
	};
		// FR32 Register Class sub-classes...
	public static final TargetRegisterClass[] FR32SubClasses = {
		FR64RegClass, VR128RegClass, 
	};
		// FR64 Register Class sub-classes...
	public static final TargetRegisterClass[] FR64SubClasses = {
		VR128RegClass, 
	};
		// VR128 Register Class sub-classes...
	public static final TargetRegisterClass[] VR128SubClasses = {
		
	};
		// GR64_NOREX Register Class sub-classes...
	public static final TargetRegisterClass[] GR64_NOREXSubClasses = {
		GR64_ABCDRegClass, GR64_NOREX_NOSPRegClass, 
	};
		// GR8_NOREX Register Class sub-classes...
	public static final TargetRegisterClass[] GR8_NOREXSubClasses = {
		GR8_ABCD_LRegClass, GR8_ABCD_HRegClass, 
	};
		// RFP32 Register Class sub-classes...
	public static final TargetRegisterClass[] RFP32SubClasses = {
		RFP80RegClass, RFP64RegClass, 
	};
		// GR32_NOSP Register Class sub-classes...
	public static final TargetRegisterClass[] GR32_NOSPSubClasses = {
		GR32_ABCDRegClass, GR32_ADRegClass, 
	};
		// GR16_ABCD Register Class sub-classes...
	public static final TargetRegisterClass[] GR16_ABCDSubClasses = {
		
	};
		// VR64 Register Class sub-classes...
	public static final TargetRegisterClass[] VR64SubClasses = {
		
	};
		// GR8 Register Class sub-classes...
	public static final TargetRegisterClass[] GR8SubClasses = {
		GR8_ABCD_LRegClass, GR8_ABCD_HRegClass, GR8_NOREXRegClass, 
	};
		// GR64_NOREX_NOSP Register Class sub-classes...
	public static final TargetRegisterClass[] GR64_NOREX_NOSPSubClasses = {
		GR64_ABCDRegClass, 
	};
		// GR16_NOREX Register Class sub-classes...
	public static final TargetRegisterClass[] GR16_NOREXSubClasses = {
		GR16_ABCDRegClass, 
	};
		// GR32_AD Register Class sub-classes...
	public static final TargetRegisterClass[] GR32_ADSubClasses = {
		
	};
		// RST Register Class sub-classes...
	public static final TargetRegisterClass[] RSTSubClasses = {
		
	};
		// GR16 Register Class super-classes...
	public static final TargetRegisterClass[] GR16Superclasses = {
		
	};

	// GR32 Register Class super-classes...
	public static final TargetRegisterClass[] GR32Superclasses = {
		
	};

	// GR64 Register Class super-classes...
	public static final TargetRegisterClass[] GR64Superclasses = {
		
	};

	// GR8_ABCD_L Register Class super-classes...
	public static final TargetRegisterClass[] GR8_ABCD_LSuperclasses = {
		GR8_ABCD_LRegClass, GR8_ABCD_LRegClass, 
	};

	// GR8_ABCD_H Register Class super-classes...
	public static final TargetRegisterClass[] GR8_ABCD_HSuperclasses = {
		GR8_ABCD_HRegClass, GR8_ABCD_HRegClass, 
	};

	// GR64_NOSP Register Class super-classes...
	public static final TargetRegisterClass[] GR64_NOSPSuperclasses = {
		GR64_NOSPRegClass, 
	};

	// GR32_ABCD Register Class super-classes...
	public static final TargetRegisterClass[] GR32_ABCDSuperclasses = {
		GR32_ABCDRegClass, GR32_ABCDRegClass, GR32_ABCDRegClass, 
	};

	// CCR Register Class super-classes...
	public static final TargetRegisterClass[] CCRSuperclasses = {
		
	};

	// GR64_ABCD Register Class super-classes...
	public static final TargetRegisterClass[] GR64_ABCDSuperclasses = {
		GR64_ABCDRegClass, GR64_ABCDRegClass, GR64_ABCDRegClass, GR64_ABCDRegClass, 
	};

	// RFP80 Register Class super-classes...
	public static final TargetRegisterClass[] RFP80Superclasses = {
		RFP80RegClass, RFP80RegClass, 
	};

	// GR32_NOREX Register Class super-classes...
	public static final TargetRegisterClass[] GR32_NOREXSuperclasses = {
		GR32_NOREXRegClass, 
	};

	// RFP64 Register Class super-classes...
	public static final TargetRegisterClass[] RFP64Superclasses = {
		RFP64RegClass, 
	};

	// VR256 Register Class super-classes...
	public static final TargetRegisterClass[] VR256Superclasses = {
		
	};

	// FR32 Register Class super-classes...
	public static final TargetRegisterClass[] FR32Superclasses = {
		
	};

	// FR64 Register Class super-classes...
	public static final TargetRegisterClass[] FR64Superclasses = {
		FR64RegClass, 
	};

	// VR128 Register Class super-classes...
	public static final TargetRegisterClass[] VR128Superclasses = {
		VR128RegClass, VR128RegClass, 
	};

	// GR64_NOREX Register Class super-classes...
	public static final TargetRegisterClass[] GR64_NOREXSuperclasses = {
		GR64_NOREXRegClass, 
	};

	// GR8_NOREX Register Class super-classes...
	public static final TargetRegisterClass[] GR8_NOREXSuperclasses = {
		GR8_NOREXRegClass, 
	};

	// RFP32 Register Class super-classes...
	public static final TargetRegisterClass[] RFP32Superclasses = {
		
	};

	// GR32_NOSP Register Class super-classes...
	public static final TargetRegisterClass[] GR32_NOSPSuperclasses = {
		GR32_NOSPRegClass, 
	};

	// GR16_ABCD Register Class super-classes...
	public static final TargetRegisterClass[] GR16_ABCDSuperclasses = {
		GR16_ABCDRegClass, GR16_ABCDRegClass, 
	};

	// VR64 Register Class super-classes...
	public static final TargetRegisterClass[] VR64Superclasses = {
		
	};

	// GR8 Register Class super-classes...
	public static final TargetRegisterClass[] GR8Superclasses = {
		
	};

	// GR64_NOREX_NOSP Register Class super-classes...
	public static final TargetRegisterClass[] GR64_NOREX_NOSPSuperclasses = {
		GR64_NOREX_NOSPRegClass, GR64_NOREX_NOSPRegClass, GR64_NOREX_NOSPRegClass, 
	};

	// GR16_NOREX Register Class super-classes...
	public static final TargetRegisterClass[] GR16_NOREXSuperclasses = {
		GR16_NOREXRegClass, 
	};

	// GR32_AD Register Class super-classes...
	public static final TargetRegisterClass[] GR32_ADSuperclasses = {
		GR32_ADRegClass, GR32_ADRegClass, GR32_ADRegClass, GR32_ADRegClass, 
	};

	// RST Register Class super-classes...
	public static final TargetRegisterClass[] RSTSuperclasses = {
		
	};

	public final static TargetRegisterClass[] registerClasses = {
		GR16RegClass,
		GR32RegClass,
		GR64RegClass,
		GR8_ABCD_LRegClass,
		GR8_ABCD_HRegClass,
		GR64_NOSPRegClass,
		GR32_ABCDRegClass,
		CCRRegClass,
		GR64_ABCDRegClass,
		RFP80RegClass,
		GR32_NOREXRegClass,
		RFP64RegClass,
		VR256RegClass,
		FR32RegClass,
		FR64RegClass,
		VR128RegClass,
		GR64_NOREXRegClass,
		GR8_NOREXRegClass,
		RFP32RegClass,
		GR32_NOSPRegClass,
		GR16_ABCDRegClass,
		VR64RegClass,
		GR8RegClass,
		GR64_NOREX_NOSPRegClass,
		GR16_NOREXRegClass,
		GR32_ADRegClass,
		RSTRegClass,
	};



	// Number of hash collisions: 11
	int[] SubregHashTable = {
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R15D, R15W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R13, R13B
		NoRegister, NoRegister, 
		RDX, EDX
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R10D, R10B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		ECX, CL
		NoRegister, NoRegister, 
		R10W, R10B
		NoRegister, NoRegister, 
		R8, R8D
		NoRegister, NoRegister, 
		RDI, DIL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		ESI, SI
		NoRegister, NoRegister, 
		R14D, R14W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R13, R13D
		RIP, EIP
		R8D, R8B
		R8W, R8B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R11D, R11W
		R8, R8W
		RCX, CL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		ESP, SP
		NoRegister, NoRegister, 
		R10, R10D
		NoRegister, NoRegister, 
		RSI, SI
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R15, R15W
		RSI, ESI
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		SI, SIL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		ECX, CX
		R12D, R12B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R9, R9B
		DX, DH
		NoRegister, NoRegister, 
		R12W, R12B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R10, R10B
		RSP, SP
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R15W, R15B
		NoRegister, NoRegister, 
		R15D, R15B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R14, R14W
		ESI, SIL
		NoRegister, NoRegister, 
		R8D, R8W
		RSP, ESP
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EDX, DH
		RCX, CX
		NoRegister, NoRegister, 
		R9, R9D
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R11, R11W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		AX, AH
		R15, R15D
		NoRegister, NoRegister, 
		RSI, SIL
		NoRegister, NoRegister, 
		R9D, R9B
		R9W, R9B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		SP, SPL
		R10D, R10W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EDI, DI
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R9, R9W
		DX, DL
		RDX, DH
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		BP, BPL
		NoRegister, NoRegister, 
		R12, R12B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		AX, AL
		ESP, SPL
		NoRegister, NoRegister, 
		EAX, AH
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R15, R15B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EDX, DL
		NoRegister, NoRegister, 
		RDI, DI
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R12, R12D
		EBP, BPL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EAX, AL
		RSP, SPL
		R9D, R9W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RAX, AH
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R11W, R11B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R11D, R11B
		NoRegister, NoRegister, 
		RDX, DL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RAX, EAX
		R10, R10W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RBP, BPL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EAX, AX
		BX, BH
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RAX, AL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EDX, DX
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R13D, R13W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RBP, EBP
		NoRegister, NoRegister, 
		R11, R11D
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		BX, BL
		EBX, BH
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RAX, AX
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RDX, DX
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RBX, EBX
		R11, R11B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EBX, BL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RBX, BH
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R14D, R14B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R14W, R14B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R13, R13W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EBP, BP
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RBX, BL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R12D, R12W
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R14, R14D
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EBX, BX
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		CX, CH
		NoRegister, NoRegister, 
		RBP, BP
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		EIP, IP
		NoRegister, NoRegister, 
		R13W, R13B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R13D, R13B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RCX, ECX
		R14, R14B
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		ECX, CH
		NoRegister, NoRegister, 
		RBX, BX
		DI, DIL
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		RIP, IP
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		R12, R12W
		NoRegister, NoRegister, 
		RDI, EDI
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		CX, CL
		NoRegister, NoRegister, 
		EDI, DIL
		R8, R8B
		RCX, CH
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
		NoRegister, NoRegister, 
	};
	int SubregHashTableSize = 512;


	// Number of hash collisions: 13
	int[] SuperregHashTable = {
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SPL, ESP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15B, R15W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SI, ESI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R9B, R9, 
		ESP, RSP, 
		R9W, R9, 
		R9D, R9, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R14B, R14W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SP, ESP, 
		NoRegister,  NoRegister,
		CH, CX, 
		NoRegister,  NoRegister,
		CL, CX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11B, R11W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15W, R15D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15B, R15D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R8B, R8D, 
		NoRegister,  NoRegister,
		R8W, R8D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R8B, R8W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		DIL, DI, 
		NoRegister,  NoRegister,
		R12B, R12D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12W, R12D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10B, R10W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		AH, EAX, 
		AL, EAX, 
		AX, EAX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BPL, EBP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		AH, RAX, 
		AL, RAX, 
		AX, RAX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R9B, R9D, 
		NoRegister,  NoRegister,
		R9W, R9D, 
		BPL, RBP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11W, R11D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11B, R11D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BP, EBP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		AH, AX, 
		AL, AX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BP, RBP, 
		NoRegister,  NoRegister,
		EAX, RAX, 
		NoRegister,  NoRegister,
		R9B, R9W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10D, R10, 
		R10B, R10, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10W, R10, 
		DH, DX, 
		NoRegister,  NoRegister,
		DL, DX, 
		BH, EBX, 
		BL, EBX, 
		NoRegister,  NoRegister,
		BX, EBX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BH, RBX, 
		BL, RBX, 
		NoRegister,  NoRegister,
		BX, RBX, 
		NoRegister,  NoRegister,
		EBP, RBP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12B, R12, 
		R12D, R12, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12W, R12, 
		NoRegister,  NoRegister,
		R13B, R13W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		CH, RCX, 
		NoRegister,  NoRegister,
		CL, RCX, 
		NoRegister,  NoRegister,
		BPL, BP, 
		NoRegister,  NoRegister,
		CX, RCX, 
		NoRegister,  NoRegister,
		R11W, R11, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11D, R11, 
		R11B, R11, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R14B, R14D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EBX, RBX, 
		NoRegister,  NoRegister,
		R14W, R14D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		DIL, RDI, 
		NoRegister,  NoRegister,
		ECX, RCX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		DI, RDI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R14D, R14, 
		R14B, R14, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		CH, ECX, 
		NoRegister,  NoRegister,
		R14W, R14, 
		NoRegister,  NoRegister,
		CL, ECX, 
		NoRegister,  NoRegister,
		CX, ECX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BH, BX, 
		BL, BX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EDI, RDI, 
		DH, RDX, 
		NoRegister,  NoRegister,
		DL, RDX, 
		NoRegister,  NoRegister,
		DX, RDX, 
		R12B, R12W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13W, R13, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13B, R13, 
		R13D, R13, 
		DIL, EDI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		DI, EDI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SIL, RSI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EDX, RDX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		IP, RIP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15W, R15, 
		NoRegister,  NoRegister,
		R15D, R15, 
		R15B, R15, 
		DH, EDX, 
		NoRegister,  NoRegister,
		DL, EDX, 
		NoRegister,  NoRegister,
		DX, EDX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SPL, RSP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EIP, RIP, 
		SIL, SI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13W, R13D, 
		SI, RSI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SIL, ESI, 
		NoRegister,  NoRegister,
		R13B, R13D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		IP, EIP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10B, R10D, 
		NoRegister,  NoRegister,
		R8B, R8, 
		R8D, R8, 
		R10W, R10D, 
		ESI, RSI, 
		R8W, R8, 
		SPL, SP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SP, RSP, 
		NoRegister,  NoRegister
	};
	int SuperregHashTableSize = 512;


	// Number of hash collisions: 49
	int AliasesHashTable[] = {
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SPL, ESP, 
		NoRegister,  NoRegister,
		R15D, R15W, 
		R15B, R15W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13, R13B, 
		NoRegister,  NoRegister,
		RDX, EDX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SI, ESI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R9B, R9, 
		R8, R8D, 
		R9W, R9, 
		R9D, R9, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		ESI, SI, 
		NoRegister,  NoRegister,
		R14D, R14W, 
		R14B, R14W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13, R13D, 
		RIP, EIP, 
		R8D, R8B, 
		R8W, R8B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SP, ESP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R8, R8W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		ESP, SP, 
		NoRegister,  NoRegister,
		RSI, SI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15W, R15D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15B, R15D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15, R15W, 
		RSI, ESI, 
		R8B, R8D, 
		NoRegister,  NoRegister,
		R8W, R8D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SI, SIL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R9, R9B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		RSP, SP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15W, R15B, 
		NoRegister,  NoRegister,
		R15D, R15B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R14, R14W, 
		ESI, SIL, 
		R8B, R8W, 
		R8D, R8W, 
		RSP, ESP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R9, R9D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		AX, AH, 
		R15, R15D, 
		NoRegister,  NoRegister,
		RSI, SIL, 
		NoRegister,  NoRegister,
		R9D, R9B, 
		R9W, R9B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SP, SPL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R9, R9W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BP, BPL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		AH, RAX, 
		AL, RAX, 
		AX, RAX, 
		AX, AL, 
		ESP, SPL, 
		NoRegister,  NoRegister,
		EAX, AH, 
		R9B, R9D, 
		NoRegister,  NoRegister,
		R9W, R9D, 
		BPL, RBP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R15, R15B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EBP, BPL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		AH, AX, 
		AL, AX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BP, RBP, 
		EAX, AL, 
		EAX, RAX, 
		R9D, R9W, 
		R9B, R9W, 
		NoRegister,  NoRegister,
		RAX, AH, 
		NoRegister,  NoRegister,
		RSP, SPL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		RBP, BPL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BH, RBX, 
		BL, RBX, 
		NoRegister,  NoRegister,
		BX, RBX, 
		BX, BH, 
		EAX, AX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		RAX, AL, 
		EBP, RBP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BX, BL, 
		EBX, BH, 
		CH, RCX, 
		NoRegister,  NoRegister,
		BPL, BP, 
		NoRegister,  NoRegister,
		CX, RCX, 
		NoRegister,  NoRegister,
		CL, RCX, 
		NoRegister,  NoRegister,
		RAX, AX, 
		NoRegister,  NoRegister,
		EBX, RBX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		DIL, RDI, 
		NoRegister,  NoRegister,
		EBX, BL, 
		NoRegister,  NoRegister,
		ECX, RCX, 
		DI, RDI, 
		NoRegister,  NoRegister,
		RBX, BH, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BH, BX, 
		BL, BX, 
		NoRegister,  NoRegister,
		EBP, BP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EDI, RDI, 
		DH, RDX, 
		RBX, BL, 
		DL, RDX, 
		NoRegister,  NoRegister,
		DX, RDX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SIL, RSI, 
		EBX, BX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		CX, CH, 
		NoRegister,  NoRegister,
		EDX, RDX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		RBP, BP, 
		NoRegister,  NoRegister,
		IP, RIP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SPL, RSP, 
		NoRegister,  NoRegister,
		ECX, CH, 
		NoRegister,  NoRegister,
		EIP, RIP, 
		DI, DIL, 
		RBX, BX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SI, RSI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10B, R10D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		CX, CL, 
		R10W, R10D, 
		EDI, DIL, 
		NoRegister,  NoRegister,
		ESI, RSI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		RCX, CH, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SP, RSP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10D, R10B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		ECX, CL, 
		NoRegister,  NoRegister,
		R10W, R10B, 
		NoRegister,  NoRegister,
		ESP, RSP, 
		NoRegister,  NoRegister,
		RDI, DIL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		CH, CX, 
		NoRegister,  NoRegister,
		CL, CX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11D, R11W, 
		R11B, R11W, 
		RCX, CL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10, R10D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		ECX, CX, 
		R12D, R12B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		DX, DH, 
		NoRegister,  NoRegister,
		R12W, R12B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10, R10B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		DIL, DI, 
		NoRegister,  NoRegister,
		R12B, R12D, 
		NoRegister,  NoRegister,
		EDX, DH, 
		RCX, CX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12W, R12D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11, R11W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10D, R10W, 
		R10B, R10W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EDI, DI, 
		AH, EAX, 
		AL, EAX, 
		AX, EAX, 
		RDX, DH, 
		DX, DL, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		BPL, EBP, 
		NoRegister,  NoRegister,
		R12, R12B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11W, R11D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EDX, DL, 
		NoRegister,  NoRegister,
		R11B, R11D, 
		NoRegister,  NoRegister,
		RDI, DI, 
		BP, EBP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12, R12D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R10D, R10, 
		R10B, R10, 
		NoRegister,  NoRegister,
		R11W, R11B, 
		NoRegister,  NoRegister,
		R10W, R10, 
		DH, DX, 
		R11D, R11B, 
		DL, DX, 
		BH, EBX, 
		BL, EBX, 
		RDX, DL, 
		BX, EBX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		RAX, EAX, 
		R10, R10W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12B, R12, 
		R12D, R12, 
		NoRegister,  NoRegister,
		EDX, DX, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12W, R12, 
		NoRegister,  NoRegister,
		R13B, R13W, 
		R13D, R13W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		RBP, EBP, 
		NoRegister,  NoRegister,
		R11, R11D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11W, R11, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R11D, R11, 
		R11B, R11, 
		NoRegister,  NoRegister,
		RDX, DX, 
		NoRegister,  NoRegister,
		R14B, R14D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R14W, R14D, 
		NoRegister,  NoRegister,
		RBX, EBX, 
		R11, R11B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R14D, R14, 
		R14D, R14B, 
		NoRegister,  NoRegister,
		R14B, R14, 
		CH, ECX, 
		NoRegister,  NoRegister,
		R14W, R14, 
		R14W, R14B, 
		CL, ECX, 
		NoRegister,  NoRegister,
		CX, ECX, 
		NoRegister,  NoRegister,
		R13, R13W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12B, R12W, 
		R12D, R12W, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13W, R13, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13B, R13, 
		R13D, R13, 
		DIL, EDI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		DI, EDI, 
		R14, R14D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		EIP, IP, 
		NoRegister,  NoRegister,
		R13W, R13B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13D, R13B, 
		NoRegister,  NoRegister,
		R15W, R15, 
		R15B, R15, 
		R15D, R15, 
		RCX, ECX, 
		DH, EDX, 
		NoRegister,  NoRegister,
		DL, EDX, 
		NoRegister,  NoRegister,
		DX, EDX, 
		NoRegister,  NoRegister,
		R14, R14B, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SIL, SI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R13W, R13D, 
		RIP, IP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		SIL, ESI, 
		NoRegister,  NoRegister,
		R13B, R13D, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R12, R12W, 
		NoRegister,  NoRegister,
		RDI, EDI, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		IP, EIP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		R8B, R8, 
		R8D, R8, 
		R8W, R8, 
		NoRegister,  NoRegister,
		R8, R8B, 
		SPL, SP, 
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
		NoRegister,  NoRegister,
	};
	int AliasesHashTableSize = 1024;


	// Register Alias Sets...
	int[] Empty_AliasSet = { };
	int[] ST2_AliasSet = { };
	int[] R8W_AliasSet = { R8, R8B, R8D, };
	int[] BX_AliasSet = { BH, BL, EBX, RBX, };
	int[] R14_AliasSet = { R14B, R14D, R14W, };
	int[] R10D_AliasSet = { R10, R10B, R10W, };
	int[] AL_AliasSet = { AX, EAX, RAX, };
	int[] XMM10_AliasSet = { };
	int[] CX_AliasSet = { CH, CL, ECX, RCX, };
	int[] YMM1_AliasSet = { };
	int[] XMM12_AliasSet = { };
	int[] ESI_AliasSet = { RSI, SI, SIL, };
	int[] R15D_AliasSet = { R15, R15B, R15W, };
	int[] CS_AliasSet = { };
	int[] R12_AliasSet = { R12B, R12D, R12W, };
	int[] XMM9_AliasSet = { };
	int[] ST0_AliasSet = { };
	int[] DL_AliasSet = { DX, EDX, RDX, };
	int[] YMM8_AliasSet = { };
	int[] AX_AliasSet = { AH, AL, EAX, RAX, };
	int[] R11_AliasSet = { R11B, R11D, R11W, };
	int[] R11B_AliasSet = { R11, R11D, R11W, };
	int[] YMM3_AliasSet = { };
	int[] R15B_AliasSet = { R15, R15D, R15W, };
	int[] YMM14_AliasSet = { };
	int[] EDX_AliasSet = { DH, DL, DX, RDX, };
	int[] FP4_AliasSet = { };
	int[] XMM4_AliasSet = { };
	int[] DX_AliasSet = { DH, DL, EDX, RDX, };
	int[] SPL_AliasSet = { ESP, RSP, SP, };
	int[] YMM5_AliasSet = { };
	int[] FS_AliasSet = { };
	int[] XMM7_AliasSet = { };
	int[] RCX_AliasSet = { CH, CL, CX, ECX, };
	int[] SP_AliasSet = { ESP, RSP, SPL, };
	int[] EDI_AliasSet = { DI, DIL, RDI, };
	int[] R10_AliasSet = { R10B, R10D, R10W, };
	int[] ST3_AliasSet = { };
	int[] YMM11_AliasSet = { };
	int[] MM7_AliasSet = { };
	int[] XMM1_AliasSet = { };
	int[] MM5_AliasSet = { };
	int[] MM4_AliasSet = { };
	int[] R15W_AliasSet = { R15, R15B, R15D, };
	int[] BP_AliasSet = { BPL, EBP, RBP, };
	int[] DI_AliasSet = { DIL, EDI, RDI, };
	int[] AH_AliasSet = { AX, EAX, RAX, };
	int[] R8D_AliasSet = { R8, R8B, R8W, };
	int[] R8B_AliasSet = { R8, R8D, R8W, };
	int[] R13B_AliasSet = { R13, R13D, R13W, };
	int[] XMM15_AliasSet = { };
	int[] YMM9_AliasSet = { };
	int[] XMM3_AliasSet = { };
	int[] FP0_AliasSet = { };
	int[] XMM13_AliasSet = { };
	int[] XMM0_AliasSet = { };
	int[] MM2_AliasSet = { };
	int[] CL_AliasSet = { CX, ECX, RCX, };
	int[] ESP_AliasSet = { RSP, SP, SPL, };
	int[] ST5_AliasSet = { };
	int[] BL_AliasSet = { BX, EBX, RBX, };
	int[] R14D_AliasSet = { R14, R14B, R14W, };
	int[] ES_AliasSet = { };
	int[] XMM8_AliasSet = { };
	int[] R12W_AliasSet = { R12, R12B, R12D, };
	int[] R14W_AliasSet = { R14, R14B, R14D, };
	int[] SI_AliasSet = { ESI, RSI, SIL, };
	int[] GS_AliasSet = { };
	int[] RSI_AliasSet = { ESI, SI, SIL, };
	int[] SS_AliasSet = { };
	int[] R10B_AliasSet = { R10, R10D, R10W, };
	int[] XMM2_AliasSet = { };
	int[] XMM11_AliasSet = { };
	int[] ST4_AliasSet = { };
	int[] RSP_AliasSet = { ESP, SP, SPL, };
	int[] YMM12_AliasSet = { };
	int[] YMM0_AliasSet = { };
	int[] RBP_AliasSet = { BP, BPL, EBP, };
	int[] YMM6_AliasSet = { };
	int[] ECX_AliasSet = { CH, CL, CX, RCX, };
	int[] R14B_AliasSet = { R14, R14D, R14W, };
	int[] DIL_AliasSet = { DI, EDI, RDI, };
	int[] FP2_AliasSet = { };
	int[] BPL_AliasSet = { BP, EBP, RBP, };
	int[] FP3_AliasSet = { };
	int[] R15_AliasSet = { R15B, R15D, R15W, };
	int[] RIP_AliasSet = { EIP, IP, };
	int[] ST7_AliasSet = { };
	int[] RBX_AliasSet = { BH, BL, BX, EBX, };
	int[] MM6_AliasSet = { };
	int[] YMM13_AliasSet = { };
	int[] R8_AliasSet = { R8B, R8D, R8W, };
	int[] MM1_AliasSet = { };
	int[] MM0_AliasSet = { };
	int[] EFLAGS_AliasSet = { };
	int[] FP1_AliasSet = { };
	int[] R9W_AliasSet = { R9, R9B, R9D, };
	int[] RAX_AliasSet = { AH, AL, AX, EAX, };
	int[] R11W_AliasSet = { R11, R11B, R11D, };
	int[] ST6_AliasSet = { };
	int[] MM3_AliasSet = { };
	int[] YMM10_AliasSet = { };
	int[] EAX_AliasSet = { AH, AL, AX, RAX, };
	int[] R11D_AliasSet = { R11, R11B, R11W, };
	int[] FP6_AliasSet = { };
	int[] R12D_AliasSet = { R12, R12B, R12W, };
	int[] R13D_AliasSet = { R13, R13B, R13W, };
	int[] R12B_AliasSet = { R12, R12D, R12W, };
	int[] R13_AliasSet = { R13B, R13D, R13W, };
	int[] R9D_AliasSet = { R9, R9B, R9W, };
	int[] SIL_AliasSet = { ESI, RSI, SI, };
	int[] DS_AliasSet = { };
	int[] YMM15_AliasSet = { };
	int[] R9B_AliasSet = { R9, R9D, R9W, };
	int[] R10W_AliasSet = { R10, R10B, R10D, };
	int[] YMM2_AliasSet = { };
	int[] IP_AliasSet = { EIP, RIP, };
	int[] EBX_AliasSet = { BH, BL, BX, RBX, };
	int[] RDX_AliasSet = { DH, DL, DX, EDX, };
	int[] EIP_AliasSet = { IP, RIP, };
	int[] XMM6_AliasSet = { };
	int[] XMM5_AliasSet = { };
	int[] EBP_AliasSet = { BP, BPL, RBP, };
	int[] YMM7_AliasSet = { };
	int[] ST1_AliasSet = { };
	int[] XMM14_AliasSet = { };
	int[] DH_AliasSet = { DX, EDX, RDX, };
	int[] R13W_AliasSet = { R13, R13B, R13D, };
	int[] CH_AliasSet = { CX, ECX, RCX, };
	int[] FP5_AliasSet = { };
	int[] R9_AliasSet = { R9B, R9D, R9W, };
	int[] RDI_AliasSet = { DI, DIL, EDI, };
	int[] BH_AliasSet = { BX, EBX, RBX, };
	int[] YMM4_AliasSet = { };


	// Register Sub-registers Sets...
	int[] Empty_SubRegsSet = {};
	int[] ST2_SubRegsSet = { };
	int[] R8W_SubRegsSet = { R8B, };
	int[] BX_SubRegsSet = { BH, BL, };
	int[] R14_SubRegsSet = { R14D, R14W, R14B, };
	int[] R10D_SubRegsSet = { R10W, R10B, };
	int[] AL_SubRegsSet = { };
	int[] XMM10_SubRegsSet = { };
	int[] CX_SubRegsSet = { CH, CL, };
	int[] YMM1_SubRegsSet = { };
	int[] XMM12_SubRegsSet = { };
	int[] ESI_SubRegsSet = { SI, SIL, };
	int[] R15D_SubRegsSet = { R15W, R15B, };
	int[] CS_SubRegsSet = { };
	int[] XMM9_SubRegsSet = { };
	int[] R12_SubRegsSet = { R12D, R12W, R12B, };
	int[] ST0_SubRegsSet = { };
	int[] DL_SubRegsSet = { };
	int[] YMM8_SubRegsSet = { };
	int[] AX_SubRegsSet = { AH, AL, };
	int[] R11_SubRegsSet = { R11D, R11W, R11B, };
	int[] R11B_SubRegsSet = { };
	int[] YMM3_SubRegsSet = { };
	int[] R15B_SubRegsSet = { };
	int[] YMM14_SubRegsSet = { };
	int[] EDX_SubRegsSet = { DX, DH, DL, };
	int[] FP4_SubRegsSet = { };
	int[] XMM4_SubRegsSet = { };
	int[] SPL_SubRegsSet = { };
	int[] DX_SubRegsSet = { DH, DL, };
	int[] YMM5_SubRegsSet = { };
	int[] FS_SubRegsSet = { };
	int[] XMM7_SubRegsSet = { };
	int[] RCX_SubRegsSet = { ECX, CX, CH, CL, };
	int[] SP_SubRegsSet = { SPL, };
	int[] ST3_SubRegsSet = { };
	int[] EDI_SubRegsSet = { DI, DIL, };
	int[] R10_SubRegsSet = { R10D, R10W, R10B, };
	int[] YMM11_SubRegsSet = { };
	int[] MM7_SubRegsSet = { };
	int[] XMM1_SubRegsSet = { };
	int[] MM5_SubRegsSet = { };
	int[] MM4_SubRegsSet = { };
	int[] R15W_SubRegsSet = { R15B, };
	int[] BP_SubRegsSet = { BPL, };
	int[] DI_SubRegsSet = { DIL, };
	int[] AH_SubRegsSet = { };
	int[] R8B_SubRegsSet = { };
	int[] R8D_SubRegsSet = { R8W, R8B, };
	int[] R13B_SubRegsSet = { };
	int[] XMM15_SubRegsSet = { };
	int[] YMM9_SubRegsSet = { };
	int[] XMM3_SubRegsSet = { };
	int[] FP0_SubRegsSet = { };
	int[] XMM13_SubRegsSet = { };
	int[] XMM0_SubRegsSet = { };
	int[] MM2_SubRegsSet = { };
	int[] CL_SubRegsSet = { };
	int[] ST5_SubRegsSet = { };
	int[] ESP_SubRegsSet = { SP, SPL, };
	int[] BL_SubRegsSet = { };
	int[] R14D_SubRegsSet = { R14W, R14B, };
	int[] ES_SubRegsSet = { };
	int[] XMM8_SubRegsSet = { };
	int[] R12W_SubRegsSet = { R12B, };
	int[] R14W_SubRegsSet = { R14B, };
	int[] GS_SubRegsSet = { };
	int[] SI_SubRegsSet = { SIL, };
	int[] RSI_SubRegsSet = { ESI, SI, SIL, };
	int[] SS_SubRegsSet = { };
	int[] R10B_SubRegsSet = { };
	int[] XMM2_SubRegsSet = { };
	int[] XMM11_SubRegsSet = { };
	int[] ST4_SubRegsSet = { };
	int[] YMM12_SubRegsSet = { };
	int[] RSP_SubRegsSet = { ESP, SP, SPL, };
	int[] YMM0_SubRegsSet = { };
	int[] RBP_SubRegsSet = { EBP, BP, BPL, };
	int[] YMM6_SubRegsSet = { };
	int[] ECX_SubRegsSet = { CX, CH, CL, };
	int[] R14B_SubRegsSet = { };
	int[] DIL_SubRegsSet = { };
	int[] FP2_SubRegsSet = { };
	int[] BPL_SubRegsSet = { };
	int[] FP3_SubRegsSet = { };
	int[] R15_SubRegsSet = { R15D, R15W, R15B, };
	int[] ST7_SubRegsSet = { };
	int[] RIP_SubRegsSet = { EIP, IP, };
	int[] RBX_SubRegsSet = { EBX, BX, BH, BL, };
	int[] MM6_SubRegsSet = { };
	int[] YMM13_SubRegsSet = { };
	int[] R8_SubRegsSet = { R8D, R8W, R8B, };
	int[] MM1_SubRegsSet = { };
	int[] MM0_SubRegsSet = { };
	int[] EFLAGS_SubRegsSet = { };
	int[] FP1_SubRegsSet = { };
	int[] R9W_SubRegsSet = { R9B, };
	int[] RAX_SubRegsSet = { EAX, AX, AH, AL, };
	int[] ST6_SubRegsSet = { };
	int[] R11W_SubRegsSet = { R11B, };
	int[] MM3_SubRegsSet = { };
	int[] YMM10_SubRegsSet = { };
	int[] EAX_SubRegsSet = { AX, AH, AL, };
	int[] R11D_SubRegsSet = { R11W, R11B, };
	int[] FP6_SubRegsSet = { };
	int[] R12D_SubRegsSet = { R12W, R12B, };
	int[] R13D_SubRegsSet = { R13W, R13B, };
	int[] R12B_SubRegsSet = { };
	int[] R13_SubRegsSet = { R13D, R13W, R13B, };
	int[] SIL_SubRegsSet = { };
	int[] DS_SubRegsSet = { };
	int[] R9D_SubRegsSet = { R9W, R9B, };
	int[] YMM15_SubRegsSet = { };
	int[] R9B_SubRegsSet = { };
	int[] R10W_SubRegsSet = { R10B, };
	int[] YMM2_SubRegsSet = { };
	int[] IP_SubRegsSet = { };
	int[] EBX_SubRegsSet = { BX, BH, BL, };
	int[] RDX_SubRegsSet = { EDX, DX, DH, DL, };
	int[] EIP_SubRegsSet = { IP, };
	int[] XMM6_SubRegsSet = { };
	int[] XMM5_SubRegsSet = { };
	int[] EBP_SubRegsSet = { BP, BPL, };
	int[] YMM7_SubRegsSet = { };
	int[] ST1_SubRegsSet = { };
	int[] XMM14_SubRegsSet = { };
	int[] DH_SubRegsSet = { };
	int[] R13W_SubRegsSet = { R13B, };
	int[] CH_SubRegsSet = { };
	int[] FP5_SubRegsSet = { };
	int[] R9_SubRegsSet = { R9D, R9W, R9B, };
	int[] RDI_SubRegsSet = { EDI, DI, DIL, };
	int[] BH_SubRegsSet = { };
	int[] YMM4_SubRegsSet = { };


	// Register Super-registers Sets...
  int Empty_SuperRegsSet[] = { 0 };
	int[] ST2_SuperRegsSet = { };
	int[] R8W_SuperRegsSet = { R8, R8D, };
	int[] BX_SuperRegsSet = { RBX, EBX, };
	int[] R14_SuperRegsSet = { };
	int[] AL_SuperRegsSet = { RAX, EAX, AX, };
	int[] R10D_SuperRegsSet = { R10, };
	int[] XMM10_SuperRegsSet = { };
	int[] CX_SuperRegsSet = { RCX, ECX, };
	int[] YMM1_SuperRegsSet = { };
	int[] XMM12_SuperRegsSet = { };
	int[] ESI_SuperRegsSet = { RSI, };
	int[] R15D_SuperRegsSet = { R15, };
	int[] CS_SuperRegsSet = { };
	int[] XMM9_SuperRegsSet = { };
	int[] R12_SuperRegsSet = { };
	int[] ST0_SuperRegsSet = { };
	int[] DL_SuperRegsSet = { RDX, EDX, DX, };
	int[] YMM8_SuperRegsSet = { };
	int[] AX_SuperRegsSet = { RAX, EAX, };
	int[] R11_SuperRegsSet = { };
	int[] R11B_SuperRegsSet = { R11, R11D, R11W, };
	int[] YMM3_SuperRegsSet = { };
	int[] R15B_SuperRegsSet = { R15, R15D, R15W, };
	int[] YMM14_SuperRegsSet = { };
	int[] EDX_SuperRegsSet = { RDX, };
	int[] FP4_SuperRegsSet = { };
	int[] XMM4_SuperRegsSet = { };
	int[] SPL_SuperRegsSet = { RSP, ESP, SP, };
	int[] DX_SuperRegsSet = { RDX, EDX, };
	int[] YMM5_SuperRegsSet = { };
	int[] FS_SuperRegsSet = { };
	int[] XMM7_SuperRegsSet = { };
	int[] RCX_SuperRegsSet = { };
	int[] SP_SuperRegsSet = { RSP, ESP, };
	int[] EDI_SuperRegsSet = { RDI, };
	int[] ST3_SuperRegsSet = { };
	int[] R10_SuperRegsSet = { };
	int[] YMM11_SuperRegsSet = { };
	int[] MM7_SuperRegsSet = { };
	int[] XMM1_SuperRegsSet = { };
	int[] MM5_SuperRegsSet = { };
	int[] MM4_SuperRegsSet = { };
	int[] R15W_SuperRegsSet = { R15, R15D, };
	int[] BP_SuperRegsSet = { RBP, EBP, };
	int[] DI_SuperRegsSet = { RDI, EDI, };
	int[] AH_SuperRegsSet = { RAX, EAX, AX, };
	int[] R8D_SuperRegsSet = { R8, };
	int[] R8B_SuperRegsSet = { R8, R8D, R8W, };
	int[] R13B_SuperRegsSet = { R13, R13D, R13W, };
	int[] XMM15_SuperRegsSet = { };
	int[] YMM9_SuperRegsSet = { };
	int[] XMM3_SuperRegsSet = { };
	int[] FP0_SuperRegsSet = { };
	int[] XMM13_SuperRegsSet = { };
	int[] XMM0_SuperRegsSet = { };
	int[] MM2_SuperRegsSet = { };
	int[] CL_SuperRegsSet = { RCX, ECX, CX, };
	int[] ESP_SuperRegsSet = { RSP, };
	int[] ST5_SuperRegsSet = { };
	int[] BL_SuperRegsSet = { RBX, EBX, BX, };
	int[] R14D_SuperRegsSet = { R14, };
	int[] ES_SuperRegsSet = { };
	int[] XMM8_SuperRegsSet = { };
	int[] R12W_SuperRegsSet = { R12, R12D, };
	int[] R14W_SuperRegsSet = { R14, R14D, };
	int[] SI_SuperRegsSet = { RSI, ESI, };
	int[] GS_SuperRegsSet = { };
	int[] RSI_SuperRegsSet = { };
	int[] SS_SuperRegsSet = { };
	int[] R10B_SuperRegsSet = { R10, R10D, R10W, };
	int[] XMM2_SuperRegsSet = { };
	int[] XMM11_SuperRegsSet = { };
	int[] ST4_SuperRegsSet = { };
	int[] YMM12_SuperRegsSet = { };
	int[] RSP_SuperRegsSet = { };
	int[] YMM0_SuperRegsSet = { };
	int[] RBP_SuperRegsSet = { };
	int[] YMM6_SuperRegsSet = { };
	int[] ECX_SuperRegsSet = { RCX, };
	int[] R14B_SuperRegsSet = { R14, R14D, R14W, };
	int[] DIL_SuperRegsSet = { RDI, EDI, DI, };
	int[] FP2_SuperRegsSet = { };
	int[] BPL_SuperRegsSet = { RBP, EBP, BP, };
	int[] FP3_SuperRegsSet = { };
	int[] R15_SuperRegsSet = { };
	int[] ST7_SuperRegsSet = { };
	int[] RIP_SuperRegsSet = { };
	int[] RBX_SuperRegsSet = { };
	int[] MM6_SuperRegsSet = { };
	int[] YMM13_SuperRegsSet = { };
	int[] R8_SuperRegsSet = { };
	int[] MM1_SuperRegsSet = { };
	int[] MM0_SuperRegsSet = { };
	int[] EFLAGS_SuperRegsSet = { };
	int[] FP1_SuperRegsSet = { };
	int[] R9W_SuperRegsSet = { R9, R9D, };
	int[] RAX_SuperRegsSet = { };
	int[] R11W_SuperRegsSet = { R11, R11D, };
	int[] ST6_SuperRegsSet = { };
	int[] MM3_SuperRegsSet = { };
	int[] YMM10_SuperRegsSet = { };
	int[] EAX_SuperRegsSet = { RAX, };
	int[] R11D_SuperRegsSet = { R11, };
	int[] FP6_SuperRegsSet = { };
	int[] R12D_SuperRegsSet = { R12, };
	int[] R13D_SuperRegsSet = { R13, };
	int[] R12B_SuperRegsSet = { R12, R12D, R12W, };
	int[] R13_SuperRegsSet = { };
	int[] R9D_SuperRegsSet = { R9, };
	int[] SIL_SuperRegsSet = { RSI, ESI, SI, };
	int[] DS_SuperRegsSet = { };
	int[] YMM15_SuperRegsSet = { };
	int[] R9B_SuperRegsSet = { R9, R9D, R9W, };
	int[] R10W_SuperRegsSet = { R10, R10D, };
	int[] YMM2_SuperRegsSet = { };
	int[] IP_SuperRegsSet = { RIP, EIP, };
	int[] EBX_SuperRegsSet = { RBX, };
	int[] RDX_SuperRegsSet = { };
	int[] EIP_SuperRegsSet = { RIP, };
	int[] XMM6_SuperRegsSet = { };
	int[] XMM5_SuperRegsSet = { };
	int[] EBP_SuperRegsSet = { RBP, };
	int[] YMM7_SuperRegsSet = { };
	int[] ST1_SuperRegsSet = { };
	int[] XMM14_SuperRegsSet = { };
	int[] DH_SuperRegsSet = { RDX, EDX, DX, };
	int[] R13W_SuperRegsSet = { R13, R13D, };
	int[] CH_SuperRegsSet = { RCX, ECX, CX, };
	int[] FP5_SuperRegsSet = { };
	int[] R9_SuperRegsSet = { };
	int[] RDI_SuperRegsSet = { };
	int[] BH_SuperRegsSet = { RBX, EBX, BX, };
	int[] YMM4_SuperRegsSet = { };

	public static final TargetRegisterDesc[] registerDescriptors = {// Descriptor
		new TargetRegisterDesc("NOREG", "NOREG", null, null, null),
		new TargetRegisterDesc("sil", "SIL", SIL_AliasSet, SIL_SubRegsSet, SIL_SuperRegsSet),
		new TargetRegisterDesc("flags", "EFLAGS", EFLAGS_AliasSet, EFLAGS_SubRegsSet, EFLAGS_SuperRegsSet),
		new TargetRegisterDesc("spl", "SPL", SPL_AliasSet, SPL_SubRegsSet, SPL_SuperRegsSet),
		new TargetRegisterDesc("bpl", "BPL", BPL_AliasSet, BPL_SubRegsSet, BPL_SuperRegsSet),
		new TargetRegisterDesc("st(0)", "ST0", ST0_AliasSet, ST0_SubRegsSet, ST0_SuperRegsSet),
		new TargetRegisterDesc("st(2)", "ST2", ST2_AliasSet, ST2_SubRegsSet, ST2_SuperRegsSet),
		new TargetRegisterDesc("st(1)", "ST1", ST1_AliasSet, ST1_SubRegsSet, ST1_SuperRegsSet),
		new TargetRegisterDesc("st(4)", "ST4", ST4_AliasSet, ST4_SubRegsSet, ST4_SuperRegsSet),
		new TargetRegisterDesc("st(3)", "ST3", ST3_AliasSet, ST3_SubRegsSet, ST3_SuperRegsSet),
		new TargetRegisterDesc("st(6)", "ST6", ST6_AliasSet, ST6_SubRegsSet, ST6_SuperRegsSet),
		new TargetRegisterDesc("st(5)", "ST5", ST5_AliasSet, ST5_SubRegsSet, ST5_SuperRegsSet),
		new TargetRegisterDesc("st(7)", "ST7", ST7_AliasSet, ST7_SubRegsSet, ST7_SuperRegsSet),
		new TargetRegisterDesc("r10d", "R10D", R10D_AliasSet, R10D_SubRegsSet, R10D_SuperRegsSet),
		new TargetRegisterDesc("r10b", "R10B", R10B_AliasSet, R10B_SubRegsSet, R10B_SuperRegsSet),
		new TargetRegisterDesc("r11w", "R11W", R11W_AliasSet, R11W_SubRegsSet, R11W_SuperRegsSet),
		new TargetRegisterDesc("r12b", "R12B", R12B_AliasSet, R12B_SubRegsSet, R12B_SuperRegsSet),
		new TargetRegisterDesc("r12d", "R12D", R12D_AliasSet, R12D_SubRegsSet, R12D_SuperRegsSet),
		new TargetRegisterDesc("r10w", "R10W", R10W_AliasSet, R10W_SubRegsSet, R10W_SuperRegsSet),
		new TargetRegisterDesc("r11d", "R11D", R11D_AliasSet, R11D_SubRegsSet, R11D_SuperRegsSet),
		new TargetRegisterDesc("r11b", "R11B", R11B_AliasSet, R11B_SubRegsSet, R11B_SuperRegsSet),
		new TargetRegisterDesc("r13w", "R13W", R13W_AliasSet, R13W_SubRegsSet, R13W_SuperRegsSet),
		new TargetRegisterDesc("r14d", "R14D", R14D_AliasSet, R14D_SubRegsSet, R14D_SuperRegsSet),
		new TargetRegisterDesc("r14b", "R14B", R14B_AliasSet, R14B_SubRegsSet, R14B_SuperRegsSet),
		new TargetRegisterDesc("r12w", "R12W", R12W_AliasSet, R12W_SubRegsSet, R12W_SuperRegsSet),
		new TargetRegisterDesc("r13b", "R13B", R13B_AliasSet, R13B_SubRegsSet, R13B_SuperRegsSet),
		new TargetRegisterDesc("r13d", "R13D", R13D_AliasSet, R13D_SubRegsSet, R13D_SuperRegsSet),
		new TargetRegisterDesc("r15w", "R15W", R15W_AliasSet, R15W_SubRegsSet, R15W_SuperRegsSet),
		new TargetRegisterDesc("r14w", "R14W", R14W_AliasSet, R14W_SubRegsSet, R14W_SuperRegsSet),
		new TargetRegisterDesc("r15d", "R15D", R15D_AliasSet, R15D_SubRegsSet, R15D_SuperRegsSet),
		new TargetRegisterDesc("r15b", "R15B", R15B_AliasSet, R15B_SubRegsSet, R15B_SuperRegsSet),
		new TargetRegisterDesc("ah", "AH", AH_AliasSet, AH_SubRegsSet, AH_SuperRegsSet),
		new TargetRegisterDesc("al", "AL", AL_AliasSet, AL_SubRegsSet, AL_SuperRegsSet),
		new TargetRegisterDesc("ax", "AX", AX_AliasSet, AX_SubRegsSet, AX_SuperRegsSet),
		new TargetRegisterDesc("bh", "BH", BH_AliasSet, BH_SubRegsSet, BH_SuperRegsSet),
		new TargetRegisterDesc("bl", "BL", BL_AliasSet, BL_SubRegsSet, BL_SuperRegsSet),
		new TargetRegisterDesc("bp", "BP", BP_AliasSet, BP_SubRegsSet, BP_SuperRegsSet),
		new TargetRegisterDesc("bx", "BX", BX_AliasSet, BX_SubRegsSet, BX_SuperRegsSet),
		new TargetRegisterDesc("ch", "CH", CH_AliasSet, CH_SubRegsSet, CH_SuperRegsSet),
		new TargetRegisterDesc("dil", "DIL", DIL_AliasSet, DIL_SubRegsSet, DIL_SuperRegsSet),
		new TargetRegisterDesc("cl", "CL", CL_AliasSet, CL_SubRegsSet, CL_SuperRegsSet),
		new TargetRegisterDesc("cs", "CS", CS_AliasSet, CS_SubRegsSet, CS_SuperRegsSet),
		new TargetRegisterDesc("cx", "CX", CX_AliasSet, CX_SubRegsSet, CX_SuperRegsSet),
		new TargetRegisterDesc("dh", "DH", DH_AliasSet, DH_SubRegsSet, DH_SuperRegsSet),
		new TargetRegisterDesc("di", "DI", DI_AliasSet, DI_SubRegsSet, DI_SuperRegsSet),
		new TargetRegisterDesc("dl", "DL", DL_AliasSet, DL_SubRegsSet, DL_SuperRegsSet),
		new TargetRegisterDesc("ds", "DS", DS_AliasSet, DS_SubRegsSet, DS_SuperRegsSet),
		new TargetRegisterDesc("dx", "DX", DX_AliasSet, DX_SubRegsSet, DX_SuperRegsSet),
		new TargetRegisterDesc("es", "ES", ES_AliasSet, ES_SubRegsSet, ES_SuperRegsSet),
		new TargetRegisterDesc("fs", "FS", FS_AliasSet, FS_SubRegsSet, FS_SuperRegsSet),
		new TargetRegisterDesc("gs", "GS", GS_AliasSet, GS_SubRegsSet, GS_SuperRegsSet),
		new TargetRegisterDesc("ip", "IP", IP_AliasSet, IP_SubRegsSet, IP_SuperRegsSet),
		new TargetRegisterDesc("r8", "R8", R8_AliasSet, R8_SubRegsSet, R8_SuperRegsSet),
		new TargetRegisterDesc("r9", "R9", R9_AliasSet, R9_SubRegsSet, R9_SuperRegsSet),
		new TargetRegisterDesc("si", "SI", SI_AliasSet, SI_SubRegsSet, SI_SuperRegsSet),
		new TargetRegisterDesc("sp", "SP", SP_AliasSet, SP_SubRegsSet, SP_SuperRegsSet),
		new TargetRegisterDesc("ss", "SS", SS_AliasSet, SS_SubRegsSet, SS_SuperRegsSet),
		new TargetRegisterDesc("mm1", "MM1", MM1_AliasSet, MM1_SubRegsSet, MM1_SuperRegsSet),
		new TargetRegisterDesc("mm0", "MM0", MM0_AliasSet, MM0_SubRegsSet, MM0_SuperRegsSet),
		new TargetRegisterDesc("mm3", "MM3", MM3_AliasSet, MM3_SubRegsSet, MM3_SuperRegsSet),
		new TargetRegisterDesc("mm2", "MM2", MM2_AliasSet, MM2_SubRegsSet, MM2_SuperRegsSet),
		new TargetRegisterDesc("mm5", "MM5", MM5_AliasSet, MM5_SubRegsSet, MM5_SuperRegsSet),
		new TargetRegisterDesc("mm4", "MM4", MM4_AliasSet, MM4_SubRegsSet, MM4_SuperRegsSet),
		new TargetRegisterDesc("mm7", "MM7", MM7_AliasSet, MM7_SubRegsSet, MM7_SuperRegsSet),
		new TargetRegisterDesc("mm6", "MM6", MM6_AliasSet, MM6_SubRegsSet, MM6_SuperRegsSet),
		new TargetRegisterDesc("xmm1", "XMM1", XMM1_AliasSet, XMM1_SubRegsSet, XMM1_SuperRegsSet),
		new TargetRegisterDesc("xmm0", "XMM0", XMM0_AliasSet, XMM0_SubRegsSet, XMM0_SuperRegsSet),
		new TargetRegisterDesc("xmm3", "XMM3", XMM3_AliasSet, XMM3_SubRegsSet, XMM3_SuperRegsSet),
		new TargetRegisterDesc("xmm2", "XMM2", XMM2_AliasSet, XMM2_SubRegsSet, XMM2_SuperRegsSet),
		new TargetRegisterDesc("xmm5", "XMM5", XMM5_AliasSet, XMM5_SubRegsSet, XMM5_SuperRegsSet),
		new TargetRegisterDesc("xmm4", "XMM4", XMM4_AliasSet, XMM4_SubRegsSet, XMM4_SuperRegsSet),
		new TargetRegisterDesc("xmm7", "XMM7", XMM7_AliasSet, XMM7_SubRegsSet, XMM7_SuperRegsSet),
		new TargetRegisterDesc("xmm6", "XMM6", XMM6_AliasSet, XMM6_SubRegsSet, XMM6_SuperRegsSet),
		new TargetRegisterDesc("eax", "EAX", EAX_AliasSet, EAX_SubRegsSet, EAX_SuperRegsSet),
		new TargetRegisterDesc("ebp", "EBP", EBP_AliasSet, EBP_SubRegsSet, EBP_SuperRegsSet),
		new TargetRegisterDesc("ebx", "EBX", EBX_AliasSet, EBX_SubRegsSet, EBX_SuperRegsSet),
		new TargetRegisterDesc("xmm9", "XMM9", XMM9_AliasSet, XMM9_SubRegsSet, XMM9_SuperRegsSet),
		new TargetRegisterDesc("xmm8", "XMM8", XMM8_AliasSet, XMM8_SubRegsSet, XMM8_SuperRegsSet),
		new TargetRegisterDesc("ecx", "ECX", ECX_AliasSet, ECX_SubRegsSet, ECX_SuperRegsSet),
		new TargetRegisterDesc("edi", "EDI", EDI_AliasSet, EDI_SubRegsSet, EDI_SuperRegsSet),
		new TargetRegisterDesc("edx", "EDX", EDX_AliasSet, EDX_SubRegsSet, EDX_SuperRegsSet),
		new TargetRegisterDesc("eip", "EIP", EIP_AliasSet, EIP_SubRegsSet, EIP_SuperRegsSet),
		new TargetRegisterDesc("esi", "ESI", ESI_AliasSet, ESI_SubRegsSet, ESI_SuperRegsSet),
		new TargetRegisterDesc("esp", "ESP", ESP_AliasSet, ESP_SubRegsSet, ESP_SuperRegsSet),
		new TargetRegisterDesc("fp1", "FP1", FP1_AliasSet, FP1_SubRegsSet, FP1_SuperRegsSet),
		new TargetRegisterDesc("fp0", "FP0", FP0_AliasSet, FP0_SubRegsSet, FP0_SuperRegsSet),
		new TargetRegisterDesc("fp3", "FP3", FP3_AliasSet, FP3_SubRegsSet, FP3_SuperRegsSet),
		new TargetRegisterDesc("fp2", "FP2", FP2_AliasSet, FP2_SubRegsSet, FP2_SuperRegsSet),
		new TargetRegisterDesc("fp5", "FP5", FP5_AliasSet, FP5_SubRegsSet, FP5_SuperRegsSet),
		new TargetRegisterDesc("fp4", "FP4", FP4_AliasSet, FP4_SubRegsSet, FP4_SuperRegsSet),
		new TargetRegisterDesc("fp6", "FP6", FP6_AliasSet, FP6_SubRegsSet, FP6_SuperRegsSet),
		new TargetRegisterDesc("ymm12", "YMM12", YMM12_AliasSet, YMM12_SubRegsSet, YMM12_SuperRegsSet),
		new TargetRegisterDesc("ymm13", "YMM13", YMM13_AliasSet, YMM13_SubRegsSet, YMM13_SuperRegsSet),
		new TargetRegisterDesc("ymm10", "YMM10", YMM10_AliasSet, YMM10_SubRegsSet, YMM10_SuperRegsSet),
		new TargetRegisterDesc("ymm11", "YMM11", YMM11_AliasSet, YMM11_SubRegsSet, YMM11_SuperRegsSet),
		new TargetRegisterDesc("ymm14", "YMM14", YMM14_AliasSet, YMM14_SubRegsSet, YMM14_SuperRegsSet),
		new TargetRegisterDesc("ymm15", "YMM15", YMM15_AliasSet, YMM15_SubRegsSet, YMM15_SuperRegsSet),
		new TargetRegisterDesc("xmm15", "XMM15", XMM15_AliasSet, XMM15_SubRegsSet, XMM15_SuperRegsSet),
		new TargetRegisterDesc("xmm11", "XMM11", XMM11_AliasSet, XMM11_SubRegsSet, XMM11_SuperRegsSet),
		new TargetRegisterDesc("xmm12", "XMM12", XMM12_AliasSet, XMM12_SubRegsSet, XMM12_SuperRegsSet),
		new TargetRegisterDesc("xmm13", "XMM13", XMM13_AliasSet, XMM13_SubRegsSet, XMM13_SuperRegsSet),
		new TargetRegisterDesc("xmm14", "XMM14", XMM14_AliasSet, XMM14_SubRegsSet, XMM14_SuperRegsSet),
		new TargetRegisterDesc("xmm10", "XMM10", XMM10_AliasSet, XMM10_SubRegsSet, XMM10_SuperRegsSet),
		new TargetRegisterDesc("r10", "R10", R10_AliasSet, R10_SubRegsSet, R10_SuperRegsSet),
		new TargetRegisterDesc("r12", "R12", R12_AliasSet, R12_SubRegsSet, R12_SuperRegsSet),
		new TargetRegisterDesc("r11", "R11", R11_AliasSet, R11_SubRegsSet, R11_SuperRegsSet),
		new TargetRegisterDesc("r14", "R14", R14_AliasSet, R14_SubRegsSet, R14_SuperRegsSet),
		new TargetRegisterDesc("r13", "R13", R13_AliasSet, R13_SubRegsSet, R13_SuperRegsSet),
		new TargetRegisterDesc("r15", "R15", R15_AliasSet, R15_SubRegsSet, R15_SuperRegsSet),
		new TargetRegisterDesc("r8b", "R8B", R8B_AliasSet, R8B_SubRegsSet, R8B_SuperRegsSet),
		new TargetRegisterDesc("r8d", "R8D", R8D_AliasSet, R8D_SubRegsSet, R8D_SuperRegsSet),
		new TargetRegisterDesc("r8w", "R8W", R8W_AliasSet, R8W_SubRegsSet, R8W_SuperRegsSet),
		new TargetRegisterDesc("r9b", "R9B", R9B_AliasSet, R9B_SubRegsSet, R9B_SuperRegsSet),
		new TargetRegisterDesc("r9d", "R9D", R9D_AliasSet, R9D_SubRegsSet, R9D_SuperRegsSet),
		new TargetRegisterDesc("r9w", "R9W", R9W_AliasSet, R9W_SubRegsSet, R9W_SuperRegsSet),
		new TargetRegisterDesc("rax", "RAX", RAX_AliasSet, RAX_SubRegsSet, RAX_SuperRegsSet),
		new TargetRegisterDesc("rbp", "RBP", RBP_AliasSet, RBP_SubRegsSet, RBP_SuperRegsSet),
		new TargetRegisterDesc("rbx", "RBX", RBX_AliasSet, RBX_SubRegsSet, RBX_SuperRegsSet),
		new TargetRegisterDesc("rcx", "RCX", RCX_AliasSet, RCX_SubRegsSet, RCX_SuperRegsSet),
		new TargetRegisterDesc("rdi", "RDI", RDI_AliasSet, RDI_SubRegsSet, RDI_SuperRegsSet),
		new TargetRegisterDesc("rdx", "RDX", RDX_AliasSet, RDX_SubRegsSet, RDX_SuperRegsSet),
		new TargetRegisterDesc("rip", "RIP", RIP_AliasSet, RIP_SubRegsSet, RIP_SuperRegsSet),
		new TargetRegisterDesc("rsi", "RSI", RSI_AliasSet, RSI_SubRegsSet, RSI_SuperRegsSet),
		new TargetRegisterDesc("rsp", "RSP", RSP_AliasSet, RSP_SubRegsSet, RSP_SuperRegsSet),
		new TargetRegisterDesc("ymm9", "YMM9", YMM9_AliasSet, YMM9_SubRegsSet, YMM9_SuperRegsSet),
		new TargetRegisterDesc("ymm2", "YMM2", YMM2_AliasSet, YMM2_SubRegsSet, YMM2_SuperRegsSet),
		new TargetRegisterDesc("ymm1", "YMM1", YMM1_AliasSet, YMM1_SubRegsSet, YMM1_SuperRegsSet),
		new TargetRegisterDesc("ymm4", "YMM4", YMM4_AliasSet, YMM4_SubRegsSet, YMM4_SuperRegsSet),
		new TargetRegisterDesc("ymm3", "YMM3", YMM3_AliasSet, YMM3_SubRegsSet, YMM3_SuperRegsSet),
		new TargetRegisterDesc("ymm6", "YMM6", YMM6_AliasSet, YMM6_SubRegsSet, YMM6_SuperRegsSet),
		new TargetRegisterDesc("ymm5", "YMM5", YMM5_AliasSet, YMM5_SubRegsSet, YMM5_SuperRegsSet),
		new TargetRegisterDesc("ymm8", "YMM8", YMM8_AliasSet, YMM8_SubRegsSet, YMM8_SuperRegsSet),
		new TargetRegisterDesc("ymm7", "YMM7", YMM7_AliasSet, YMM7_SubRegsSet, YMM7_SuperRegsSet),
		new TargetRegisterDesc("ymm0", "YMM0", YMM0_AliasSet, YMM0_SubRegsSet, YMM0_SuperRegsSet),
	};

	public int getSubRegs(int regNo, int index)
	{
	switch(regNo)
		{
			default: return 0;
			case R14W:
			 switch (index) {
			default: return 0;
				case 1: return R14B;
			};
			 break;
			case R8W:
			 switch (index) {
			default: return 0;
				case 1: return R8B;
			};
			 break;
			case BX:
			 switch (index) {
			default: return 0;
				case 1: return BL;
				case 2: return BH;
			};
			 break;
			case SI:
			 switch (index) {
			default: return 0;
				case 1: return SIL;
			};
			 break;
			case RSI:
			 switch (index) {
			default: return 0;
				case 3: return SI;
				case 4: return ESI;
				case 1: return SIL;
			};
			 break;
			case R14:
			 switch (index) {
			default: return 0;
				case 3: return R14W;
				case 4: return R14D;
				case 1: return R14B;
			};
			 break;
			case R10D:
			 switch (index) {
			default: return 0;
				case 1: return R10B;
				case 3: return R10W;
			};
			 break;
			case CX:
			 switch (index) {
			default: return 0;
				case 1: return CL;
				case 2: return CH;
			};
			 break;
			case YMM1:
			 switch (index) {
			default: return 0;
				case 1: return XMM1;
			};
			 break;
			case ESI:
			 switch (index) {
			default: return 0;
				case 1: return SIL;
				case 3: return SI;
			};
			 break;
			case RSP:
			 switch (index) {
			default: return 0;
				case 3: return SP;
				case 4: return ESP;
				case 1: return SPL;
			};
			 break;
			case YMM12:
			 switch (index) {
			default: return 0;
				case 1: return XMM12;
			};
			 break;
			case YMM0:
			 switch (index) {
			default: return 0;
				case 1: return XMM0;
			};
			 break;
			case R15D:
			 switch (index) {
			default: return 0;
				case 1: return R15B;
				case 3: return R15W;
			};
			 break;
			case RBP:
			 switch (index) {
			default: return 0;
				case 3: return BP;
				case 4: return EBP;
				case 1: return BPL;
			};
			 break;
			case YMM6:
			 switch (index) {
			default: return 0;
				case 1: return XMM6;
			};
			 break;
			case ECX:
			 switch (index) {
			default: return 0;
				case 1: return CL;
				case 2: return CH;
				case 3: return CX;
			};
			 break;
			case R12:
			 switch (index) {
			default: return 0;
				case 3: return R12W;
				case 4: return R12D;
				case 1: return R12B;
			};
			 break;
			case R15:
			 switch (index) {
			default: return 0;
				case 3: return R15W;
				case 4: return R15D;
				case 1: return R15B;
			};
			 break;
			case RBX:
			 switch (index) {
			default: return 0;
				case 2: return BH;
				case 3: return BX;
				case 4: return EBX;
				case 1: return BL;
			};
			 break;
			case YMM13:
			 switch (index) {
			default: return 0;
				case 1: return XMM13;
			};
			 break;
			case R8:
			 switch (index) {
			default: return 0;
				case 3: return R8W;
				case 4: return R8D;
				case 1: return R8B;
			};
			 break;
			case YMM8:
			 switch (index) {
			default: return 0;
				case 1: return XMM8;
			};
			 break;
			case AX:
			 switch (index) {
			default: return 0;
				case 1: return AL;
				case 2: return AH;
			};
			 break;
			case R11:
			 switch (index) {
			default: return 0;
				case 3: return R11W;
				case 4: return R11D;
				case 1: return R11B;
			};
			 break;
			case R9W:
			 switch (index) {
			default: return 0;
				case 1: return R9B;
			};
			 break;
			case RAX:
			 switch (index) {
			default: return 0;
				case 2: return AH;
				case 3: return AX;
				case 4: return EAX;
				case 1: return AL;
			};
			 break;
			case YMM3:
			 switch (index) {
			default: return 0;
				case 1: return XMM3;
			};
			 break;
			case R11W:
			 switch (index) {
			default: return 0;
				case 1: return R11B;
			};
			 break;
			case YMM10:
			 switch (index) {
			default: return 0;
				case 1: return XMM10;
			};
			 break;
			case YMM14:
			 switch (index) {
			default: return 0;
				case 1: return XMM14;
			};
			 break;
			case EAX:
			 switch (index) {
			default: return 0;
				case 1: return AL;
				case 2: return AH;
				case 3: return AX;
			};
			 break;
			case EDX:
			 switch (index) {
			default: return 0;
				case 1: return DL;
				case 2: return DH;
				case 3: return DX;
			};
			 break;
			case R11D:
			 switch (index) {
			default: return 0;
				case 1: return R11B;
				case 3: return R11W;
			};
			 break;
			case DX:
			 switch (index) {
			default: return 0;
				case 1: return DL;
				case 2: return DH;
			};
			 break;
			case R12D:
			 switch (index) {
			default: return 0;
				case 1: return R12B;
				case 3: return R12W;
			};
			 break;
			case R13D:
			 switch (index) {
			default: return 0;
				case 1: return R13B;
				case 3: return R13W;
			};
			 break;
			case YMM5:
			 switch (index) {
			default: return 0;
				case 1: return XMM5;
			};
			 break;
			case R13:
			 switch (index) {
			default: return 0;
				case 3: return R13W;
				case 4: return R13D;
				case 1: return R13B;
			};
			 break;
			case R9D:
			 switch (index) {
			default: return 0;
				case 1: return R9B;
				case 3: return R9W;
			};
			 break;
			case RCX:
			 switch (index) {
			default: return 0;
				case 2: return CH;
				case 3: return CX;
				case 4: return ECX;
				case 1: return CL;
			};
			 break;
			case YMM15:
			 switch (index) {
			default: return 0;
				case 1: return XMM15;
			};
			 break;
			case SP:
			 switch (index) {
			default: return 0;
				case 1: return SPL;
			};
			 break;
			case EDI:
			 switch (index) {
			default: return 0;
				case 1: return DIL;
				case 3: return DI;
			};
			 break;
			case R10:
			 switch (index) {
			default: return 0;
				case 3: return R10W;
				case 4: return R10D;
				case 1: return R10B;
			};
			 break;
			case YMM11:
			 switch (index) {
			default: return 0;
				case 1: return XMM11;
			};
			 break;
			case R10W:
			 switch (index) {
			default: return 0;
				case 1: return R10B;
			};
			 break;
			case YMM2:
			 switch (index) {
			default: return 0;
				case 1: return XMM2;
			};
			 break;
			case EBX:
			 switch (index) {
			default: return 0;
				case 1: return BL;
				case 2: return BH;
				case 3: return BX;
			};
			 break;
			case RDX:
			 switch (index) {
			default: return 0;
				case 2: return DH;
				case 3: return DX;
				case 4: return EDX;
				case 1: return DL;
			};
			 break;
			case BP:
			 switch (index) {
			default: return 0;
				case 1: return BPL;
			};
			 break;
			case DI:
			 switch (index) {
			default: return 0;
				case 1: return DIL;
			};
			 break;
			case R15W:
			 switch (index) {
			default: return 0;
				case 1: return R15B;
			};
			 break;
			case R8D:
			 switch (index) {
			default: return 0;
				case 1: return R8B;
				case 3: return R8W;
			};
			 break;
			case EBP:
			 switch (index) {
			default: return 0;
				case 1: return BPL;
				case 3: return BP;
			};
			 break;
			case YMM7:
			 switch (index) {
			default: return 0;
				case 1: return XMM7;
			};
			 break;
			case YMM9:
			 switch (index) {
			default: return 0;
				case 1: return XMM9;
			};
			 break;
			case ESP:
			 switch (index) {
			default: return 0;
				case 1: return SPL;
				case 3: return SP;
			};
			 break;
			case R13W:
			 switch (index) {
			default: return 0;
				case 1: return R13B;
			};
			 break;
			case R9:
			 switch (index) {
			default: return 0;
				case 3: return R9W;
				case 4: return R9D;
				case 1: return R9B;
			};
			 break;
			case RDI:
			 switch (index) {
			default: return 0;
				case 3: return DI;
				case 4: return EDI;
				case 1: return DIL;
			};
			 break;
			case R14D:
			 switch (index) {
			default: return 0;
				case 1: return R14B;
				case 3: return R14W;
			};
			 break;
			case YMM4:
			 switch (index) {
			default: return 0;
				case 1: return XMM4;
			};
			 break;
			case R12W:
			 switch (index) {
			default: return 0;
				case 1: return R12B;
			};
			 break;
	};
	return 0;
}

	public X86GenRegisterInfo(int callFrameSetupOpCode, int callFrameDestroyOpCode)
	{
		super(registerDescriptors, registerClasses,
				callFrameSetupOpCode, callFrameDestroyOpCode,
				SubregHashTable, SubregHashTableSize,
				SuperregHashTable, SuperregHashTableSize, 
				AliasesHashTable, AliasesHashTableSize);

	}

}

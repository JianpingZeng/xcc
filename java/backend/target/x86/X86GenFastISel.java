package backend.target.x86; /**
 * TableGen created file.
 * <p>
 * "Fast" Instruction Selector for the X86 target
 * Automatically generated by .td file, do not edit!
 * Powered by Xlous zeng
 * </p>
 */

import backend.codegen.MVT;
import backend.codegen.selectDAG.ISD;

import static backend.target.x86.X86GenInstrNames.*;

public final class X86GenFastISel extends X86FastISel {

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_ri(ADC32ri, GR32RegisterClass, op0, imm1);
}

int fastEmit_ISD_ADDE_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_ADDE_MVT_i32_ri(retVT, op0, imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) 
	{
	case ISD.NodeType.NodeType.ADDE: 
		return fastEmit_ISD_ADDE_ri(vt, retVT, op0, imm1);
	default: 
		return 0;
	}
}

// FastEmit functions for X86ISD::FAND.
int fastEmit_X86ISD_FAND_MVT_f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((subtarget.hasSSE1())) {
		return fastEmitInst_rr(FsANDPSrr, FR32RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FAND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_X86ISD_FAND_MVT_f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FAND: return fastEmit_X86ISD_FAND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(IMUL16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_MUL_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_MUL_MVT_i16_rr(retVT, op0, op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_rr(vt, retVT, op0, op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BT.
int fastEmit_X86ISD_BT_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_rr(BT64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_X86ISD_BT_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_X86ISD_BT_MVT_i64_rr(retVT, op0, op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.BT: return fastEmit_X86ISD_BT_rr(vt, retVT, op0, op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUB.
int fastEmit_ISD_SUB_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(SUB16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_SUB_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_SUB_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.SUB: return fastEmit_ISD_SUB_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_rr(CMP64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_X86ISD_CMP_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(OR16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_OR_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(XOR64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_XOR_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(UCOMISSrr, FR32RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_X86ISD_CMP_MVT_f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ROTL.
int fastEmit_ISD_ROTL_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(ROL8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_ROTL_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ROTL_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.ROTL: return fastEmit_ISD_ROTL_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BSR.
int fastEmit_X86ISD_BSR_MVT_i16_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_r(BSR16rr, GR16RegisterClass, op0);
}

int fastEmit_X86ISD_BSR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_X86ISD_BSR_MVT_i16_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.BSR: return fastEmit_X86ISD_BSR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(OR8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_OR_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_OR_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FXOR.
int fastEmit_X86ISD_FXOR_MVT_f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(FsXORPSrr, FR32RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FXOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_X86ISD_FXOR_MVT_f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FXOR: return fastEmit_X86ISD_FXOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(ADD32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_ADD_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_ADD_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ZERO_EXTEND.
int fastEmit_ISD_ZERO_EXTEND_MVT_i8_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_r(MOVZX32rr8, GR32RegisterClass, op0);
}

int fastEmit_ISD_ZERO_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ZERO_EXTEND_MVT_i8_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.ZERO_EXTEND: return fastEmit_ISD_ZERO_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::FP_ROUND.
int fastEmit_ISD_FP_ROUND_MVT_f64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(CVTSD2SSrr, FR32RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_FP_ROUND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_ISD_FP_ROUND_MVT_f64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.FP_ROUND: return fastEmit_ISD_FP_ROUND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::Constant.
int fastEmit_ISD_Constant_MVT_i16_i(MVT retVT, long imm0) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_i(MOV16ri, GR16RegisterClass, imm0);
}

int fastEmit_ISD_Constant_i(MVT vt, MVT retVT, long imm0) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_Constant_MVT_i16_i(retVT, imm0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_i(MVT vt, MVT retVT, int opcode, long imm0) {
	switch (opcode) {
	case ISD.NodeType.Constant: return fastEmit_ISD_Constant_i(vt, retVT, imm0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SRA.
int fastEmit_ISD_SRA_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(SAR8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_SRA_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SRA_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SRA: return fastEmit_ISD_SRA_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_rr(CMP16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_X86ISD_CMP_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_ri(AND32ri, GR32RegisterClass, op0, imm1);
}

int fastEmit_ISD_AND_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_AND_MVT_i32_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SIGN_EXTEND.
int fastEmit_ISD_SIGN_EXTEND_MVT_i16_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_r(MOVSX32rr16, GR32RegisterClass, op0);
}

int fastEmit_ISD_SIGN_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_SIGN_EXTEND_MVT_i16_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SIGN_EXTEND: return fastEmit_ISD_SIGN_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ZERO_EXTEND.
int fastEmit_ISD_ZERO_EXTEND_MVT_i8_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_r(MOVZX16rr8, GR16RegisterClass, op0);
}

int fastEmit_ISD_ZERO_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ZERO_EXTEND_MVT_i8_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.ZERO_EXTEND: return fastEmit_ISD_ZERO_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::UCOMI.
int fastEmit_X86ISD_UCOMI_MVT_v2f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(Int_UCOMISDrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_UCOMI_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v2f64: return fastEmit_X86ISD_UCOMI_MVT_v2f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.UCOMI: return fastEmit_X86ISD_UCOMI_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_ri(XOR32ri, GR32RegisterClass, op0, imm1);
}

int fastEmit_ISD_XOR_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_XOR_MVT_i32_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SIGN_EXTEND.
int fastEmit_ISD_SIGN_EXTEND_MVT_i8_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(MOVSX64rr8, GR64RegisterClass, op0);
}

int fastEmit_ISD_SIGN_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SIGN_EXTEND_MVT_i8_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SIGN_EXTEND: return fastEmit_ISD_SIGN_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_ri(ADD32ri, GR32RegisterClass, op0, imm1);
}

int fastEmit_ISD_ADD_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_ADD_MVT_i32_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(XOR32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_XOR_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SIGN_EXTEND.
int fastEmit_ISD_SIGN_EXTEND_MVT_i16_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(MOVSX64rr16, GR64RegisterClass, op0);
}

int fastEmit_ISD_SIGN_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_SIGN_EXTEND_MVT_i16_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SIGN_EXTEND: return fastEmit_ISD_SIGN_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::FP_TO_SINT.
int fastEmit_ISD_FP_TO_SINT_MVT_f32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_r(CVTTSS2SIrr, GR32RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_FP_TO_SINT_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_ISD_FP_TO_SINT_MVT_f32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.FP_TO_SINT: return fastEmit_ISD_FP_TO_SINT_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUBE.
int fastEmit_ISD_SUBE_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(SBB16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_SUBE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_SUBE_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.SUBE: return fastEmit_ISD_SUBE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUBE.
int fastEmit_ISD_SUBE_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_ri(SBB32ri, GR32RegisterClass, op0, imm1);
}

int fastEmit_ISD_SUBE_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SUBE_MVT_i32_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SUBE: return fastEmit_ISD_SUBE_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(ADD16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_ADD_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_ADD_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(XOR32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_XOR_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::EH_RETURN.
int fastEmit_X86ISD_EH_RETURN_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_r(EH_RETURN, GR32RegisterClass, op0);
}

int fastEmit_X86ISD_EH_RETURN_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_X86ISD_EH_RETURN_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.EH_RETURN: return fastEmit_X86ISD_EH_RETURN_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(XOR8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_XOR_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_ri(ADC16ri, GR16RegisterClass, op0, imm1);
}

int fastEmit_ISD_ADDE_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_ADDE_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::VZEXT_MOVL.
int fastEmit_X86ISD_VZEXT_MOVL_MVT_v2i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.v2i64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(MOVZPQILo2PQIrr, VR128RegisterClass, op0);
	}
	return 0;
}

int fastEmit_X86ISD_VZEXT_MOVL_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.v2i64: return fastEmit_X86ISD_VZEXT_MOVL_MVT_v2i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.VZEXT_MOVL: return fastEmit_X86ISD_VZEXT_MOVL_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((!Subtarget->hasSSE1())){
		return fastEmitInst_rr(UCOM_FpIr32, RFP32RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_X86ISD_CMP_MVT_f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUB.
int fastEmit_ISD_SUB_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(SUB32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_SUB_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SUB_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.SUB: return fastEmit_ISD_SUB_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SIGN_EXTEND.
int fastEmit_ISD_SIGN_EXTEND_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(MOVSX64rr32, GR64RegisterClass, op0);
}

int fastEmit_ISD_SIGN_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SIGN_EXTEND_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SIGN_EXTEND: return fastEmit_ISD_SIGN_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUBE.
int fastEmit_ISD_SUBE_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(SBB8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_SUBE_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SUBE_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SUBE: return fastEmit_ISD_SUBE_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(ADC16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_ADDE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_ADDE_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(ADD8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_ADD_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ADD_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(AND64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_AND_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUB.
int fastEmit_ISD_SUB_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_ri(SUB32ri, GR32RegisterClass, op0, imm1);
}

int fastEmit_ISD_SUB_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SUB_MVT_i32_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SUB: return fastEmit_ISD_SUB_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_ri(CMP8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_X86ISD_CMP_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_X86ISD_CMP_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_ri(XOR16ri, GR16RegisterClass, op0, imm1);
}

int fastEmit_ISD_XOR_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_XOR_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FAND.
int fastEmit_X86ISD_FAND_MVT_f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(FsANDPDrr, FR64RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FAND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_X86ISD_FAND_MVT_f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FAND: return fastEmit_X86ISD_FAND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(IMUL64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_MUL_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_MUL_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::BSWAP.
int fastEmit_ISD_BSWAP_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_r(BSWAP32r, GR32RegisterClass, op0);
}

int fastEmit_ISD_BSWAP_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_BSWAP_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.BSWAP: return fastEmit_ISD_BSWAP_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(ADC16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_ADDE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_ADDE_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(ADC64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_ADDE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_ADDE_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUBE.
int fastEmit_ISD_SUBE_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(SBB32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_SUBE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SUBE_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.SUBE: return fastEmit_ISD_SUBE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::BIT_CONVERT.
int fastEmit_ISD_BIT_CONVERT_MVT_f64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(MOVSDto64rr, GR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_BIT_CONVERT_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_ISD_BIT_CONVERT_MVT_f64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.BIT_CONVERT: return fastEmit_ISD_BIT_CONVERT_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::EH_RETURN.
int fastEmit_X86ISD_EH_RETURN_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_r(EH_RETURN64, GR64RegisterClass, op0);
}

int fastEmit_X86ISD_EH_RETURN_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_X86ISD_EH_RETURN_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.EH_RETURN: return fastEmit_X86ISD_EH_RETURN_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SCALAR_TO_VECTOR.
int fastEmit_ISD_SCALAR_TO_VECTOR_MVT_f64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.v2f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(MOVSD2PDrr, VR128RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SCALAR_TO_VECTOR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_ISD_SCALAR_TO_VECTOR_MVT_f64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SCALAR_TO_VECTOR: return fastEmit_ISD_SCALAR_TO_VECTOR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(AND8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_AND_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_AND_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::BSWAP.
int fastEmit_ISD_BSWAP_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(BSWAP64r, GR64RegisterClass, op0);
}

int fastEmit_ISD_BSWAP_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_BSWAP_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.BSWAP: return fastEmit_ISD_BSWAP_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(ADD64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_ADD_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_ADD_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FAND.
int fastEmit_X86ISD_FAND_MVT_f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(FsANDPSrr, FR32RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FAND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_X86ISD_FAND_MVT_f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FAND: return fastEmit_X86ISD_FAND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(IMUL32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_MUL_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_MUL_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SCALAR_TO_VECTOR.
int fastEmit_ISD_SCALAR_TO_VECTOR_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.v2i64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(MOV64toPQIrr, VR128RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SCALAR_TO_VECTOR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_SCALAR_TO_VECTOR_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SCALAR_TO_VECTOR: return fastEmit_ISD_SCALAR_TO_VECTOR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_ri(CMP16ri, GR16RegisterClass, op0, imm1);
}

int fastEmit_X86ISD_CMP_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_X86ISD_CMP_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	tii.copyRegToReg(mbb, mbb.size(), AL,  op0, tm.getRegisterInfo().getPhysicalRegisterRegClass(AL), mri.getRegClass(op0));
	return fastEmitInst_r(MUL8r, GR8RegisterClass, op1);
}

int fastEmit_ISD_MUL_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_MUL_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(ADD8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_ADD_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ADD_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BSF.
int fastEmit_X86ISD_BSF_MVT_i16_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_r(BSF16rr, GR16RegisterClass, op0);
}

int fastEmit_X86ISD_BSF_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_X86ISD_BSF_MVT_i16_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.BSF: return fastEmit_X86ISD_BSF_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::Constant.
int fastEmit_ISD_Constant_MVT_i64_i(MVT retVT, long imm0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_i(MOV64ri, GR64RegisterClass, imm0);
}

int fastEmit_ISD_Constant_i(MVT vt, MVT retVT, long imm0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_Constant_MVT_i64_i(retVT, imm0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_i(MVT vt, MVT retVT, int opcode, long imm0) {
	switch (opcode) {
	case ISD.NodeType.Constant: return fastEmit_ISD_Constant_i(vt, retVT, imm0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SINT_TO_FP.
int fastEmit_ISD_SINT_TO_FP_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(CVTSI2SD64rr, FR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SINT_TO_FP_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_SINT_TO_FP_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SINT_TO_FP: return fastEmit_ISD_SINT_TO_FP_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(OR16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_OR_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::Constant.
int fastEmit_ISD_Constant_MVT_i64_i(MVT retVT, long imm0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_i(MOV64ri64i32, GR64RegisterClass, imm0);
}

int fastEmit_ISD_Constant_i(MVT vt, MVT retVT, long imm0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_Constant_MVT_i64_i(retVT, imm0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_i(MVT vt, MVT retVT, int opcode, long imm0) {
	switch (opcode) {
	case ISD.NodeType.Constant: return fastEmit_ISD_Constant_i(vt, retVT, imm0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::PTEST.
int fastEmit_X86ISD_PTEST_MVT_v4f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((Subtarget->hasSSE41())){
		return fastEmitInst_rr(PTESTrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_PTEST_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v4f32: return fastEmit_X86ISD_PTEST_MVT_v4f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.PTEST: return fastEmit_X86ISD_PTEST_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(IMUL32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_MUL_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_MUL_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BSF.
int fastEmit_X86ISD_BSF_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(BSF64rr, GR64RegisterClass, op0);
}

int fastEmit_X86ISD_BSF_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_X86ISD_BSF_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.BSF: return fastEmit_X86ISD_BSF_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUB.
int fastEmit_ISD_SUB_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(SUB8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_SUB_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SUB_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.SUB: return fastEmit_ISD_SUB_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(XOR64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_XOR_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_v2i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.v2i64)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(XORPSrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v2i64: return fastEmit_ISD_XOR_MVT_v2i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(OR64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_OR_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(ADC8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_ADDE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ADDE_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FXOR.
int fastEmit_X86ISD_FXOR_MVT_f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(FsXORPSrr, FR32RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FXOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_X86ISD_FXOR_MVT_f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FXOR: return fastEmit_X86ISD_FXOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(OR32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_OR_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SINT_TO_FP.
int fastEmit_ISD_SINT_TO_FP_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_r(CVTSI2SS64rr, FR32RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SINT_TO_FP_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_SINT_TO_FP_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SINT_TO_FP: return fastEmit_ISD_SINT_TO_FP_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUBE.
int fastEmit_ISD_SUBE_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(SBB64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_SUBE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_SUBE_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.SUBE: return fastEmit_ISD_SUBE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ZERO_EXTEND.
int fastEmit_ISD_ZERO_EXTEND_MVT_i16_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_r(MOVZX32rr16, GR32RegisterClass, op0);
}

int fastEmit_ISD_ZERO_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_ZERO_EXTEND_MVT_i16_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.ZERO_EXTEND: return fastEmit_ISD_ZERO_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SCALAR_TO_VECTOR.
int fastEmit_ISD_SCALAR_TO_VECTOR_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.v4i32)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(MOVDI2PDIrr, VR128RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SCALAR_TO_VECTOR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SCALAR_TO_VECTOR_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SCALAR_TO_VECTOR: return fastEmit_ISD_SCALAR_TO_VECTOR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BSF.
int fastEmit_X86ISD_BSF_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_r(BSF32rr, GR32RegisterClass, op0);
}

int fastEmit_X86ISD_BSF_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_X86ISD_BSF_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.BSF: return fastEmit_X86ISD_BSF_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::FP_TO_SINT.
int fastEmit_ISD_FP_TO_SINT_MVT_f64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(CVTTSD2SIrr, GR32RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_FP_TO_SINT_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_ISD_FP_TO_SINT_MVT_f64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.FP_TO_SINT: return fastEmit_ISD_FP_TO_SINT_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(OR8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_OR_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ROTR.
int fastEmit_ISD_ROTR_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(ROR8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_ROTR_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ROTR_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.ROTR: return fastEmit_ISD_ROTR_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ZERO_EXTEND.
int fastEmit_ISD_ZERO_EXTEND_MVT_i8_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(MOVZX64rr8, GR64RegisterClass, op0);
}

int fastEmit_ISD_ZERO_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ZERO_EXTEND_MVT_i8_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.ZERO_EXTEND: return fastEmit_ISD_ZERO_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SINT_TO_FP.
int fastEmit_ISD_SINT_TO_FP_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(CVTSI2SDrr, FR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SINT_TO_FP_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SINT_TO_FP_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SINT_TO_FP: return fastEmit_ISD_SINT_TO_FP_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUBE.
int fastEmit_ISD_SUBE_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(SBB8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_SUBE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SUBE_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.SUBE: return fastEmit_ISD_SUBE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_rr(CMP8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_X86ISD_CMP_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SHL.
int fastEmit_ISD_SHL_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(SHL8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_SHL_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SHL_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SHL: return fastEmit_ISD_SHL_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_rr(CMP32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_X86ISD_CMP_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::BRIND.
int fastEmit_ISD_BRIND_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_r(JMP32r, GR32RegisterClass, op0);
}

int fastEmit_ISD_BRIND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_BRIND_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.BRIND: return fastEmit_ISD_BRIND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BSR.
int fastEmit_X86ISD_BSR_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_r(BSR32rr, GR32RegisterClass, op0);
}

int fastEmit_X86ISD_BSR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_X86ISD_BSR_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.BSR: return fastEmit_X86ISD_BSR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_ri(AND16ri, GR16RegisterClass, op0, imm1);
}

int fastEmit_ISD_AND_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_AND_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FOR.
int fastEmit_X86ISD_FOR_MVT_f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(FsORPDrr, FR64RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_X86ISD_FOR_MVT_f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FOR: return fastEmit_X86ISD_FOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SCALAR_TO_VECTOR.
int fastEmit_ISD_SCALAR_TO_VECTOR_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.v2i32)
		return 0;
	if ((Subtarget->hasMMX())){
		return fastEmitInst_r(MMX_MOVD64rr, VR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SCALAR_TO_VECTOR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SCALAR_TO_VECTOR_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SCALAR_TO_VECTOR: return fastEmit_ISD_SCALAR_TO_VECTOR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_v2i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.v2i64)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(ANDPSrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v2i64: return fastEmit_ISD_AND_MVT_v2i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(XOR8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_XOR_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_XOR_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::COMI.
int fastEmit_X86ISD_COMI_MVT_v4f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(Int_COMISSrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_COMI_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v4f32: return fastEmit_X86ISD_COMI_MVT_v4f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.COMI: return fastEmit_X86ISD_COMI_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(ADC64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_ADDE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_ADDE_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::BIT_CONVERT.
int fastEmit_ISD_BIT_CONVERT_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(MOV64toSDrr, FR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_BIT_CONVERT_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_BIT_CONVERT_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.BIT_CONVERT: return fastEmit_ISD_BIT_CONVERT_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::Constant.
int fastEmit_ISD_Constant_MVT_i32_i(MVT retVT, long imm0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_i(MOV32ri, GR32RegisterClass, imm0);
}

int fastEmit_ISD_Constant_i(MVT vt, MVT retVT, long imm0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_Constant_MVT_i32_i(retVT, imm0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_i(MVT vt, MVT retVT, int opcode, long imm0) {
	switch (opcode) {
	case ISD.NodeType.Constant: return fastEmit_ISD_Constant_i(vt, retVT, imm0);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(XOR8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_XOR_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_f80_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_rr(UCOM_FpIr80, RFP80RegisterClass, op0, op1);
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f80: return fastEmit_X86ISD_CMP_MVT_f80_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SIGN_EXTEND.
int fastEmit_ISD_SIGN_EXTEND_MVT_i8_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_r(MOVSX32rr8, GR32RegisterClass, op0);
}

int fastEmit_ISD_SIGN_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SIGN_EXTEND_MVT_i8_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SIGN_EXTEND: return fastEmit_ISD_SIGN_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FOR.
int fastEmit_X86ISD_FOR_MVT_f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(FsORPSrr, FR32RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_X86ISD_FOR_MVT_f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FOR: return fastEmit_X86ISD_FOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_v2i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.v2i64)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(ORPSrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v2i64: return fastEmit_ISD_OR_MVT_v2i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_ri(ADD16ri, GR16RegisterClass, op0, imm1);
}

int fastEmit_ISD_ADD_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_ADD_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::FP_TO_SINT.
int fastEmit_ISD_FP_TO_SINT_MVT_f64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(CVTTSD2SI64rr, GR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_FP_TO_SINT_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_ISD_FP_TO_SINT_MVT_f64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.FP_TO_SINT: return fastEmit_ISD_FP_TO_SINT_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CALL.
int fastEmit_X86ISD_CALL_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_r(CALL32r, GR32RegisterClass, op0);
}

int fastEmit_X86ISD_CALL_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_X86ISD_CALL_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.CALL: return fastEmit_X86ISD_CALL_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BT.
int fastEmit_X86ISD_BT_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_rr(BT32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_X86ISD_BT_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_X86ISD_BT_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.BT: return fastEmit_X86ISD_BT_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(ADD8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_ADD_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ADD_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_ri(IMUL16rri, GR16RegisterClass, op0, imm1);
}

int fastEmit_ISD_MUL_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_MUL_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(UCOMISDrr, FR64RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_X86ISD_CMP_MVT_f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::BIT_CONVERT.
int fastEmit_ISD_BIT_CONVERT_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(MOVDI2SSrr, FR32RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_BIT_CONVERT_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_BIT_CONVERT_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.BIT_CONVERT: return fastEmit_ISD_BIT_CONVERT_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(XOR16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_XOR_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::BIT_CONVERT.
int fastEmit_ISD_BIT_CONVERT_MVT_f32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(MOVSS2DIrr, GR32RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_BIT_CONVERT_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_ISD_BIT_CONVERT_MVT_f32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.BIT_CONVERT: return fastEmit_ISD_BIT_CONVERT_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(ADD16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_ADD_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_ADD_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(ADC32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_ADDE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_ADDE_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_v2i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.v2i64)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(ORPSrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v2i64: return fastEmit_ISD_OR_MVT_v2i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_ri(OR32ri, GR32RegisterClass, op0, imm1);
}

int fastEmit_ISD_OR_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_OR_MVT_i32_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::COMI.
int fastEmit_X86ISD_COMI_MVT_v2f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(Int_COMISDrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_COMI_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v2f64: return fastEmit_X86ISD_COMI_MVT_v2f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.COMI: return fastEmit_X86ISD_COMI_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FOR.
int fastEmit_X86ISD_FOR_MVT_f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(FsORPSrr, FR32RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_X86ISD_FOR_MVT_f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FOR: return fastEmit_X86ISD_FOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FXOR.
int fastEmit_X86ISD_FXOR_MVT_f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(FsXORPDrr, FR64RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FXOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_X86ISD_FXOR_MVT_f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FXOR: return fastEmit_X86ISD_FXOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FOR.
int fastEmit_X86ISD_FOR_MVT_f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(FsORPDrr, FR64RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_X86ISD_FOR_MVT_f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FOR: return fastEmit_X86ISD_FOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BT.
int fastEmit_X86ISD_BT_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_rr(BT16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_X86ISD_BT_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_X86ISD_BT_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.BT: return fastEmit_X86ISD_BT_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUBE.
int fastEmit_ISD_SUBE_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_ri(SBB16ri, GR16RegisterClass, op0, imm1);
}

int fastEmit_ISD_SUBE_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_SUBE_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SUBE: return fastEmit_ISD_SUBE_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FXOR.
int fastEmit_X86ISD_FXOR_MVT_f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(FsXORPDrr, FR64RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FXOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_X86ISD_FXOR_MVT_f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FXOR: return fastEmit_X86ISD_FXOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::FP_TO_SINT.
int fastEmit_ISD_FP_TO_SINT_MVT_f32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_r(CVTTSS2SI64rr, GR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_FP_TO_SINT_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_ISD_FP_TO_SINT_MVT_f32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.FP_TO_SINT: return fastEmit_ISD_FP_TO_SINT_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(AND32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_AND_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(AND64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_AND_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUB.
int fastEmit_ISD_SUB_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_ri(SUB16ri, GR16RegisterClass, op0, imm1);
}

int fastEmit_ISD_SUB_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_SUB_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SUB: return fastEmit_ISD_SUB_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CALL.
int fastEmit_X86ISD_CALL_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((!Subtarget->isTargetWin64())){
		return fastEmitInst_r(CALL64r, GR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_X86ISD_CALL_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_X86ISD_CALL_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.CALL: return fastEmit_X86ISD_CALL_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(AND16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_AND_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(AND32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_AND_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_v2i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.v2i64)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(ANDPSrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v2i64: return fastEmit_ISD_AND_MVT_v2i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(AND8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_AND_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(IMUL16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_MUL_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_MUL_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::BRIND.
int fastEmit_ISD_BRIND_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_r(JMP64r, GR64RegisterClass, op0);
}

int fastEmit_ISD_BRIND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_BRIND_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.BRIND: return fastEmit_ISD_BRIND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::BSR.
int fastEmit_X86ISD_BSR_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(BSR64rr, GR64RegisterClass, op0);
}

int fastEmit_X86ISD_BSR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_X86ISD_BSR_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.BSR: return fastEmit_X86ISD_BSR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(ADD32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_ADD_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_ADD_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SCALAR_TO_VECTOR.
int fastEmit_ISD_SCALAR_TO_VECTOR_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.v1i64)
		return 0;
	if ((Subtarget->hasMMX())){
		return fastEmitInst_r(MMX_MOVD64rrv164, VR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SCALAR_TO_VECTOR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_SCALAR_TO_VECTOR_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SCALAR_TO_VECTOR: return fastEmit_ISD_SCALAR_TO_VECTOR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ZERO_EXTEND.
int fastEmit_ISD_ZERO_EXTEND_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(MOVZX64rr32, GR64RegisterClass, op0);
}

int fastEmit_ISD_ZERO_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_ZERO_EXTEND_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.ZERO_EXTEND: return fastEmit_ISD_ZERO_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i16_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_ri(OR16ri, GR16RegisterClass, op0, imm1);
}

int fastEmit_ISD_OR_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_OR_MVT_i16_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_v2i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.v2i64)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(XORPSrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v2i64: return fastEmit_ISD_XOR_MVT_v2i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::UCOMI.
int fastEmit_X86ISD_UCOMI_MVT_v4f32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_rr(Int_UCOMISSrr, VR128RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_UCOMI_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.v4f32: return fastEmit_X86ISD_UCOMI_MVT_v4f32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.UCOMI: return fastEmit_X86ISD_UCOMI_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CALL.
int fastEmit_X86ISD_CALL_MVT_i64_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((Subtarget->isTargetWin64())){
		return fastEmitInst_r(WINCALL64r, GR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_X86ISD_CALL_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_X86ISD_CALL_MVT_i64_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case X86ISD.NodeType.CALL: return fastEmit_X86ISD_CALL_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(ADC32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_ADDE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_ADDE_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(IMUL64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_MUL_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_MUL_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	return fastEmitInst_ri(CMP32ri, GR32RegisterClass, op0, imm1);
}

int fastEmit_X86ISD_CMP_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_X86ISD_CMP_MVT_i32_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SCALAR_TO_VECTOR.
int fastEmit_ISD_SCALAR_TO_VECTOR_MVT_f32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.v4f32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_r(MOVSS2PSrr, VR128RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SCALAR_TO_VECTOR_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_ISD_SCALAR_TO_VECTOR_MVT_f32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SCALAR_TO_VECTOR: return fastEmit_ISD_SCALAR_TO_VECTOR_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADD.
int fastEmit_ISD_ADD_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(ADD64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_ADD_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_ADD_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADD: return fastEmit_ISD_ADD_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(OR8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_OR_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::Constant.
int fastEmit_ISD_Constant_MVT_i8_i(MVT retVT, long imm0) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_i(MOV8ri, GR8RegisterClass, imm0);
}

int fastEmit_ISD_Constant_i(MVT vt, MVT retVT, long imm0) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_Constant_MVT_i8_i(retVT, imm0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_i(MVT vt, MVT retVT, int opcode, long imm0) {
	switch (opcode) {
	case ISD.NodeType.Constant: return fastEmit_ISD_Constant_i(vt, retVT, imm0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUB.
int fastEmit_ISD_SUB_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(SUB64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_SUB_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_SUB_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.SUB: return fastEmit_ISD_SUB_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SUB.
int fastEmit_ISD_SUB_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(SUB8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_SUB_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SUB_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SUB: return fastEmit_ISD_SUB_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(ADC8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_ADDE_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ADDE_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SINT_TO_FP.
int fastEmit_ISD_SINT_TO_FP_MVT_i32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.f32)
		return 0;
	if ((Subtarget->hasSSE1())){
		return fastEmitInst_r(CVTSI2SSrr, FR32RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_SINT_TO_FP_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_SINT_TO_FP_MVT_i32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SINT_TO_FP: return fastEmit_ISD_SINT_TO_FP_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i8_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_rr(AND8rr, GR8RegisterClass, op0, op1);
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_AND_MVT_i8_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::XOR.
int fastEmit_ISD_XOR_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(XOR16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_XOR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_XOR_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.XOR: return fastEmit_ISD_XOR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::AND.
int fastEmit_ISD_AND_MVT_i16_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_rr(AND16rr, GR16RegisterClass, op0, op1);
}

int fastEmit_ISD_AND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_AND_MVT_i16_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.AND: return fastEmit_ISD_AND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::MUL.
int fastEmit_ISD_MUL_MVT_i32_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_ri(IMUL32rri, GR32RegisterClass, op0, imm1);
}

int fastEmit_ISD_MUL_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_MUL_MVT_i32_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.MUL: return fastEmit_ISD_MUL_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::FP_EXTEND.
int fastEmit_ISD_FP_EXTEND_MVT_f32_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_r(CVTSS2SDrr, FR64RegisterClass, op0);
	}
	return 0;
}

int fastEmit_ISD_FP_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.f32: return fastEmit_ISD_FP_EXTEND_MVT_f32_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.FP_EXTEND: return fastEmit_ISD_FP_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i32_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i32)
		return 0;
	return fastEmitInst_rr(OR32rr, GR32RegisterClass, op0, op1);
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i32: return fastEmit_ISD_OR_MVT_i32_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ADDE.
int fastEmit_ISD_ADDE_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(ADC8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_ADDE_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_ADDE_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.ADDE: return fastEmit_ISD_ADDE_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::CMP.
int fastEmit_X86ISD_CMP_MVT_f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.isVoid)
		return 0;
	if ((!Subtarget->hasSSE2())){
		return fastEmitInst_rr(UCOM_FpIr64, RFP64RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_CMP_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_X86ISD_CMP_MVT_f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.CMP: return fastEmit_X86ISD_CMP_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::OR.
int fastEmit_ISD_OR_MVT_i64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_rr(OR64rr, GR64RegisterClass, op0, op1);
}

int fastEmit_ISD_OR_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.i64: return fastEmit_ISD_OR_MVT_i64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case ISD.NodeType.OR: return fastEmit_ISD_OR_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for X86ISD::FAND.
int fastEmit_X86ISD_FAND_MVT_f64_rr(MVT retVT, int op0, int op1) {
	if(retVT.simpleVT != MVT.f64)
		return 0;
	if ((Subtarget->hasSSE2())){
		return fastEmitInst_rr(FsANDPDrr, FR64RegisterClass, op0, op1);
	}
	return 0;
}

int fastEmit_X86ISD_FAND_rr(MVT vt, MVT retVT, int op0, int op1) {
	switch (vt.simpleVT) {
	case MVT.f64: return fastEmit_X86ISD_FAND_MVT_f64_rr(retVT, op0op1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_rr(MVT vt, MVT retVT, int opcode, int op0, int op1) {
	switch (opcode) {
	case X86ISD.NodeType.FAND: return fastEmit_X86ISD_FAND_rr(vt, retVT, op0op1);
	default: return 0;
	}
}

// FastEmit functions for ISD::ZERO_EXTEND.
int fastEmit_ISD_ZERO_EXTEND_MVT_i16_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i64)
		return 0;
	return fastEmitInst_r(MOVZX64rr16, GR64RegisterClass, op0);
}

int fastEmit_ISD_ZERO_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i16: return fastEmit_ISD_ZERO_EXTEND_MVT_i16_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.ZERO_EXTEND: return fastEmit_ISD_ZERO_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

// FastEmit functions for ISD::SRL.
int fastEmit_ISD_SRL_MVT_i8_ri(MVT retVT, int op0, long imm1) {
	if(retVT.simpleVT != MVT.i8)
		return 0;
	return fastEmitInst_ri(SHR8ri, GR8RegisterClass, op0, imm1);
}

int fastEmit_ISD_SRL_ri(MVT vt, MVT retVT, int op0, long imm1) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SRL_MVT_i8_ri(retVT, op0imm1);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_ri(MVT vt, MVT retVT, int opcode, int op0, long imm1) {
	switch (opcode) {
	case ISD.NodeType.SRL: return fastEmit_ISD_SRL_ri(vt, retVT, op0imm1);
	default: return 0;
	}
}

// FastEmit functions for ISD::SIGN_EXTEND.
int fastEmit_ISD_SIGN_EXTEND_MVT_i8_r(MVT retVT, int op0) {
	if(retVT.simpleVT != MVT.i16)
		return 0;
	return fastEmitInst_r(MOVSX16rr8, GR16RegisterClass, op0);
}

int fastEmit_ISD_SIGN_EXTEND_r(MVT vt, MVT retVT, int op0) {
	switch (vt.simpleVT) {
	case MVT.i8: return fastEmit_ISD_SIGN_EXTEND_MVT_i8_r(retVT, op0);
	default: return 0;
	}
}

//Top level FastEmit function.
int fastEmit_r(MVT vt, MVT retVT, int opcode, int op0) {
	switch (opcode) {
	case ISD.NodeType.SIGN_EXTEND: return fastEmit_ISD_SIGN_EXTEND_r(vt, retVT, op0);
	default: return 0;
	}
}

}

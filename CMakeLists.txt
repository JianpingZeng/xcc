cmake_minimum_required(VERSION 2.8)

if(NOT CMAKE_java_COMPILER)
    if (Apple)
        execute_process(COMMAND /usr/libexec/java_home OUTPUT_VARIABLE CMAKE_java_COMPILER)
    endif()
endif()

project(Jlang)

set(PACKAGE_NAME "xcc")
set(XCC_MAJOR_VERSION 0)
set(XCC_MINOR_VERSION 4)
set(PACKAGE_VERSION "${XCC_MAJOR_VERSION}.${XCC_MINOR_VERSION}")
set(PACKAGE_STRING "${PACKAGE_NAME}-${PACKAGE_VERSION}")

find_package(Java REQUIRED Development)
#find_package(JNI REQUIRED)
include(UseJava)

if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR )
    message(FATAL_ERROR "In-source build method is not supported.
please remove cache file(CMakeFiles, CMakeCache.txt) generated by
CMake-system, then cd another build directory")
endif()

if (NOT Java_FOUND)
  message(FATAL_ERROR "No Java development environment found")
endif()

# Set the XCC project source and binary directory.
set(XCC_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(XCC_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}")

set(SRC_DIR "${XCC_SOURCE_DIR}/java")
set(CLASSES_DIR "${XCC_BINARY_DIR}/classes")
set(OUT_LIB_DIR "${XCC_BINARY_DIR}/lib")
set(OUT_BIN_DIR "${XCC_BINARY_DIR}/bin")
set(OUT_INCLUDE_DIR "${XCC_BINARY_DIR}/include")
set(OUT_JAVADOC_DIR "${XCC_BINARY_DIR}/docs")
set(XCC_JAR "${PACKAGE_STRING}.jar")
set(GEN_SOURCES_DIR "${XCC_BINARY_DIR}/gen_tblgen_srcs")
set(GEN_TBLGEN_SRCS "${GEN_SOURCES_DIR}/backend/target/x86")
set(GEN_OPTIONS_SRCS "${GEN_SOURCES_DIR}/xcc")

set(JFLAGS -source 1.8 -target 1.8 -encoding UTF-8 -d ${CLASSES_DIR} -cp ${CLASSES_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${OUT_BIN_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${OUT_LIB_DIR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${OUT_LIB_DIR}")
set(EXCLUDE_TARGET "${SRC_DIR}/backend/target/x86")
set(EXCLUDE_JLANG_DRIVER "${SRC_DIR}/xcc")

# Find the executable for displaying dot file.
set(XDOT "xdot")
set(DOT  "dot")
find_program(XDOT_PATH "${XDOT}")
find_program(DOT_PATH "${DOT}")

if ("${XDOT_PATH}" STREQUAL "XDOT_PATH-NOTFOUND")
    set(XDOT_PATH "")
endif()

if ("${DOT_PATH}" STREQUAL "DOT_PATH-NOTFOUND")
    set(DOT_PATH "")
endif()

if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "DEBUG")
endif()

#Set BUILD_MODE for llvm-lit tools.
set(BUILD_MODE ${CMAKE_BUILD_TYPE})

if (CMAKE_BUILD_TYPE EQUAL "DEBUG")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Og -Wall")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -O3 -Wall")
endif ()

get_filename_component(strip_javac_name "${Java_JAVAC_EXECUTABLE}" DIRECTORY)
get_filename_component(JDK_HOME "${strip_javac_name}" DIRECTORY)
if(APPLE)
    set(JDK_LIBS ${JDK_HOME}/jre/lib/server)
    set(JDK_INCLUDES ${JDK_HOME}/include ${JDK_HOME}/include/darwin)
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(JDK_LIBS ${JDK_HOME}/jre/lib/amd64/server)
    set(JDK_INCLUDES ${JDK_HOME}/include ${JDK_HOME}/include/linux)
elseif(WIN32)
    set(JDK_LIBS ${JDK_HOME}/lib ${JDK_HOME}/jre/lib)
    set(JDK_INCLUDES ${JDK_HOME}/include ${JDK_HOME}/include/win32)
endif ()

message(STATUS "JDK_HOME: ${JDK_HOME}")
message(STATUS "JDK_LIBS: ${JDK_LIBS}")
message(STATUS "JDK_INCLUDES: ${JDK_INCLUDES}")

set(XCC_TARGETS_TO_BUILD
    X86)
set(XCC_TARGET_ARCH "host"
  CACHE STRING "Set target to use for LLVM JIT or use \"host\" for automatic detection.")


# Add path for custom modules
set(CMAKE_MODULE_PATH
  ${CMAKE_MODULE_PATH}
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake")


link_directories(${JDK_LIBS})
include_directories(${JDK_INCLUDES})
include_directories(${OUT_INCLUDE_DIR})
#file(MAKE_DIRECTORY ${OUT_JAVADOC})

set(CPUInfoUtility_PATH "${OUT_LIB_DIR}")
set(CPUInfoUtility_NAME GetCpuIDAndInfo)

# Configure the XCC_NAME, XCC_MAJOR, XCC_MINOR
# Produce ${GEN_SOURCES_DIR}/config/Config.java
set(CONFIG_SRC "${GEN_SOURCES_DIR}/config/Config.java")

add_custom_target(xcc_config
    COMMAND ${JAVA_COMPILE} ${JFLAGS} ${CONFIG_SRC}
    DEPENDS ${CONFIG_SRC}
    COMMENT "Compiling XCC configuration file...")

include(addXCC)

# All options referred to from HandleXCCOptions have to be specified
# BEFORE this include, otherwise options will not be correctly set on
# first cmake run
include(config-ix)

string(REPLACE "Native" ${XCC_NATIVE_ARCH}
  XCC_TARGETS_TO_BUILD "${XCC_TARGETS_TO_BUILD}")
list(REMOVE_DUPLICATES XCC_TARGETS_TO_BUILD)

# By default, we target the host, but this can be overridden at CMake
# invocation time.
set(XCC_DEFAULT_TARGET_TRIPLE "${XCC_HOST_TRIPLE}" CACHE STRING
  "Default target for which XCC will generate code." )
set(TARGET_TRIPLE "${XCC_DEFAULT_TARGET_TRIPLE}")

# Generate configuration files.
configure_file(
  ${XCC_SOURCE_DIR}/config/Config.java.in
  ${CONFIG_SRC}
  )

configure_file(
  ${XCC_SOURCE_DIR}/config/version.h.in
  ${OUT_INCLUDE_DIR}/version.h
)

# Verify that we can find a Python 2 interpreter.  Python 3 is unsupported.
set(Python_ADDITIONAL_VERSIONS 2.7)
include(FindPythonInterp)
if( NOT PYTHONINTERP_FOUND )
  message(FATAL_ERROR
"Unable to find Python interpreter, required for builds and testing.

Please install Python or specify the PYTHON_EXECUTABLE CMake variable.")
endif()

if( ${PYTHON_VERSION_STRING} VERSION_LESS 2.7 )
  message(FATAL_ERROR "Python 2.7 or newer is required")
endif()

set(CPU_INFO_HEADER_FILE "${OUT_INCLUDE_DIR}/tools_CPUInfoUtility.h")
# Generate tools_CPUInfoUtility.h header file.
add_custom_target(GenCpuInfoHeader
    COMMAND javah -cp ${XCC_BINARY_DIR}/classes -d ${XCC_BINARY_DIR}/include tools.CPUInfoUtility
    DEPENDS xcc_config
    COMMENT "Generating header file for GetCpuIDAndInfo...")

# Add sources file to be compiled.
file(GLOB_RECURSE SRCS_NO_TARGET "${SRC_DIR}/*.java")
file(GLOB TARGET_SRCS
    ${SRC_DIR}/backend/target/x86/*.java)

# The jlang driver relatied sources
file(GLOB_RECURSE JLANG_DRIVER_SRCS ${SRC_DIR}/xcc/*.java)

# Remove target-specific or jlang driver related source files.
foreach (file ${SRCS_NO_TARGET})
    if ("${file}" MATCHES "(.*)${EXCLUDE_TARGET}(.*)")
        #message(STATUS "Remove Item from List:${file}")
        list (REMOVE_ITEM SRCS_NO_TARGET ${file})
    endif ()
    if ("${file}" MATCHES "(.*)${EXCLUDE_JLANG_DRIVER}(.*)")
        list (REMOVE_ITEM SRCS_NO_TARGET ${file})
    endif ()

endforeach()

#message(STATUS "${SRCS_NO_TARGET}")
#file(GLOB_RECURSE TROVE_SRCS "${XCC_SOURCE_DIR}/external/trove/*.java")
file(GLOB TROVE_SRCS
    external/trove/gnu/trove/*.java
    external/trove/gnu/trove/decorator/*.java
    external/trove/gnu/trove/function/*.java
    external/trove/gnu/trove/impl/*.java
    external/trove/gnu/trove/impl/hash/*.java
    external/trove/gnu/trove/impl/sync/*.java
    external/trove/gnu/trove/impl/unmodifiable/*.java
    external/trove/gnu/trove/iterator/*.java
    external/trove/gnu/trove/iterator/hash/*.java
    external/trove/gnu/trove/list/*.java
    external/trove/gnu/trove/list/array/*.java
    external/trove/gnu/trove/list/linked/*.java
    external/trove/gnu/trove/map/*.java
    external/trove/gnu/trove/map/custom_hash/*.java
    external/trove/gnu/trove/map/hash/*.java
    external/trove/gnu/trove/procedure/*.java
    external/trove/gnu/trove/procedure/array/*.java
    external/trove/gnu/trove/queue/*.java
    external/trove/gnu/trove/set/*.java
    external/trove/gnu/trove/set/hash/*.java
    external/trove/gnu/trove/stack/*.java
    external/trove/gnu/trove/stack/array/*.java
    external/trove/gnu/trove/strategy/*.java
    )

file(MAKE_DIRECTORY ${CLASSES_DIR})

# Custom target for compiling jlang/backend source files except for
# target-specific codes.
add_custom_target(classes_no_target
    COMMAND ${JAVA_COMPILE} ${JFLAGS} ${TROVE_SRCS} ${SRCS_NO_TARGET}
    DEPENDS xcc_config
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/java)

# A macro definition for generating target-specific AsmPrinter, registerInfo
# information etc.
file(MAKE_DIRECTORY ${GEN_TBLGEN_SRCS})
macro(tablegen ofn)
  set(local_tds "${CMAKE_CURRENT_SOURCE_DIR}/tds ${CMAKE_CURRENT_SOURCE_DIR}/tds/X86")
  add_custom_command(OUTPUT ${GEN_TBLGEN_SRCS}/${ofn}
    COMMAND java -cp ${CLASSES_DIR} utils.tablegen.TableGen ${ARGN} -I ${local_tds}
    ${CMAKE_CURRENT_SOURCE_DIR}/tds/X86/X86.td -o ${GEN_TBLGEN_SRCS}/${ofn}
    DEPENDS classes_no_target
    COMMENT "Building ${ofn}...")
    set(TABLEGEN_OUTPUT ${TABLEGEN_OUTPUT} ${GEN_TBLGEN_SRCS}/${ofn})
endmacro(tablegen)

tablegen(X86GenATTAsmPrinter.java -gen-asm-printer)
tablegen(X86GenRegisterInfo.java -gen-register-info)
tablegen(X86GenRegisterNames.java -gen-register-names)
tablegen(X86GenInstrInfo.java -gen-instr-info)
tablegen(X86GenInstrNames.java -gen-instr-names)
tablegen(X86GenSubtarget.java -gen-subtarget)
tablegen(X86GenCallingConv.java -gen-callingconv)
TableGen(X86GenDAGToDAGISel.java -gen-dag-isel)

# Generates jlang options for jlang driver.
file(MAKE_DIRECTORY ${GEN_OPTIONS_SRCS})
macro(JlangTableGen ofn)
  set(local_tds "${XCC_SOURCE_DIR}/java/xcc")
  add_custom_command(OUTPUT ${GEN_OPTIONS_SRCS}/${ofn}
  COMMAND java -cp ${CLASSES_DIR} utils.tablegen.TableGen
  -o ${GEN_OPTIONS_SRCS}/${ofn} ${ARGN} -I ${local_tds} ${local_tds}/Options.td
  DEPENDS classes_no_target
  COMMENT "Building ${ofn}...")
  set(TABLEGEN_OUTPUT ${TABLEGEN_OUTPUT}
  ${GEN_OPTIONS_SRCS}/${ofn}
  )
endmacro(JlangTableGen)

JlangTableGen(OptionInfo.java -gen-jlang-options)

# Compiling collection of generated java source code by TableGen tool.
macro(add_gen_tblgen target_name)
    if (TABLEGEN_OUTPUT)
        add_custom_target(${target_name}
            COMMAND ${JAVA_COMPILE} -cp ${CLASSES_DIR} ${JFLAGS}
            ${TABLEGEN_OUTPUT} ${TARGET_SRCS} ${JLANG_DRIVER_SRCS}
            ${GEN_OPTIONS_SRCS}/OptionID.java
            ${GEN_OPTIONS_SRCS}/OptionKind.java
            ${GEN_OPTIONS_SRCS}/Group.java
            ${GEN_OPTIONS_SRCS}/GroupID.java
        DEPENDS ${TABLEGEN_OUTPUT}
        COMMENT "Compiling taraget-specific source files")
    else()
        message(FATAL "Generates target-specific code failed according to td file")
    endif(TABLEGEN_OUTPUT)
endmacro(add_gen_tblgen)

#message(STATUS "TABLEGEN_OUTPUT: ${TABLEGEN_OUTPUT}")
add_gen_tblgen(CompileTableGen)

# A macro for creating jar package from class files.
macro (add_gen_jar)
    if (NOT EXISTS ${OUT_LIB_DIR})
        file(MAKE_DIRECTORY ${OUT_LIB_DIR})
    endif()
    add_custom_target(jar ALL
        COMMAND ${JAVA_ARCHIVE} -cf "${OUT_LIB_DIR}/${XCC_JAR}" -C ${CLASSES_DIR} .
        DEPENDS CompileTableGen
        WORKING_DIRECTORY ${CLASSES_DIR}
        COMMENT "Building jar")
endmacro(add_gen_jar)

# Generating jar and resides it into out/lib directory.
add_gen_jar()

set(COM_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/cpp/NativeLauncher.cpp)
set(JLANG_SRCS ${COM_SRCS} ${XCC_SOURCE_DIR}/cpp/Jlang.cpp)
set(JLANG_CC_SRCS ${COM_SRCS} ${XCC_SOURCE_DIR}/cpp/JlangCC.cpp)
set(TABLEGEN_SRCS ${COM_SRCS} ${XCC_SOURCE_DIR}/cpp/TableGen.cpp)
set(OPT_SRCS ${COM_SRCS} ${XCC_SOURCE_DIR}/cpp/Opt.cpp)
set(LLC_SRCS ${COM_SRCS} ${XCC_SOURCE_DIR}/cpp/llc.cpp)

macro(add_jlang_target name)
    add_executable(${name} ${ARGN})
    add_dependencies(${name} jar)
endmacro()

add_jlang_target(jlang ${JLANG_SRCS})
add_jlang_target(jlang-cc ${JLANG_CC_SRCS})
add_jlang_target(tblgen ${TABLEGEN_SRCS})
add_jlang_target(opt ${OPT_SRCS})
add_jlang_target(llc ${LLC_SRCS})

set(CPU_ID_SRCS "${XCC_SOURCE_DIR}/cpp/GetCpuIDAndInfo.cpp")
add_library(${CPUInfoUtility_NAME} SHARED ${CPU_ID_SRCS})
add_dependencies(${CPUInfoUtility_NAME} jar)
add_dependencies(${CPUInfoUtility_NAME} GenCpuInfoHeader)

target_link_libraries(jlang jvm)
target_link_libraries(jlang-cc jvm)
target_link_libraries(tblgen jvm)
target_link_libraries(opt jvm)
target_link_libraries(llc jvm)

add_executable(count ${XCC_SOURCE_DIR}/cpp/count.c)
add_executable(FileCheck  ${COM_SRCS} ${XCC_SOURCE_DIR}/cpp/FileCheck.cpp)
target_link_libraries(FileCheck jvm)
add_executable(not ${XCC_SOURCE_DIR}/cpp/not.cpp)

add_subdirectory(java/test)
add_subdirectory(java/utils/xcc-lit)

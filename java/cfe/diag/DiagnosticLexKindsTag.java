package cfe.diag;

public interface DiagnosticLexKindsTag {
  public static final int backslash_newline_space = Diagnostic.DiagnosticLexKindsBegin;
  public static final int charize_microsoft_ext = backslash_newline_space + 1;
  public static final int err__Pragma_malformed = charize_microsoft_ext + 1;
  public static final int err_defined_macro_name = err__Pragma_malformed + 1;
  public static final int err_empty_character = err_defined_macro_name + 1;
  public static final int err_exponent_has_no_digits = err_empty_character + 1;
  public static final int err_feature_check_malformed = err_exponent_has_no_digits + 1;
  public static final int err_hex_escape_no_digits = err_feature_check_malformed + 1;
  public static final int err_hexconstant_requires_exponent = err_hex_escape_no_digits + 1;
  public static final int err_invalid_binary_digit = err_hexconstant_requires_exponent + 1;
  public static final int err_invalid_character_to_charify = err_invalid_binary_digit + 1;
  public static final int err_invalid_decimal_digit = err_invalid_character_to_charify + 1;
  public static final int err_invalid_octal_digit = err_invalid_decimal_digit + 1;
  public static final int err_invalid_suffix_float_constant = err_invalid_octal_digit + 1;
  public static final int err_invalid_suffix_integer_constant = err_invalid_suffix_float_constant + 1;
  public static final int err_lexer_error = err_invalid_suffix_integer_constant + 1;
  public static final int err_pascal_string_too_long = err_lexer_error + 1;
  public static final int err_paste_at_end = err_pascal_string_too_long + 1;
  public static final int err_paste_at_start = err_paste_at_end + 1;
  public static final int err_pp_bad_paste = err_paste_at_start + 1;
  public static final int err_pp_colon_without_question = err_pp_bad_paste + 1;
  public static final int err_pp_defined_requires_identifier = err_pp_colon_without_question + 1;
  public static final int err_pp_division_by_zero = err_pp_defined_requires_identifier + 1;
  public static final int err_pp_duplicate_name_in_arg_list = err_pp_division_by_zero + 1;
  public static final int err_pp_empty_filename = err_pp_duplicate_name_in_arg_list + 1;
  public static final int err_pp_endif_without_if = err_pp_empty_filename + 1;
  public static final int err_pp_expected_comma_in_arg_list = err_pp_endif_without_if + 1;
  public static final int err_pp_expected_eol = err_pp_expected_comma_in_arg_list + 1;
  public static final int err_pp_expected_ident_in_arg_list = err_pp_expected_eol + 1;
  public static final int err_pp_expected_rparen = err_pp_expected_ident_in_arg_list + 1;
  public static final int err_pp_expected_value_in_expr = err_pp_expected_rparen + 1;
  public static final int err_pp_expects_filename = err_pp_expected_value_in_expr + 1;
  public static final int err_pp_expr_bad_token_binop = err_pp_expects_filename + 1;
  public static final int err_pp_expr_bad_token_start_expr = err_pp_expr_bad_token_binop + 1;
  public static final int err_pp_file_not_found = err_pp_expr_bad_token_start_expr + 1;
  public static final int err_pp_hash_error = err_pp_file_not_found + 1;
  public static final int err_pp_illegal_floating_literal = err_pp_hash_error + 1;
  public static final int err_pp_include_too_deep = err_pp_illegal_floating_literal + 1;
  public static final int err_pp_invalid_directive = err_pp_include_too_deep + 1;
  public static final int err_pp_invalid_poison = err_pp_invalid_directive + 1;
  public static final int err_pp_invalid_tok_in_arg_list = err_pp_invalid_poison + 1;
  public static final int err_pp_line_digit_sequence = err_pp_invalid_tok_in_arg_list + 1;
  public static final int err_pp_line_invalid_filename = err_pp_line_digit_sequence + 1;
  public static final int err_pp_line_requires_integer = err_pp_line_invalid_filename + 1;
  public static final int err_pp_linemarker_invalid_filename = err_pp_line_requires_integer + 1;
  public static final int err_pp_linemarker_invalid_flag = err_pp_linemarker_invalid_filename + 1;
  public static final int err_pp_linemarker_invalid_pop = err_pp_linemarker_invalid_flag + 1;
  public static final int err_pp_linemarker_requires_integer = err_pp_linemarker_invalid_pop + 1;
  public static final int err_pp_macro_not_identifier = err_pp_linemarker_requires_integer + 1;
  public static final int err_pp_malformed_ident = err_pp_macro_not_identifier + 1;
  public static final int err_pp_missing_macro_name = err_pp_malformed_ident + 1;
  public static final int err_pp_missing_rparen = err_pp_missing_macro_name + 1;
  public static final int err_pp_missing_rparen_in_macro_def = err_pp_missing_rparen + 1;
  public static final int err_pp_missing_val_before_operator = err_pp_missing_rparen_in_macro_def + 1;
  public static final int err_pp_operator_used_as_macro_name = err_pp_missing_val_before_operator + 1;
  public static final int err_pp_remainder_by_zero = err_pp_operator_used_as_macro_name + 1;
  public static final int err_pp_stringize_not_parameter = err_pp_remainder_by_zero + 1;
  public static final int err_pp_unterminated_conditional = err_pp_stringize_not_parameter + 1;
  public static final int err_pp_used_poisoned_id = err_pp_unterminated_conditional + 1;
  public static final int err_pragma_comment_malformed = err_pp_used_poisoned_id + 1;
  public static final int err_pragma_comment_unknown_kind = err_pragma_comment_malformed + 1;
  public static final int err_too_few_args_in_macro_invoc = err_pragma_comment_unknown_kind + 1;
  public static final int err_too_many_args_in_macro_invoc = err_too_few_args_in_macro_invoc + 1;
  public static final int err_ucn_escape_incomplete = err_too_many_args_in_macro_invoc + 1;
  public static final int err_ucn_escape_invalid = err_ucn_escape_incomplete + 1;
  public static final int err_ucn_escape_no_digits = err_ucn_escape_invalid + 1;
  public static final int err_ucn_escape_too_big = err_ucn_escape_no_digits + 1;
  public static final int err_unterm_macro_invoc = err_ucn_escape_too_big + 1;
  public static final int err_unterminated_block_comment = err_unterm_macro_invoc + 1;
  public static final int err_unterminated_char = err_unterminated_block_comment + 1;
  public static final int err_unterminated_string = err_unterminated_char + 1;
  public static final int escaped_newline_block_comment_end = err_unterminated_string + 1;
  public static final int ext_backslash_newline_eof = escaped_newline_block_comment_end + 1;
  public static final int ext_bcpl_comment = ext_backslash_newline_eof + 1;
  public static final int ext_binary_literal = ext_bcpl_comment + 1;
  public static final int ext_c99_whitespace_required_after_macro_name = ext_binary_literal + 1;
  public static final int ext_dollar_in_identifier = ext_c99_whitespace_required_after_macro_name + 1;
  public static final int ext_embedded_directive = ext_dollar_in_identifier + 1;
  public static final int ext_empty_fnmacro_arg = ext_embedded_directive + 1;
  public static final int ext_four_char_character_literal = ext_empty_fnmacro_arg + 1;
  public static final int ext_hexconstant_invalid = ext_four_char_character_literal + 1;
  public static final int ext_imaginary_constant = ext_hexconstant_invalid + 1;
  public static final int ext_missing_varargs_arg = ext_imaginary_constant + 1;
  public static final int ext_missing_whitespace_after_macro_name = ext_missing_varargs_arg + 1;
  public static final int ext_multi_line_bcpl_comment = ext_missing_whitespace_after_macro_name + 1;
  public static final int ext_multichar_character_literal = ext_multi_line_bcpl_comment + 1;
  public static final int ext_named_variadic_macro = ext_multichar_character_literal + 1;
  public static final int ext_no_newline_eof = ext_named_variadic_macro + 1;
  public static final int ext_nonstandard_escape = ext_no_newline_eof + 1;
  public static final int ext_paste_comma = ext_nonstandard_escape + 1;
  public static final int ext_pp_bad_vaargs_use = ext_paste_comma + 1;
  public static final int ext_pp_base_file = ext_pp_bad_vaargs_use + 1;
  public static final int ext_pp_comma_expr = ext_pp_base_file + 1;
  public static final int ext_pp_counter = ext_pp_comma_expr + 1;
  public static final int ext_pp_extra_tokens_at_eol = ext_pp_counter + 1;
  public static final int ext_pp_ident_directive = ext_pp_extra_tokens_at_eol + 1;
  public static final int ext_pp_import_directive = ext_pp_ident_directive + 1;
  public static final int ext_pp_include_level = ext_pp_import_directive + 1;
  public static final int ext_pp_include_next_directive = ext_pp_include_level + 1;
  public static final int ext_pp_line_too_big = ext_pp_include_next_directive + 1;
  public static final int ext_pp_macro_redef = ext_pp_line_too_big + 1;
  public static final int ext_pp_timestamp = ext_pp_macro_redef + 1;
  public static final int ext_pp_warning_directive = ext_pp_timestamp + 1;
  public static final int ext_stdc_pragma_ignored = ext_pp_warning_directive + 1;
  public static final int ext_stdc_pragma_syntax = ext_stdc_pragma_ignored + 1;
  public static final int ext_stdc_pragma_syntax_eom = ext_stdc_pragma_syntax + 1;
  public static final int ext_token_used = ext_stdc_pragma_syntax_eom + 1;
  public static final int ext_unknown_escape = ext_token_used + 1;
  public static final int ext_variadic_macro = ext_unknown_escape + 1;
  public static final int null_in_char = ext_variadic_macro + 1;
  public static final int null_in_file = null_in_char + 1;
  public static final int null_in_string = null_in_file + 1;
  public static final int pp_err_elif_after_else = null_in_string + 1;
  public static final int pp_err_elif_without_if = pp_err_elif_after_else + 1;
  public static final int pp_err_else_after_else = pp_err_elif_without_if + 1;
  public static final int pp_err_else_without_if = pp_err_else_after_else + 1;
  public static final int pp_hash_warning = pp_err_else_without_if + 1;
  public static final int pp_include_macros_out_of_predefines = pp_hash_warning + 1;
  public static final int pp_include_next_absolute_path = pp_include_macros_out_of_predefines + 1;
  public static final int pp_include_next_in_primary = pp_include_next_absolute_path + 1;
  public static final int pp_invalid_string_literal = pp_include_next_in_primary + 1;
  public static final int pp_macro_not_used = pp_invalid_string_literal + 1;
  public static final int pp_out_of_date_dependency = pp_macro_not_used + 1;
  public static final int pp_poisoning_existing_macro = pp_out_of_date_dependency + 1;
  public static final int pp_pragma_once_in_main_file = pp_poisoning_existing_macro + 1;
  public static final int pp_pragma_sysheader_in_main_file = pp_pragma_once_in_main_file + 1;
  public static final int pp_redef_builtin_macro = pp_pragma_sysheader_in_main_file + 1;
  public static final int pp_undef_builtin_macro = pp_redef_builtin_macro + 1;
  public static final int trigraph_converted = pp_undef_builtin_macro + 1;
  public static final int trigraph_ends_block_comment = trigraph_converted + 1;
  public static final int trigraph_ignored = trigraph_ends_block_comment + 1;
  public static final int trigraph_ignored_block_comment = trigraph_ignored + 1;
  public static final int warn_char_constant_too_large = trigraph_ignored_block_comment + 1;
  public static final int warn_extraneous_wide_char_constant = warn_char_constant_too_large + 1;
  public static final int warn_hex_escape_too_large = warn_extraneous_wide_char_constant + 1;
  public static final int warn_missing_whitespace_after_macro_name = warn_hex_escape_too_large + 1;
  public static final int warn_nested_block_comment = warn_missing_whitespace_after_macro_name + 1;
  public static final int warn_octal_escape_too_large = warn_nested_block_comment + 1;
  public static final int warn_pp_convert_lhs_to_positive = warn_octal_escape_too_large + 1;
  public static final int warn_pp_convert_rhs_to_positive = warn_pp_convert_lhs_to_positive + 1;
  public static final int warn_pp_expr_overflow = warn_pp_convert_rhs_to_positive + 1;
  public static final int warn_pp_line_decimal = warn_pp_expr_overflow + 1;
  public static final int warn_pp_undef_identifier = warn_pp_line_decimal + 1;
  public static final int warn_pragma_diagnostic_clang_cannot_ppp = warn_pp_undef_identifier + 1;
  public static final int warn_pragma_diagnostic_clang_invalid = warn_pragma_diagnostic_clang_cannot_ppp + 1;
  public static final int warn_pragma_diagnostic_gcc_invalid = warn_pragma_diagnostic_clang_invalid + 1;
  public static final int warn_pragma_diagnostic_invalid_option = warn_pragma_diagnostic_gcc_invalid + 1;
  public static final int warn_pragma_diagnostic_invalid_token = warn_pragma_diagnostic_invalid_option + 1;
  public static final int warn_pragma_diagnostic_unknown_warning = warn_pragma_diagnostic_invalid_token + 1;
  public static final int warn_pragma_ignored = warn_pragma_diagnostic_unknown_warning + 1;
  public static final int warn_stdc_fenv_access_not_supported = warn_pragma_ignored + 1;

}
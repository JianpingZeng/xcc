/* TGParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TGParserTokenManager.java */
package tools.tablegen;
import tools.tablegen.Init;
import tools.tablegen.Record;
import tools.tablegen.RecordKeeper;
import tools.tablegen.RecordVal;
import tools.tablegen.Init.*;
import tools.tablegen.RecTy.*;
import java.util.Stack;
import tools.tablegen.TGParser.LetRecord;
import tools.tablegen.TGParser.SubClassReference;
import gnu.trove.list.array.TIntArrayList;
import tools.Pair;
import static tools.tablegen.Record.records;

/** Token Manager. */
@SuppressWarnings("unused")public class TGParserTokenManager implements TGParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8040L) != 0L)
         {
            jjmatchedKind = 20;
            return 26;
         }
         if ((active0 & 0x30000000L) != 0L)
            return 3;
         if ((active0 & 0x7fb0L) != 0L)
         {
            jjmatchedKind = 20;
            return 46;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 29;
         return -1;
      case 1:
         if ((active0 & 0x8040L) != 0L)
            return 25;
         if ((active0 & 0x7fb0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 1;
            }
            return 46;
         }
         return -1;
      case 2:
         if ((active0 & 0x5470L) != 0L)
            return 46;
         if ((active0 & 0x2b80L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return 46;
         }
         return -1;
      case 3:
         if ((active0 & 0x320L) != 0L)
            return 46;
         if ((active0 & 0x2880L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 46;
         }
         return -1;
      case 4:
         if ((active0 & 0x2800L) != 0L)
            return 46;
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
            return 46;
         }
         return -1;
      case 5:
         if ((active0 & 0x80L) != 0L)
            return 46;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0xf0000L);
      case 35:
         return jjStopAtPos(0, 42);
      case 40:
         return jjStopAtPos(0, 34);
      case 41:
         return jjStopAtPos(0, 35);
      case 43:
         return jjStartNfaWithStates_0(0, 28, 3);
      case 44:
         return jjStopAtPos(0, 39);
      case 45:
         return jjStartNfaWithStates_0(0, 29, 3);
      case 46:
         return jjStopAtPos(0, 38);
      case 58:
         return jjStopAtPos(0, 36);
      case 59:
         return jjStopAtPos(0, 37);
      case 60:
         return jjStopAtPos(0, 43);
      case 61:
         return jjStopAtPos(0, 40);
      case 62:
         return jjStopAtPos(0, 44);
      case 63:
         return jjStopAtPos(0, 41);
      case 91:
         return jjStartNfaWithStates_0(0, 30, 29);
      case 93:
         return jjStopAtPos(0, 31);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x30L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xa00L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1400L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8040L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4100L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 123:
         return jjStopAtPos(0, 32);
      case 125:
         return jjStopAtPos(0, 33);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2130L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xf0000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 46);
         break;
      case 103:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 46);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x30080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 116:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 46);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x80020L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         break;
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 46);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(3, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 46);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 46);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(9, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 47;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(46); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if ((0x100001600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     { jjCheckNAdd(0); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 47)
                     { jjAddStates(0, 1); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(15, 16); }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(46); }
                  break;
               case 0:
                  if ((0x100001600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 15:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 34 && kind > 25)
                     kind = 25;
                  break;
               case 18:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(2, 3); }
                  break;
               case 19:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 20:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar == 34 && kind > 26)
                     kind = 26;
                  break;
               case 30:
                  { jjAddStates(4, 5); }
                  break;
               case 33:
                  if (curChar == 47)
                     { jjAddStates(0, 1); }
                  break;
               case 34:
                  if (curChar == 47)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 35:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 36:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 37:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 38:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if (curChar == 42)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 42:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 43:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 44:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(46); }
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     { jjCheckNAdd(46); }
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 114)
                  {
                     if (kind > 1)
                        kind = 1;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(46); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 0:
                  if (curChar != 114)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAdd(0); }
                  break;
               case 6:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(7); }
                  break;
               case 8:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(13); }
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               case 17:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  { jjAddStates(14, 15); }
                  break;
               case 22:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 23:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 27:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if (curChar == 123)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 30:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 31:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(30, 32); }
                  break;
               case 32:
                  if (curChar == 93 && kind > 27)
                     kind = 27;
                  break;
               case 35:
                  { jjAddStates(6, 8); }
                  break;
               case 40:
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 42:
               case 43:
                  { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(46); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(14, 15); }
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(4, 5); }
                  break;
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(6, 8); }
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 42:
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 47 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   34, 39, 18, 19, 30, 31, 35, 36, 38, 41, 42, 44, 15, 16, 20, 21, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\142\151\164", "\142\151\164\163", "\151\156\164", 
"\163\164\162\151\156\147", "\154\151\163\164", "\143\157\144\145", "\144\141\147", 
"\143\154\141\163\163", "\144\145\146", "\146\151\145\154\144", "\154\145\164", "\151\156", 
"\41\163\162\141", "\41\163\162\154", "\41\163\150\154", 
"\41\163\164\162\143\157\156\143\141\164", null, null, null, null, null, null, null, null, "\53", "\55", "\133", "\135", 
"\173", "\175", "\50", "\51", "\72", "\73", "\56", "\54", "\75", "\77", "\43", "\74", 
"\76", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TGParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public TGParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 47; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static final long[] jjtoSpecial = {
   0xeL, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[47];
    private final int[] jjstateSet = new int[2 * 47];

    
    protected char curChar;
}

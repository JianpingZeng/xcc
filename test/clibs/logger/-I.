; ModuleID = 'example.c'
target datalayout = "e-p:64:64:64-S128-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-f128:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.ident\09\22GCC: (GNU) 4.6.4 LLVM: \22"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32, [4 x i8] }

@.cst = linker_private unnamed_addr constant [12 x i8] c"user/repo.c\00", align 8
@stdout = external global %struct._IO_FILE*
@.cst1 = linker_private unnamed_addr constant [7 x i8] c"  %10s\00", align 8
@.cst2 = linker_private unnamed_addr constant [8 x i8] c"install\00", align 8
@.cst3 = linker_private unnamed_addr constant [4 x i8] c" : \00", align 8
@.cst4 = linker_private unnamed_addr constant [2 x i8] c"\0A\00", align 8
@.cst5 = linker_private unnamed_addr constant [8 x i8] c"warning\00", align 8
@.cst6 = linker_private unnamed_addr constant [37 x i8] c"something is slightly wrong about %s\00", align 64
@stderr = external global %struct._IO_FILE*
@.cst7 = linker_private unnamed_addr constant [6 x i8] c"error\00", align 8
@.cst8 = linker_private unnamed_addr constant [17 x i8] c"%s is way broken\00", align 8

define i32 @main() nounwind uwtable {
entry:
  %memtmp = alloca [12 x i8], align 1
  %0 = getelementptr inbounds [12 x i8]* %memtmp, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* getelementptr inbounds ([12 x i8]* @.cst, i64 0, i64 0), i64 12, i32 1, i1 false)
  %1 = load %struct._IO_FILE** @stdout, align 8
  %2 = call i32 (i32, %struct._IO_FILE*, i8*, ...)* @cc_fprintf(i32 15, %struct._IO_FILE* %1, i8* getelementptr inbounds ([7 x i8]* @.cst1, i64 0, i64 0), [8 x i8]* @.cst2) nounwind
  %3 = load %struct._IO_FILE** @stdout, align 8
  %4 = bitcast %struct._IO_FILE* %3 to i8*
  %5 = call i64 @fwrite(i8* getelementptr inbounds ([4 x i8]* @.cst3, i64 0, i64 0), i64 1, i64 3, i8* %4) nounwind
  %6 = load %struct._IO_FILE** @stdout, align 8
  %7 = call i32 (i32, %struct._IO_FILE*, i8*, ...)* @cc_fprintf(i32 9, %struct._IO_FILE* %6, i8* %0) nounwind
  %8 = load %struct._IO_FILE** @stdout, align 8
  %9 = bitcast %struct._IO_FILE* %8 to i8*
  %10 = call i64 @fwrite(i8* getelementptr inbounds ([2 x i8]* @.cst4, i64 0, i64 0), i64 1, i64 1, i8* %9) nounwind
  %11 = load %struct._IO_FILE** @stdout, align 8
  %12 = call i32 (i32, %struct._IO_FILE*, i8*, ...)* @cc_fprintf(i32 4, %struct._IO_FILE* %11, i8* getelementptr inbounds ([7 x i8]* @.cst1, i64 0, i64 0), [8 x i8]* @.cst5) nounwind
  %13 = load %struct._IO_FILE** @stdout, align 8
  %14 = bitcast %struct._IO_FILE* %13 to i8*
  %15 = call i64 @fwrite(i8* getelementptr inbounds ([4 x i8]* @.cst3, i64 0, i64 0), i64 1, i64 3, i8* %14) nounwind
  %16 = load %struct._IO_FILE** @stdout, align 8
  %17 = call i32 (i32, %struct._IO_FILE*, i8*, ...)* @cc_fprintf(i32 9, %struct._IO_FILE* %16, i8* getelementptr inbounds ([37 x i8]* @.cst6, i64 0, i64 0), [12 x i8]* %memtmp) nounwind
  %18 = load %struct._IO_FILE** @stdout, align 8
  %19 = bitcast %struct._IO_FILE* %18 to i8*
  %20 = call i64 @fwrite(i8* getelementptr inbounds ([2 x i8]* @.cst4, i64 0, i64 0), i64 1, i64 1, i8* %19) nounwind
  %21 = load %struct._IO_FILE** @stderr, align 8
  %22 = call i32 (i32, %struct._IO_FILE*, i8*, ...)* @cc_fprintf(i32 2, %struct._IO_FILE* %21, i8* getelementptr inbounds ([7 x i8]* @.cst1, i64 0, i64 0), [6 x i8]* @.cst7) nounwind
  %23 = load %struct._IO_FILE** @stderr, align 8
  %24 = bitcast %struct._IO_FILE* %23 to i8*
  %25 = call i64 @fwrite(i8* getelementptr inbounds ([4 x i8]* @.cst3, i64 0, i64 0), i64 1, i64 3, i8* %24) nounwind
  %26 = load %struct._IO_FILE** @stderr, align 8
  %27 = call i32 (i32, %struct._IO_FILE*, i8*, ...)* @cc_fprintf(i32 9, %struct._IO_FILE* %26, i8* getelementptr inbounds ([17 x i8]* @.cst8, i64 0, i64 0), [12 x i8]* %memtmp) nounwind
  %28 = load %struct._IO_FILE** @stderr, align 8
  %29 = bitcast %struct._IO_FILE* %28 to i8*
  %30 = call i64 @fwrite(i8* getelementptr inbounds ([2 x i8]* @.cst4, i64 0, i64 0), i64 1, i64 1, i8* %29) nounwind
  ret i32 0
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

declare i32 @cc_fprintf(i32, %struct._IO_FILE*, i8*, ...)

declare i64 @fwrite(i8* nocapture, i64, i64, i8* nocapture) nounwind

package backend.target.x86;

import backend.codegen.MachineInstr;
import backend.target.TargetMachine;

import java.io.OutputStream;

import static backend.target.x86.X86GenInstrNames.*;

/**
 * TableGen created file.
 * <p>
 * Assembly Writer Source Fragment
 * Automatically generated by .td file, do not edit!
 * Powered by Xlous zeng
 * </p>
 */
public final class X86GenATTAsmPrinter extends X86ATTAsmPrinter{
	/**
 * This method is automatically generated by tablegen
 * from the instruction set description. This method
 * returns true if the machine instruction was sufficiently
 * described to print it, otherwise it will return false.
 */
	public static final String[] opStrs = {
			"PHINODE",				// PHI
			null,				// INLINEASM
			"cmovs\t",				// CMOVS64rm
			"pabsd\t",				// PABSDrr64
			"andb\t",				// AND8rm
			"rolb\t",				// ROL8ri
			null,				// ADD_FpI32m32
			"andb\t",				// AND8ri
			"js\t",				// JS8
			"cmpw\t",				// CMP16mi8
			"shll\t",				// SHL32ri
			"shlw\t%cl, ",				// SHL16mCL
			"cmpl\t",				// CMP32ri8
			"jae\t",				// JAE8
			"fmulp\t",				// MUL_FPrST0
			"xorq\t",				// XOR64mi8
			"#PCMPISTRM128rm PSEUDO!",				// PCMPISTRM128MEM
			"andb\t",				// AND8rr
			"rcpps\t",				// RCPPSm_Int
			"sbbq\t",				// SBB64mr
			"packuswb\t",				// PACKUSWBrr
			"#TC_RETURN ",				// TCRETURNdi64
			"cmovs\t",				// CMOVS64rr
			"paddq\t",				// PADDQrr
			"shll\t%cl, ",				// SHL32rCL
			"dppd\t",				// DPPDrmi
			".loc\t",				// DWARF_LOC
			null,				// ILD_Fp64m32
			"divsd\t",				// DIVSDrm_Int
			"rolb\t",				// ROL8r1
			"packuswb\t",				// PACKUSWBrm
			"##FP32_TO_INT32_IN_MEM PSEUDO!",				// FP32_TO_INT32_IN_MEM
			"sarq\t",				// SAR64m1
			"mulss\t",				// MULSSrr_Int
			"fsts\t",				// ST_F32m
			"adcl\t",				// ADC32mi8
			"haddpd\t",				// HADDPDrr
			"haddpd\t",				// HADDPDrm
			"punpcklqdq\t",				// PUNPCKLQDQrr
			"maxss\t",				// MAXSSrr_Int
			"rolw\t",				// ROL16mi
			"rorq\t%cl, ",				// ROR64rCL
			"cmovae\t",				// CMOVAE32rr
			"cmovnp\t",				// CMOVNP64rr
			null,				// ADD_FpI32m64
			"fldl\t",				// LD_F64m
			"psadbw\t",				// PSADBWrr
			"movq\t",				// MMX_MOVQ64rr
			"cmovnp\t",				// CMOVNP64rm
			"pcmpeqw\t",				// MMX_PCMPEQWrr
			"movaps\t",				// MOVAPSmr
			"pcmpeqw\t",				// MMX_PCMPEQWrm
			"xorq\t",				// XOR64ri32
			"andq\t",				// AND64mr
			"cmovae\t",				// CMOVAE32rm
			"psadbw\t",				// PSADBWrm
			"imulq\t",				// IMUL64rmi8
			"psrlw\t",				// MMX_PSRLWrr
			"cmpw\t",				// CMP16mi
			"phaddsw\t",				// PHADDSWrm128
			"pmovzxdq\t",				// PMOVZXDQrm
			"fdiv\t",				// DIV_FST0r
			"imull\t",				// IMUL32r
			"pmovzxdq\t",				// PMOVZXDQrr
			"andnpd\t",				// FsANDNPDrr
			"paddusb\t",				// PADDUSBrr
			"movaps\t",				// MOVAPSrm
			"pcmpgtw\t",				// PCMPGTWrm
			"movq\t",				// MOVQI2PQIrm
			"andnpd\t",				// FsANDNPDrm
			"imull\t",				// IMUL32m
			"movq\t",				// MMX_MOVQ64rm
			"pcmpgtw\t",				// PCMPGTWrr
			"movaps\t",				// MOVAPSrr
			"cmpw\t",				// CMP16mr
			null,				// LD_Fp64m
			"psrlw\t",				// MMX_PSRLWri
			"setbe\t",				// SETBEr
			"shldw\t%cl, ",				// SHLD16mrCL
			"paddusb\t",				// PADDUSBrm
			"dppd\t",				// DPPDrri
			"shll\t",				// SHL32mi
			"psrlw\t",				// MMX_PSRLWrm
			null,				// SUB_Fp32m
			"setbe\t",				// SETBEm
			"shrq\t",				// SHR64m1
			"cmovge\t",				// CMOVGE16rm
			"punpcklqdq\t",				// PUNPCKLQDQrm
			"adcq\t",				// ADC64mi8
			"phsubd\t",				// PHSUBDrr128
			"rolw\t",				// ROL16m1
			"cmovle\t",				// CMOVLE64rr
			"sarq\t",				// SAR64mi
			"psraw\t",				// MMX_PSRAWrr
			"psraw\t",				// MMX_PSRAWrm
			null,				// MUL_Fp32m
			"punpckldq\t",				// MMX_PUNPCKLDQrm
			"crc32 \t",				// CRC32r32
			"psraw\t",				// MMX_PSRAWri
			"cmovge\t",				// CMOVGE16rr
			"cmovle\t",				// CMOVLE64rm
			"fcos",				// COS_F
			"paddq\t",				// PADDQrm
			"movlhps\t",				// MOVLHPSrr
			"subl\t",				// SUB32mi8
			"cmovne\t",				// CMOVNE16rm
			"pminub\t",				// PMINUBrm
			"sbbq\t",				// SBB64rm
			"cmovne\t",				// CMOVNE16rr
			"pminub\t",				// PMINUBrr
			"crc32 \t",				// CRC32r16
			"sbbq\t",				// SBB64rr
			"punpckhbw\t",				// MMX_PUNPCKHBWrm
			"shll\t",				// SHL32m1
			"andq\t",				// AND64rr
			"andq\t",				// AND64rm
			"punpckhbw\t",				// MMX_PUNPCKHBWrr
			null,				// SUBREG_TO_REG
			"orpd\t",				// ORPDrr
			"pmovsxdq\t",				// PMOVSXDQrr
			"orpd\t",				// ORPDrm
			"pmovsxdq\t",				// PMOVSXDQrm
			null,				// SUBR_FpI32m32
			"shrq\t",				// SHR64mi
			"sqrtss\t",				// SQRTSSr_Int
			"jne\t",				// JNE8
			"pmulhrsw\t",				// PMULHRSWrr64
			null,				// MUL_Fp64m32
			"fisubs\t",				// SUB_FI16m
			"pmuludq\t",				// MMX_PMULUDQrm
			"movq2dq\t",				// MMX_MOVQ2DQrr
			"pmuludq\t",				// MMX_PMULUDQrr
			"rorl\t%cl, ",				// ROR32rCL
			"subsd\t",				// SUBSDrr
			"pandn\t",				// PANDNrm
			"xorq\t",				// XOR64mr
			"subl\t",				// SUB32mr
			"pandn\t",				// PANDNrr
			"fildl\t",				// ILD_F32m
			"fmull\t",				// MUL_F64m
			"sarq\t",				// SAR64ri
			"subsd\t",				// SUBSDrm
			"phaddd\t",				// PHADDDrm64
			"pmulhuw\t",				// MMX_PMULHUWrm
			"pabsb\t",				// PABSBrr64
			"pmulhuw\t",				// MMX_PMULHUWrr
			"addps\t",				// ADDPSrm
			"shlq\t%cl, ",				// SHL64rCL
			"fidivs\t",				// DIV_FI16m
			"#ADJCALLSTACKDOWN",				// ADJCALLSTACKDOWN32
			"xchg\t",				// XCHG64rm
			"adcb\t",				// ADC8ri
			"movsldup\t",				// MOVSLDUPrr
			"imull\t",				// IMUL32rri8
			"call\t*",				// CALL64r
			"punpckhwd\t",				// PUNPCKHWDrr
			null,				// CMOVE_Fp32
			"cvtps2pd\t",				// Int_CVTPS2PDrr
			"sarq\t",				// SAR64r1
			"call\t*",				// CALL64m
			"punpckhwd\t",				// PUNPCKHWDrm
			"adcb\t",				// ADC8rr
			"sqrtpd\t",				// SQRTPDm_Int
			"subl\t",				// SUB32mi
			"idivq\t",				// IDIV64r
			null,				// MOV_Fp6432
			"cvtps2pd\t",				// Int_CVTPS2PDrm
			"movsldup\t",				// MOVSLDUPrm
			"idivq\t",				// IDIV64m
			"adcb\t",				// ADC8rm
			".byte\t0x66; leaq\t",				// TLS_addr64
			"pcmpeqb\t",				// MMX_PCMPEQBrr
			"orq\t",				// OR64ri32
			"shrq\t",				// SHR64r1
			null,				// ILD_Fp32m80
			null,				// SUBR_FpI32m64
			"pcmpeqb\t",				// MMX_PCMPEQBrm
			"punpckldq\t",				// MMX_PUNPCKLDQrr
			null,				// CMOVE_Fp64
			"pmovsxwd\t",				// PMOVSXWDrm
			"pmovsxwd\t",				// PMOVSXWDrr
			"notb\t",				// NOT8m
			"nopl\t",				// NOOPL
			"notb\t",				// NOT8r
			"orw\t",				// OR16ri8
			"cmpw\t",				// CMP16rm
			"orps\t",				// FsORPSrr
			"cvttsd2siq\t",				// Int_CVTTSD2SI64rm
			"subq\t",				// SUB64ri8
			"cmpw\t",				// CMP16ri
			"cmpw\t",				// CMP16rr
			"shldl\t%cl, ",				// SHLD32mrCL
			"fcmove\t",				// CMOVE_F
			"orps\t",				// FsORPSrm
			"cvttsd2siq\t",				// Int_CVTTSD2SI64rr
			null,				// ILD_Fp32m64
			"unpcklps\t",				// UNPCKLPSrm
			"#ADJCALLSTACKDOWN",				// ADJCALLSTACKDOWN64
			"pandn\t",				// MMX_PANDNrm
			"call\t*",				// WINCALL64m
			"testl\t",				// TEST32mi
			null,				// SUBR_Fp64m
			"call\t*",				// WINCALL64r
			null,				// SUBR_FpI32m80
			"shrq\t",				// SHR64ri
			"#ATOMOR8 PSEUDO!",				// ATOMOR8
			"lock\n\tdecw\t",				// LOCK_DEC16m
			null,				// MOV_Fp6464
			"subl\t",				// SUB32rm
			"andb\t",				// AND8mr
			"subl\t",				// SUB32rr
			"adcb\t",				// ADC8mr
			"rolw\t",				// ROL16ri
			"pcmpistri\t",				// PCMPISTRIZrm
			"unpcklps\t",				// UNPCKLPSrr
			"adcb\t",				// ADC8mi
			"subl\t",				// SUB32ri
			"pcmpistri\t",				// PCMPISTRIZrr
			"rsqrtss\t",				// RSQRTSSr_Int
			"cmovb\t",				// CMOVB64rr
			"dpps\t",				// DPPSrmi
			"cmovb\t",				// CMOVB64rm
			"decq\t",				// DEC64r
			"addsubpd\t",				// ADDSUBPDrr
			"#ATOMMAX16 PSEUDO!",				// ATOMMAX16
			"pushq\t",				// PUSH64r
			"add\t",				// ADD32i32
			"jcxz\t",				// JCXZ8
			"addsubpd\t",				// ADDSUBPDrm
			"decq\t",				// DEC64m
			"rolw\t",				// ROL16r1
			"lock\n\tsubl\t",				// LOCK_SUB32mr
			"pcmpestrm\t",				// PCMPESTRM128rr
			"#ATOMUMAX32 PSEUDO!",				// ATOMUMAX32
			"lock\n\txaddb\t",				// LXADD8
			"jmpl\t*",				// JMP32m
			null,				// MOV_Fp6480
			"pcmpestrm\t",				// PCMPESTRM128rm
			"psubd\t",				// PSUBDrm
			"jmpl\t*",				// JMP32r
			"lock\n\taddl\t",				// LOCK_ADD32mi8
			"psubd\t",				// PSUBDrr
			"movdqu\t",				// MOVDQUmr_Int
			"lock\n\tsubl\t",				// LOCK_SUB32mi
			"phaddd\t",				// PHADDDrm128
			null,				// ILD_Fp64m80
			null,				// ILD_Fp32m32
			null,				// ST_FpP64m
			"sarw\t%cl, ",				// SAR16rCL
			"#ATOMMAX32 PSEUDO!",				// ATOMMAX32
			null,				// ILD_Fp64m64
			"addps\t",				// ADDPSrr
			"andb\t",				// AND8mi
			"rcpps\t",				// RCPPSm
			"packsswb\t",				// PACKSSWBrm
			"rcpps\t",				// RCPPSr
			"lock\n\taddq\t",				// LOCK_ADD64mi32
			"#ATOMUMAX16 PSEUDO!",				// ATOMUMAX16
			"pandn\t",				// MMX_PANDNrr
			"sfence",				// SFENCE
			null,				// MUL_Fp80m32
			null,				// SQRT_Fp64
			"psrlw\t",				// PSRLWrr
			"pcmpeqq\t",				// PCMPEQQrr
			"psrlw\t",				// PSRLWrm
			"pcmpeqq\t",				// PCMPEQQrm
			"psrlw\t",				// PSRLWri
			"jnp\t",				// JNP8
			"psraw\t",				// PSRAWrr
			null,				// LD_Fp180
			"andpd\t",				// ANDPDrm
			"psraw\t",				// PSRAWrm
			"cmovle\t",				// CMOVLE16rr
			"andpd\t",				// ANDPDrr
			"shlb\t",				// SHL8m1
			"pmuldq\t",				// PMULDQrr
			"cmovle\t",				// CMOVLE16rm
			"movlps\t",				// MOVLPSmr
			"shrdw\t",				// SHRD16mri8
			"popf",				// POPFD
			"pmuldq\t",				// PMULDQrm
			"orl\t",				// OR32rr
			"fucomp\t",				// UCOM_FPr
			"psraw\t",				// PSRAWri
			"jno\t",				// JNO8
			"popf",				// POPFQ
			"movd\t",				// MOVPDI2DImr
			"paddq\t",				// MMX_PADDQrm
			"setge\t",				// SETGEr
			"pcmpestri\t",				// PCMPESTRISrr
			"paddq\t",				// MMX_PADDQrr
			"pcmpestri\t",				// PCMPESTRISrm
			"pmaddwd\t",				// MMX_PMADDWDrr
			"cmovns\t",				// CMOVNS32rr
			"orl\t",				// OR32ri
			"cmovns\t",				// CMOVNS32rm
			"orl\t",				// OR32rm
			"setge\t",				// SETGEm
			"pmovzxwd\t",				// PMOVZXWDrm
			"#ATOMOR64 PSEUDO!",				// ATOMOR64
			"subq\t",				// SUB64mi8
			"pmaddwd\t",				// MMX_PMADDWDrm
			"pmovzxwd\t",				// PMOVZXWDrr
			"shlb\t",				// SHL8mi
			"shrdl\t",				// SHRD32mri8
			"subw\t",				// SUB16mi8
			null,				// SQRT_Fp32
			"##FP64_TO_INT16_IN_MEM PSEUDO!",				// FP64_TO_INT16_IN_MEM
			"movups\t",				// MOVUPSrm_Int
			"paddusw\t",				// PADDUSWrm
			"movq\t",				// MOVZPQILo2PQIrr
			"negw\t",				// NEG16r
			"movq\t",				// MOVZPQILo2PQIrm
			"paddusw\t",				// PADDUSWrr
			"negw\t",				// NEG16m
			"bsrq\t",				// BSR64rm
			"adcl\t",				// ADC32mr
			"punpcklbw\t",				// MMX_PUNPCKLBWrr
			"bsrq\t",				// BSR64rr
			"cvttsd2si\t",				// CVTTSD2SIrm
			"cmovl\t",				// CMOVL16rm
			"punpcklbw\t",				// MMX_PUNPCKLBWrm
			"leal\t",				// LEA32r
			"rdtsc",				// RDTSC
			"incw\t",				// INC16r
			"sqrtsd\t",				// SQRTSDm
			"paddd\t",				// MMX_PADDDrm
			"incw\t",				// INC16m
			"cmovo\t",				// CMOVO32rm
			"cmovo\t",				// CMOVO32rr
			"paddd\t",				// MMX_PADDDrr
			"movd\t",				// MOVPDI2DIrr
			"pabsw\t",				// PABSWrr64
			"maxps\t",				// MAXPSrr_Int
			"packssdw\t",				// MMX_PACKSSDWrr
			"cvtpd2ps\t",				// Int_CVTPD2PSrm
			"sqrtsd\t",				// SQRTSDr
			"jns\t",				// JNS8
			"fstpl\t",				// ST_FP64m
			"cvtpd2ps\t",				// Int_CVTPD2PSrr
			"maxsd\t",				// MAXSDrm
			"packssdw\t",				// MMX_PACKSSDWrm
			"#ATOMOR32 PSEUDO!",				// ATOMOR32
			"maxsd\t",				// MAXSDrr
			"#ATOMXOR8 PSEUDO!",				// ATOMXOR8
			"addss\t",				// ADDSSrr
			"pcmpgtb\t",				// MMX_PCMPGTBrr
			"psllw\t",				// PSLLWrm
			"pcmpgtb\t",				// MMX_PCMPGTBrm
			"psadbw\t",				// MMX_PSADBWrr
			"#TC_RETURN ",				// TCRETURNri64
			"psllw\t",				// PSLLWri
			"rep;stosq",				// REP_STOSQ
			null,				// ST_Fp32m
			"psllw\t",				// PSLLWrr
			null,				// MOV_Fp3280
			"rep;stosw",				// REP_STOSW
			"leave",				// LEAVE
			"cmp",				// Int_CMPSSrr
			"cmp",				// Int_CMPSSrm
			"pabsb\t",				// PABSBrm64
			null,				// MUL_Fp80m64
			"leal\t",				// TLS_addr32
			"pmulhrsw\t",				// PMULHRSWrr128
			"crc32 \t",				// CRC64r64
			"lfence",				// LFENCE
			"#ATOMOR16 PSEUDO!",				// ATOMOR16
			"movdqu\t",				// MOVDQUmr
			"outw\t%ax, ",				// OUT16ir
			"cmp",				// CMPSSrr
			"cmp",				// CMPSSrm
			"roundpd\t",				// ROUNDPDm_Int
			"psadbw\t",				// MMX_PSADBWrm
			"cmovl\t",				// CMOVL16rr
			"movmskps\t",				// MOVMSKPSrr
			"rep;stosl",				// REP_STOSD
			"adcl\t",				// ADC32mi
			"rep;stosb",				// REP_STOSB
			"addss\t",				// ADDSSrm
			"fucomi\t",				// UCOM_FIr
			"cvtss2sd\t",				// Int_CVTSS2SDrm
			"paddd\t",				// PADDDrr
			null,				// MOV_Fp3264
			"adcl\t",				// ADC32ri
			"fcmovnb\t",				// CMOVNB_F
			"sarl\t%cl, ",				// SAR32rCL
			"paddd\t",				// PADDDrm
			"adcl\t",				// ADC32rr
			"movntpd\t",				// MOVNTPDmr
			"xorpd\t",				// FsXORPDrr
			"##FP80_TO_INT64_IN_MEM PSEUDO!",				// FP80_TO_INT64_IN_MEM
			"adcl\t",				// ADC32rm
			"cvtss2sd\t",				// Int_CVTSS2SDrr
			"shrdq\t%cl, ",				// SHRD64mrCL
			"xorpd\t",				// FsXORPDrm
			"mulsd\t",				// MULSDrr_Int
			"imulw\t",				// IMUL16rri
			"lock\n\taddw\t",				// LOCK_ADD16mi8
			"movsd\t",				// MOVSD2PDrr
			"#ATOMUMIN32 PSEUDO!",				// ATOMUMIN32
			"insertps\t",				// INSERTPSrr
			"movd\t",				// MMX_MOVD64rrv164
			"movq\t",				// MOV64mi32
			"maskmovdqu\t",				// MASKMOVDQU
			"maxpd\t",				// MAXPDrm_Int
			"lock\n\tdecq\t",				// LOCK_DEC64m
			"#ATOMMIN16 PSEUDO!",				// ATOMMIN16
			null,				// CMOVNB_Fp64
			"pcmpistri\t",				// PCMPISTRIrm
			"comiss\t",				// Int_COMISSrm
			"movzbl\t",				// MOVZX32_NOREXrm8
			"pinsrb\t",				// PINSRBrr
			"pcmpistri\t",				// PCMPISTRIrr
			"insertps\t",				// INSERTPSrm
			"pcmpeqd\t",				// PCMPEQDrm
			"sarw\t%cl, ",				// SAR16mCL
			"comiss\t",				// Int_COMISSrr
			"minsd\t",				// MINSDrm
			"pinsrb\t",				// PINSRBrm
			"imulw\t",				// IMUL16rri8
			"movdqu\t",				// MOVDQUrm
			"pcmpeqd\t",				// PCMPEQDrr
			"cmpw\t",				// CMP16ri8
			"movsd\t",				// MOVSD2PDrm
			null,				// CMOVNB_Fp32
			"pabsb\t",				// PABSBrr128
			null,				// FpGET_ST0_32
			null,				// ISTT_Fp64m32
			"punpckhdq\t",				// PUNPCKHDQrr
			"minpd\t",				// MINPDrr_Int
			"fdivs\t",				// DIV_F32m
			"orb\t",				// OR8mr
			"punpckhdq\t",				// PUNPCKHDQrm
			null,				// MOV_Fp3232
			"lddqu\t",				// LDDQUrm
			"orb\t",				// OR8mi
			"cvttsd2si\t",				// CVTTSD2SIrr
			"#ATOMUMIN16 PSEUDO!",				// ATOMUMIN16
			"pshufb\t",				// PSHUFBrm64
			"#ATOMMIN32 PSEUDO!",				// ATOMMIN32
			"xorpd\t",				// XORPDrr
			"pabsw\t",				// PABSWrr128
			"xorpd\t",				// XORPDrm
			"subsd\t",				// SUBSDrm_Int
			"movapd\t",				// FsMOVAPDrm
			"fistpll\t",				// IST_FP64m
			"movapd\t",				// FsMOVAPDrr
			"mulps\t",				// MULPSrm
			null,				// ADD_Fp64m
			"mulps\t",				// MULPSrr
			"movss\t",				// MOVLPSrr
			null,				// SUB_Fp64
			"movlps\t",				// MOVLPSrm
			"movswl\t",				// MOVSX32rm16
			"#ATOMUMIN64 PSEUDO!",				// ATOMUMIN64
			null,				// DIV_Fp32m
			"divss\t",				// DIVSSrm_Int
			"outw\t%ax, %dx",				// OUT16rr
			null,				// ADD_FpI32m80
			"#ATOMMIN64 PSEUDO!",				// ATOMMIN64
			"crc32 \t",				// CRC32r8
			null,				// GC_LABEL
			"cvtsi2sd\t",				// CVTSI2SDrm
			"roundss\t",				// ROUNDSSr_Int
			"sysenter",				// SYSENTER
			"cvtsi2sd\t",				// CVTSI2SDrr
			null,				// FpGET_ST0_64
			"roundps\t",				// ROUNDPSr_Int
			"adcq\t",				// ADC64ri32
			null,				// ISTT_Fp64m64
			null,				// SQRT_Fp80
			"minsd\t",				// MINSDrr
			"jmpq\t*",				// TAILJMPr64
			"cmovnp\t",				// CMOVNP16rr
			null,				// FpGET_ST0_80
			"cmovnp\t",				// CMOVNP16rm
			"rsqrtss\t",				// RSQRTSSr
			"pxor\t",				// MMX_PXORrm
			"orb\t",				// OR8rr
			"lock\n\tincb\t",				// LOCK_INC8m
			"orl\t",				// OR32mr
			"ret\t",				// RETI
			"orb\t",				// OR8rm
			"xchgw\t",				// XCHG16rm
			"imull\t",				// IMUL32rr
			"movzbl\t",				// MOVZX32_NOREXrr8
			"orb\t",				// OR8ri
			"divl\t",				// DIV32r
			"phsubsw\t",				// PHSUBSWrm64
			"pxor\t",				// MMX_PXORrr
			"cbtw",				// CBW
			"shrdl\t%cl, ",				// SHRD32rrCL
			"imull\t",				// IMUL32rm
			"psubusw\t",				// MMX_PSUBUSWrm
			"psubusw\t",				// MMX_PSUBUSWrr
			"punpcklwd\t",				// PUNPCKLWDrm
			null,				// SUB_Fp32
			"jbe\t",				// JBE8
			"cwtl",				// CWDE
			"ucomisd\t",				// UCOMISDrr
			"divl\t",				// DIV32m
			"movl\t%fs:",				// FS_MOV32rm
			"punpcklwd\t",				// PUNPCKLWDrr
			"call\t",				// CALL64pcrel32
			"ucomisd\t",				// UCOMISDrm
			"rsqrtss\t",				// RSQRTSSm
			"orl\t",				// OR32mi
			"shlb\t%cl, ",				// SHL8rCL
			null,				// ISTT_Fp64m80
			"shll\t%cl, ",				// SHL32mCL
			"pcmpistri\t",				// PCMPISTRIArr
			"pcmpistri\t",				// PCMPISTRIArm
			"ret\t#eh_return, addr: ",				// EH_RETURN64
			null,				// IMPLICIT_DEF
			"testb\t",				// TEST8mi
			"lock\n\tsubb\t",				// LOCK_SUB8mi
			"movss\t",				// MOVSSmr
			"punpckhqdq\t",				// PUNPCKHQDQrm
			"incq\t",				// INC64r
			"incq\t",				// INC64m
			"punpckhqdq\t",				// PUNPCKHQDQrr
			"cltd",				// CDQ
			null,				// DIVR_Fp64m
			"orw\t",				// OR16ri
			"lock\n\tsubb\t",				// LOCK_SUB8mr
			"fadd\t",				// ADD_FST0r
			"shldw\t",				// SHLD16mri8
			"movhps\t",				// MOVHPSmr
			"cmovl\t",				// CMOVL64rr
			"fisttps\t",				// ISTT_FP16m
			"cvtpd2pi\t",				// Int_CVTPD2PIrm
			"cvtpd2pi\t",				// Int_CVTPD2PIrr
			"fld\t",				// LD_Frr
			"cvtps2pi\t",				// MMX_CVTPS2PIrm
			"cmovl\t",				// CMOVL64rm
			"crc32 \t",				// CRC64m64
			"cvtps2pi\t",				// MMX_CVTPS2PIrr
			"decw\t",				// DEC16m
			"pcmpgtw\t",				// MMX_PCMPGTWrm
			"pcmpgtw\t",				// MMX_PCMPGTWrr
			"sete\t",				// SETEm
			"shrl\t",				// SHR32m1
			"sete\t",				// SETEr
			"decw\t",				// DEC16r
			"shrl\t",				// SHR32mi
			"fst\t",				// ST_Frr
			"crc32 \t",				// CRC32m8
			"movd\t",				// MOVSS2DImr
			"fdivp\t",				// DIVR_FPrST0
			"cvtpi2ps\t",				// MMX_CVTPI2PSrm
			"pminsw\t",				// MMX_PMINSWrr
			"unpckhps\t",				// UNPCKHPSrm
			"rorw\t",				// ROR16m1
			"pminsw\t",				// MMX_PMINSWrm
			"pextrb\t",				// PEXTRBmr
			"mulsd\t",				// MULSDrm_Int
			"unpckhps\t",				// UNPCKHPSrr
			"sbbw\t",				// SBB16ri8
			"imull\t",				// IMUL32rmi8
			"andl\t",				// AND32ri
			"cvttps2pi\t",				// MMX_CVTTPS2PIrm
			"andw\t",				// AND16ri8
			"cvttps2pi\t",				// MMX_CVTTPS2PIrr
			"subq\t",				// SUB64mr
			"#ATOMNAND6432 PSEUDO!",				// ATOMNAND6432
			"psubd\t",				// MMX_PSUBDrm
			"cvtpi2ps\t",				// MMX_CVTPI2PSrr
			"andl\t",				// AND32rr
			"psllw\t",				// MMX_PSLLWrr
			"andl\t",				// AND32rm
			"movq\t",				// MOVLQ128mr
			"psubd\t",				// MMX_PSUBDrr
			"psllw\t",				// MMX_PSLLWrm
			"cvtpi2pd\t",				// Int_CVTPI2PDrr
			"setg\t",				// SETGm
			"psllw\t",				// MMX_PSLLWri
			"cvtpi2pd\t",				// Int_CVTPI2PDrm
			"setg\t",				// SETGr
			"maxps\t",				// MAXPSrm_Int
			"setb\t",				// SETBr
			"maskmovq\t",				// MMX_MASKMOVQ
			"movd\t",				// MOVZDI2PDIrr
			"movd\t",				// MOVZDI2PDIrm
			"cvtss2sd\t",				// CVTSS2SDrr
			"divb\t",				// DIV8m
			"divb\t",				// DIV8r
			"movzwl\t",				// MOVZX32rm16
			"pmovmskb\t",				// MMX_PMOVMSKBrr
			"addw\t",				// ADD16ri8
			"pcmpeqw\t",				// PCMPEQWrr
			"pcmpeqw\t",				// PCMPEQWrm
			"shufps\t",				// SHUFPSrri
			"pblendvb\t%xmm0, ",				// PBLENDVBrm0
			"fld1",				// LD_F1
			"rorw\t",				// ROR16mi
			"mulss\t",				// MULSSrm
			"fldz",				// LD_F0
			"setb\t",				// SETBm
			null,				// ADD_Fp64
			"testb\t",				// TEST8ri
			null,				// ILD_Fp16m64
			"seta\t",				// SETAr
			"psubq\t",				// MMX_PSUBQrr
			"psubsw\t",				// MMX_PSUBSWrm
			"testb\t",				// TEST8rm
			"pmullw\t",				// PMULLWrr
			"testb\t",				// TEST8rr
			"shrl\t",				// SHR32r1
			"pmullw\t",				// PMULLWrm
			"cmovp\t",				// CMOVP16rr
			"lock\n\taddq\t",				// LOCK_ADD64mr
			"psubq\t",				// MMX_PSUBQrm
			"psubsw\t",				// MMX_PSUBSWrr
			"addss\t",				// ADDSSrm_Int
			"paddsb\t",				// MMX_PADDSBrr
			"seta\t",				// SETAm
			"paddsb\t",				// MMX_PADDSBrm
			null,				// ST_FpP64m32
			"cmovb\t",				// CMOVB32rm
			"#CMOV_V1I64 PSEUDO!",				// CMOV_V1I64
			"cmovp\t",				// CMOVP16rm
			"addw\t",				// ADD16mi
			"addw\t",				// ADD16mr
			null,				// ADD_Fp80
			null,				// ILD_Fp16m80
			"cmovb\t",				// CMOVB32rr
			"orw\t",				// OR16rr
			"movd\t",				// MOVSS2DIrr
			"shrw\t%cl, ",				// SHR16rCL
			"mulss\t",				// MULSSrr
			"cvttps2dq\t",				// Int_CVTTPS2DQrr
			"cvttps2dq\t",				// Int_CVTTPS2DQrm
			"movzbl\t",				// MOVZX64rm8
			"orw\t",				// OR16rm
			"shrl\t",				// SHR32ri
			"fstp\t",				// ST_FPrr
			"movw\t",				// MOV16ri
			"xorb\t",				// XOR8rm
			"subq\t",				// SUB64rr
			"xorb\t",				// XOR8rr
			"movw\t",				// MOV16rm
			"subq\t",				// SUB64rm
			"movw\t",				// MOV16rr
			"negq\t",				// NEG64m
			"cvtss2sd\t",				// CVTSS2SDrm
			"xorb\t",				// XOR8ri
			"pextrb\t",				// PEXTRBrr
			"decw\t",				// DEC64_16r
			"movsd\t",				// MOVLSD2PDrr
			"imulq\t",				// IMUL64r
			"decw\t",				// DEC64_16m
			"paddusb\t",				// MMX_PADDUSBrr
			"imulq\t",				// IMUL64m
			"pmaxub\t",				// PMAXUBrr
			"paddusb\t",				// MMX_PADDUSBrm
			null,				// LD_Fp32m
			"ldmxcsr\t",				// LDMXCSR
			"andl\t",				// AND32mi
			"fists\t",				// IST_F16m
			"andl\t",				// AND32mr
			"punpckhwd\t",				// MMX_PUNPCKHWDrm
			"rorq\t",				// ROR64mi
			"punpckhwd\t",				// MMX_PUNPCKHWDrr
			"movq\t",				// MOV64ri32
			"pextrw\t",				// PEXTRWri
			"pushl\t",				// PUSH32i16
			"fimull\t",				// MUL_FI32m
			"shufps\t",				// SHUFPSrmi
			null,				// SUBR_Fp64m32
			"palignr\t",				// PALIGNR128rm
			"pcmpestri\t",				// PCMPESTRIOrr
			"pcmpestri\t",				// PCMPESTRIOrm
			"pmaddubsw\t",				// PMADDUBSWrm128
			"movswl\t",				// MOVSX32rr16
			"#CMOV_V4F32 PSEUDO!",				// CMOV_V4F32
			"palignr\t",				// PALIGNR128rr
			"addw\t",				// ADD16ri
			"pabsw\t",				// PABSWrm128
			"pblendw\t",				// PBLENDWrri
			"setp\t",				// SETPr
			"##FP64_TO_INT64_IN_MEM PSEUDO!",				// FP64_TO_INT64_IN_MEM
			"rorq\t",				// ROR64r1
			"pushl\t",				// PUSH32i32
			"shrb\t%cl, ",				// SHR8rCL
			"movss\t",				// MOVSSrr
			"cmovs\t",				// CMOVS32rm
			"fnstsw",				// FNSTSW8r
			"andq\t",				// AND64mi32
			"fdivr\t",				// DIVR_FST0r
			"setp\t",				// SETPm
			"cmpl\t",				// CMP32mi8
			"crc32 \t",				// CRC32m32
			"divss\t",				// DIVSSrr_Int
			"#PCMPISTRM128rr PSEUDO!",				// PCMPISTRM128REG
			"seto\t",				// SETOm
			"addw\t",				// ADD16rm
			"cvttpd2pi\t",				// MMX_CVTTPD2PIrm
			"#ATOMXOR6432 PSEUDO!",				// ATOMXOR6432
			"addw\t",				// ADD16rr
			"addb\t",				// ADD8mr
			"cvttpd2pi\t",				// MMX_CVTTPD2PIrr
			"shrdw\t%cl, ",				// SHRD16rrCL
			"seto\t",				// SETOr
			"addb\t",				// ADD8mi
			"movss\t",				// MOVSSrm
			"lock\n\tsubq\t",				// LOCK_SUB64mr
			null,				// CMOVBE_Fp32
			"leal\t",				// LEA64_32r
			"rorq\t",				// ROR64ri
			"xchgl\t",				// XCHG32rm
			"orw\t",				// OR16mr
			"pmovzxwq\t",				// PMOVZXWQrm
			"addsd\t",				// ADDSDrr_Int
			"pushq\t",				// PUSH64i32
			"phaddw\t",				// PHADDWrm128
			"pmulhuw\t",				// PMULHUWrr
			"pmulhuw\t",				// PMULHUWrm
			"orw\t",				// OR16mi
			"pmovzxwq\t",				// PMOVZXWQrr
			"cmovnp\t",				// CMOVNP32rr
			"cmovnp\t",				// CMOVNP32rm
			"paddsw\t",				// PADDSWrm
			"fildll\t",				// ILD_F64m
			"paddsw\t",				// PADDSWrr
			"roundss\t",				// ROUNDSSm_Int
			null,				// CMOVBE_Fp64
			"cmovs\t",				// CMOVS32rr
			"adcq\t",				// ADC64mi32
			"sysexit",				// SYSEXIT64
			"leaw\t",				// LEA16r
			"cqto",				// CQO
			"cvttpd2dq\t",				// Int_CVTTPD2DQrm
			null,				// DIV_FpI32m32
			"call\t*",				// CALL32r
			"cvttpd2dq\t",				// Int_CVTTPD2DQrr
			"movd\t",				// MMX_MOVD64to64rr
			"call\t*",				// CALL32m
			"crc32 \t",				// CRC32m16
			"pblendw\t",				// PBLENDWrmi
			"fcmovnbe\t",				// CMOVNBE_F
			"syscall",				// SYSCALL
			"fdivrp\t",				// DIV_FPrST0
			"subss\t",				// SUBSSrm_Int
			"shlb\t",				// SHL8ri
			"#VASTART_SAVE_XMM_REGS ",				// VASTART_SAVE_XMM_REGS
			"packssdw\t",				// PACKSSDWrr
			null,				// DIV_FpI32m64
			null,				// CMOVBE_Fp80
			"femms",				// MMX_FEMMS
			"pmulhrsw\t",				// PMULHRSWrm64
			"packssdw\t",				// PACKSSDWrm
			"add\t",				// ADD8i8
			"cvtps2dq\t",				// Int_CVTPS2DQrm
			"setl\t",				// SETLm
			"minps\t",				// MINPSrr_Int
			"setl\t",				// SETLr
			"cvtps2dq\t",				// Int_CVTPS2DQrr
			"movhlps\t",				// MOVHLPSrr
			"##FP64_TO_INT32_IN_MEM PSEUDO!",				// FP64_TO_INT32_IN_MEM
			"shrdl\t%cl, ",				// SHRD32mrCL
			"divps\t",				// DIVPSrr
			"movhps\t",				// MOVHPSrm
			"divps\t",				// DIVPSrm
			"pmaxub\t",				// PMAXUBrm
			null,				// DIV_Fp64m32
			"fmul\t%st(0), ",				// MUL_FrST0
			"addq\t",				// ADD64mi32
			"subl\t",				// SUB32ri8
			"movl\t",				// MOVZX64rr32
			"cmpq\t",				// CMP64mi8
			"blendvpd\t%xmm0, ",				// BLENDVPDrm0
			"dpps\t",				// DPPSrri
			"phaddd\t",				// PHADDDrr128
			"rolq\t",				// ROL64m1
			"fisubl\t",				// SUB_FI32m
			"pinsrw\t",				// PINSRWrri
			"pmovzxbd\t",				// PMOVZXBDrr
			"divss\t",				// DIVSSrr
			"lock\n\taddw\t",				// LOCK_ADD16mr
			"divss\t",				// DIVSSrm
			null,				// DIV_Fp64m
			"cmova\t",				// CMOVA64rr
			"cmova\t",				// CMOVA64rm
			"lock\n\taddw\t",				// LOCK_ADD16mi
			"psubq\t",				// PSUBQrm
			"bswapl\t",				// BSWAP32r
			"pminsw\t",				// PMINSWrm
			"testl\t",				// TEST32ri
			"sbbw\t",				// SBB16mr
			"minpd\t",				// MINPDrm
			"minpd\t",				// MINPDrr
			"testl\t",				// TEST32rm
			"sarw\t",				// SAR16m1
			"pminsw\t",				// PMINSWrr
			"sbbw\t",				// SBB16mi
			"subpd\t",				// SUBPDrr
			"orq\t",				// OR64mr
			"fcmovb\t",				// CMOVB_F
			"pshufb\t",				// PSHUFBrr128
			"subq\t",				// SUB64ri32
			null,				// UCOM_FpIr32
			"pshufw\t",				// MMX_PSHUFWri
			"subpd\t",				// SUBPDrm
			"pmovzxbd\t",				// PMOVZXBDrm
			null,				// SUB_Fp80m32
			"testl\t",				// TEST32rr
			"psignb\t",				// PSIGNBrr128
			"cmpb\t",				// CMP8mr
			"paddsb\t",				// PADDSBrr
			"xorq\t",				// XOR64mi32
			"psignd\t",				// PSIGNDrm128
			"cvtsd2siq\t",				// Int_CVTSD2SI64rr
			"movzwl\t",				// MOVZX32rr16
			"pushq\t",				// PUSH64i16
			"cwtd",				// CWD
			null,				// SIN_Fp64
			"pcmpistri\t",				// PCMPISTRISrm
			null,				// UCOM_FpIr64
			"paddusw\t",				// MMX_PADDUSWrm
			"adcq\t",				// ADC64ri8
			"pcmpistri\t",				// PCMPISTRISrr
			"cmpb\t",				// CMP8mi
			"shrb\t%cl, ",				// SHR8mCL
			"#ATOMXOR16 PSEUDO!",				// ATOMXOR16
			"#ATOMUMAX64 PSEUDO!",				// ATOMUMAX64
			"cmovne\t",				// CMOVNE64rm
			"movb\t",				// MOV8rm_NOREX
			"cmovne\t",				// CMOVNE64rr
			"cmovp\t",				// CMOVP64rm
			"paddusw\t",				// MMX_PADDUSWrr
			"cmovp\t",				// CMOVP64rr
			"sarw\t",				// SAR16mi
			"pxor\t",				// FsFLD0SD
			"fiadds\t",				// ADD_FI16m
			"pcmpestri\t",				// PCMPESTRICrr
			"pcmpestri\t",				// PCMPESTRICrm
			"sysexit",				// SYSEXIT
			"cvtsd2siq\t",				// Int_CVTSD2SI64rm
			"pxor\t",				// FsFLD0SS
			"phaddsw\t",				// PHADDSWrm64
			"divsd\t",				// DIVSDrr_Int
			"sarw\t",				// SAR16r1
			"sbbq\t",				// SBB64mi32
			"pextrw\t",				// PEXTRWmr
			"cmovbe\t",				// CMOVBE32rm
			"orq\t",				// OR64rr
			null,				// ST_FpP80m64
			"sets\t",				// SETSm
			"movq\t",				// MOV64toSDrm
			"cmpq\t",				// CMP64mi32
			"shrdq\t",				// SHRD64mri8
			"cmovbe\t",				// CMOVBE32rr
			"hsubps\t",				// HSUBPSrr
			null,				// SIN_Fp80
			"movd\t",				// MOV64toSDrr
			"xchgb\t",				// XCHG8rm
			"phsubsw\t",				// PHSUBSWrr64
			"hsubps\t",				// HSUBPSrm
			"xorq\t",				// XOR64rm
			"cvtsd2ss\t",				// Int_CVTSD2SSrr
			"xorq\t",				// XOR64rr
			"psubsw\t",				// PSUBSWrr
			"rcpss\t",				// RCPSSm
			null,				// UCOM_FpIr80
			"pshufw\t",				// MMX_PSHUFWmi
			"rcpss\t",				// RCPSSr
			"rsqrtps\t",				// RSQRTPSm
			"jge\t",				// JGE8
			"addq\t",				// ADD64mr
			"rsqrtps\t",				// RSQRTPSr
			"orq\t",				// OR64rm
			"psubsw\t",				// PSUBSWrm
			"shlb\t%cl, ",				// SHL8mCL
			"paddsb\t",				// PADDSBrm
			null,				// MUL_Fp32
			"cvtsd2ss\t",				// Int_CVTSD2SSrm
			"notw\t",				// NOT16r
			"shldw\t%cl, ",				// SHLD16rrCL
			"pmaxsd\t",				// PMAXSDrr
			"pmaxsd\t",				// PMAXSDrm
			"fsubs\t",				// SUB_F32m
			"sarw\t",				// SAR16ri
			"pshufhw\t",				// PSHUFHWmi
			"notw\t",				// NOT16m
			"cvttss2si\t",				// Int_CVTTSS2SIrr
			"#ATOMOR6432 PSEUDO!",				// ATOMOR6432
			"cvttss2si\t",				// Int_CVTTSS2SIrm
			"lock\n\tincl\t",				// LOCK_INC32m
			"sqrtss\t",				// SQRTSSm_Int
			"pmaxuw\t",				// PMAXUWrm
			null,				// MUL_Fp64
			"pmaxuw\t",				// PMAXUWrr
			"shlw\t%cl, ",				// SHL16rCL
			"psubq\t",				// PSUBQrr
			"movb\t",				// MOV8rr
			"psubusw\t",				// PSUBUSWrr
			"fdivrl\t",				// DIVR_F64m
			"fistps\t",				// IST_FP16m
			"testq\t",				// TEST64ri32
			"punpckhdq\t",				// MMX_PUNPCKHDQrm
			"punpckhdq\t",				// MMX_PUNPCKHDQrr
			"lock\n\taddb\t",				// LOCK_ADD8mi
			"psubusw\t",				// PSUBUSWrm
			"sets\t",				// SETSr
			"packsswb\t",				// MMX_PACKSSWBrr
			"packsswb\t",				// MMX_PACKSSWBrm
			"lock\n\taddb\t",				// LOCK_ADD8mr
			"maxpd\t",				// MAXPDrr_Int
			"movupd\t",				// MOVUPDrm_Int
			"setle\t",				// SETLEr
			"negq\t",				// NEG64r
			null,				// ADD_Fp32m
			"fidivrs\t",				// DIVR_FI16m
			null,				// DIV_Fp80m64
			"fchs",				// CHS_F
			"setle\t",				// SETLEm
			"pminsb\t",				// PMINSBrm
			"xorb\t",				// XOR8mi
			"pminsb\t",				// PMINSBrr
			"lock\n\tsubw\t",				// LOCK_SUB16mi8
			"punpcklwd\t",				// MMX_PUNPCKLWDrr
			"movups\t",				// MOVUPSmr
			"cvtsd2ss\t",				// CVTSD2SSrm
			"leaq\t",				// LEA64r
			"mulss\t",				// MULSSrm_Int
			"movb\t",				// MOV8rm
			"bsrl\t",				// BSR32rr
			"shldq\t%cl, ",				// SHLD64mrCL
			"movb\t",				// MOV8ri
			"adcw\t",				// ADC16mi8
			"por\t",				// PORrm
			"xorb\t",				// MOV8r0
			null,				// MUL_Fp80
			"cmpb\t",				// CMP8rr
			"movsd\t",				// MOVPD2SDrr
			"addq\t",				// ADD64rr
			"pmovsxbw\t",				// PMOVSXBWrr
			"##FP80_TO_INT32_IN_MEM PSEUDO!",				// FP80_TO_INT32_IN_MEM
			"addq\t",				// ADD64rm
			"adcl\t",				// ADC32ri8
			"orq\t",				// OR64mi32
			"pextrw\t",				// MMX_PEXTRWri
			"pmovsxbw\t",				// PMOVSXBWrm
			"rorw\t",				// ROR16r1
			"#ATOMXOR64 PSEUDO!",				// ATOMXOR64
			"cmpq\t",				// CMP64ri8
			"cmpb\t",				// CMP8rm
			"cmpb\t",				// CMP8ri
			"maxsd\t",				// MAXSDrr_Int
			"por\t",				// PORrr
			"pabsd\t",				// PABSDrr128
			null,				// LD_Fp32m64
			"movd\t",				// MOVSDto64rr
			"cvtdq2pd\t",				// Int_CVTDQ2PDrm
			"nop",				// NOOP
			"pmaxub\t",				// MMX_PMAXUBrm
			"sqrtps\t",				// SQRTPSm_Int
			"pmaxub\t",				// MMX_PMAXUBrr
			"pminud\t",				// PMINUDrm
			"cvtdq2pd\t",				// Int_CVTDQ2PDrr
			null,				// ST_Fp64m
			"ucomiss\t",				// Int_UCOMISSrm
			"pminud\t",				// PMINUDrr
			"pcmpistri\t",				// PCMPISTRIOrr
			"ucomiss\t",				// Int_UCOMISSrr
			"xorw\t",				// XOR16rm
			"call\t",				// WINCALL64pcrel32
			"xorw\t",				// XOR16ri
			"ret\t#eh_return, addr: ",				// EH_RETURN
			"movq\t",				// MOVPQI2QImr
			"rsqrtss\t",				// RSQRTSSm_Int
			null,				// DIV_Fp80m32
			"pinsrw\t",				// PINSRWrmi
			"xorb\t",				// XOR8mr
			null,				// ST_FpP80m32
			"punpcklwd\t",				// MMX_PUNPCKLWDrm
			"xorw\t",				// XOR16rr
			"cvtsd2ss\t",				// CVTSD2SSrr
			"pcmpistri\t",				// PCMPISTRIOrm
			"inl\t%dx, %eax",				// IN32rr
			"pcmpistrm\t",				// PCMPISTRM128rm
			null,				// LD_Fp32m80
			"rolq\t",				// ROL64ri
			"#ATOMADD6432 PSEUDO!",				// ATOMADD6432
			"phsubw\t",				// PHSUBWrr128
			null,				// MUL_FpI16m32
			"rorw\t",				// ROR16ri
			"pcmpistrm\t",				// PCMPISTRM128rr
			null,				// ADD_Fp32
			null,				// ILD_Fp16m32
			"movups\t",				// MOVUPSrm
			"movb\t",				// MOV8mi
			"sbbw\t",				// SBB16rr
			"sbbw\t",				// SBB16rm
			"inl\t",				// IN32ri
			"movb\t",				// MOV8mr
			"sbbw\t",				// SBB16ri
			"fisubrl\t",				// SUBR_FI32m
			"#ATOMXOR32 PSEUDO!",				// ATOMXOR32
			null,				// LD_Fp64m80
			null,				// MUL_FpI16m64
			"movq\t",				// MOVSDto64mr
			"subw\t",				// SUB16ri8
			"incl\t",				// INC64_32m
			"movapd\t",				// MOVAPDmr
			"cmova\t",				// CMOVA16rm
			"cmova\t",				// CMOVA16rr
			"pmaddwd\t",				// PMADDWDrm
			"xorw\t",				// XOR16mi
			"fxch\t",				// XCH_F
			"pmaddwd\t",				// PMADDWDrr
			"imulq\t",				// IMUL64rri8
			"fsub\t%st(0), ",				// SUBR_FrST0
			"idivw\t",				// IDIV16r
			"rolq\t",				// ROL64r1
			"idivw\t",				// IDIV16m
			"movsd\t",				// MOVPD2SDmr
			"movups\t",				// MOVUPSrr
			"incl\t",				// INC64_32r
			"pmulld\t",				// PMULLDrr_int
			"xorw\t",				// XOR16mr
			"jmp\t*",				// TAILJMPm
			"jmpl\t*",				// TAILJMPr
			"fcmovne\t",				// CMOVNE_F
			"pand\t",				// PANDrr
			"jmp\t",				// TAILJMPd
			"pand\t",				// PANDrm
			"fsubr\t%st(0), ",				// SUB_FrST0
			"rolq\t",				// ROL64mi
			"bsrl\t",				// BSR32rm
			"fdivl\t",				// DIV_F64m
			"andnpd\t",				// ANDNPDrr
			null,				// MUL_FpI16m80
			"movntdq\t",				// MOVNTDQmr
			"andnpd\t",				// ANDNPDrm
			"sahf",				// SAHF
			"maxps\t",				// MAXPSrm
			"fucomip\t",				// UCOM_FIPr
			"movdqa\t",				// MOVDQAmr
			"maxps\t",				// MAXPSrr
			"rsqrtps\t",				// RSQRTPSm_Int
			"psubsb\t",				// MMX_PSUBSBrr
			null,				// DECLARE
			"#CMOV_FR64 PSEUDO!",				// CMOV_FR64
			"psubsb\t",				// MMX_PSUBSBrm
			"pblendvb\t%xmm0, ",				// PBLENDVBrr0
			"##FP32_TO_INT64_IN_MEM PSEUDO!",				// FP32_TO_INT64_IN_MEM
			"pcmpgtb\t",				// PCMPGTBrr
			"movdqu\t",				// MOVDQUrm_Int
			"pcmpgtb\t",				// PCMPGTBrm
			"sarb\t",				// SAR8m1
			null,				// CMOVNE_Fp80
			"#ATOMSWAP6432 PSEUDO!",				// ATOMSWAP6432
			"cmovns\t",				// CMOVNS16rm
			"psignd\t",				// PSIGNDrr64
			"#CMOV_FR32 PSEUDO!",				// CMOV_FR32
			null,				// ADD_Fp80m64
			"cmovns\t",				// CMOVNS16rr
			"subss\t",				// SUBSSrr_Int
			"subb\t",				// SUB8ri
			"sqrtps\t",				// SQRTPSm
			"#ATOMSUB6432 PSEUDO!",				// ATOMSUB6432
			"sqrtps\t",				// SQRTPSr
			null,				// TST_Fp32
			"fabs",				// ABS_F
			"pmaddubsw\t",				// PMADDUBSWrm64
			"fidivl\t",				// DIV_FI32m
			"#CMOV_V2I64 PSEUDO!",				// CMOV_V2I64
			null,				// DIV_FpI16m32
			"subb\t",				// SUB8rr
			"movapd\t",				// MOVAPDrm
			"subb\t",				// SUB8rm
			"minpd\t",				// MINPDrm_Int
			"shrdl\t",				// SHRD32rri8
			"cmove\t",				// CMOVE64rr
			"notq\t",				// NOT64m
			"lock\n\taddl\t",				// LOCK_ADD32mr
			null,				// TST_Fp64
			null,				// CMOVNE_Fp64
			"movdqa\t",				// MOVDQArr
			"lock\n\tsubq\t",				// LOCK_SUB64mi32
			"punpcklbw\t",				// PUNPCKLBWrr
			"punpcklbw\t",				// PUNPCKLBWrm
			"lock\n\taddl\t",				// LOCK_ADD32mi
			"pmulhw\t",				// MMX_PMULHWrm
			null,				// DIV_FpI16m64
			"testw\t",				// TEST16mi
			"rolb\t%cl, ",				// ROL8mCL
			"cmove\t",				// CMOVE64rm
			"movd\t",				// MMX_MOVD64from64rr
			"pmulhw\t",				// MMX_PMULHWrr
			null,				// EXTRACT_SUBREG
			"psignd\t",				// PSIGNDrr128
			null,				// SUB_FpI32m32
			"movdqa\t",				// MOVDQArm
			"pshuflw\t",				// PSHUFLWmi
			"cmp",				// CMPPDrri
			"movd\t",				// MMX_MOVZDI2PDIrm
			"pxor\t",				// MMX_V_SET0
			"notq\t",				// NOT64r
			"movd\t",				// MMX_MOVZDI2PDIrr
			"sbbq\t",				// SBB64ri8
			"mfence",				// MFENCE
			"fcmovnu\t",				// CMOVNP_F
			"roll\t%cl, ",				// ROL32rCL
			"btl\t",				// BT32ri8
			"paddb\t",				// PADDBrr
			null,				// DIV_FpI16m80
			"orq\t",				// OR64mi8
			null,				// CMOVNE_Fp32
			null,				// TST_Fp80
			"paddb\t",				// PADDBrm
			"orps\t",				// ORPSrm
			null,				// FpSET_ST0_64
			"orps\t",				// ORPSrr
			"xorps\t",				// XORPSrr
			"#PCMPESTRM128rm PSEUDO!",				// PCMPESTRM128MEM
			"xorps\t",				// XORPSrm
			"rolw\t%cl, ",				// ROL16mCL
			"sarb\t",				// SAR8r1
			"orpd\t",				// FsORPDrr
			"lock\n\tdecl\t",				// LOCK_DEC32m
			"##FP80_TO_INT16_IN_MEM PSEUDO!",				// FP80_TO_INT16_IN_MEM
			null,				// ADD_Fp80m32
			"movl\t",				// MOVZX64rm32
			null,				// FpSET_ST0_80
			"movapd\t",				// MOVAPDrr
			"cmovg\t",				// CMOVG16rm
			"orpd\t",				// FsORPDrm
			"cmovg\t",				// CMOVG16rr
			"sarb\t",				// SAR8mi
			"fdivr\t%st(0), ",				// DIV_FrST0
			"pshuflw\t",				// PSHUFLWri
			"comisd\t",				// Int_COMISDrm
			"cmovno\t",				// CMOVNO64rm
			"testw\t",				// TEST16ri
			"movzwl\t",				// MOVZX64rm16
			null,				// ISTT_Fp16m80
			null,				// SUBR_Fp80m32
			"comisd\t",				// Int_COMISDrr
			"mulw\t",				// MUL16m
			"stmxcsr\t",				// STMXCSR
			"movss\t",				// MOVPS2SSmr
			"cmpq\t",				// CMP64ri32
			"movq\t%fs:",				// MOV64FSrm
			"andnps\t",				// FsANDNPSrr
			"testw\t",				// TEST16rm
			"andnps\t",				// FsANDNPSrm
			"testw\t",				// TEST16rr
			"mulw\t",				// MUL16r
			"cmovno\t",				// CMOVNO64rr
			"pmulld\t",				// PMULLDrm_int
			"movzbl\t",				// MOVZX16rr8
			"cmp",				// CMPPSrmi
			null,				// CMOVNBE_Fp32
			"pmulhrsw\t",				// PMULHRSWrm128
			"lahf",				// LAHF
			"movq2dq\t",				// MMX_MOVQ2FR64rr
			"rorl\t",				// ROR32ri
			null,				// IST_Fp16m32
			"pushl\t",				// PUSH32i8
			"sbbw\t",				// SBB16mi8
			null,				// ISTT_Fp16m64
			"movq\t",				// MOV64mr
			"ja\t",				// JA
			null,				// MUL_FpI32m80
			"jb\t",				// JB
			"je\t",				// JE
			"jg\t",				// JG
			"jl\t",				// JL
			"fsubrs\t",				// SUBR_F32m
			null,				// ISTT_Fp16m32
			"pmovzxbq\t",				// PMOVZXBQrm
			"jo\t",				// JO
			"andl\t",				// AND32mi8
			"jp\t",				// JP
			"psubsb\t",				// PSUBSBrr
			"js\t",				// JS
			"unpcklpd\t",				// UNPCKLPDrr
			"fnstcw\t",				// FNSTCW16m
			"psubsb\t",				// PSUBSBrm
			"subsd\t",				// SUBSDrr_Int
			"pshufhw\t",				// PSHUFHWri
			"addpd\t",				// ADDPDrm
			"pabsd\t",				// PABSDrm128
			"pmovmskb\t",				// PMOVMSKBrr
			"movd\t",				// MOVDI2PDIrm
			"addpd\t",				// ADDPDrr
			"pmovzxbq\t",				// PMOVZXBQrr
			"pmaxsw\t",				// MMX_PMAXSWrr
			"movd\t",				// MOVDI2PDIrr
			"pmaxsw\t",				// MMX_PMAXSWrm
			"cmovge\t",				// CMOVGE32rr
			"rolq\t%cl, ",				// ROL64rCL
			"psubw\t",				// PSUBWrm
			"cmovge\t",				// CMOVGE32rm
			"psubw\t",				// PSUBWrr
			null,				// CMOVNBE_Fp64
			"pinsrw\t",				// MMX_PINSRWrmi
			"fldt\t",				// LD_F80m
			"#ATOMAND64 PSEUDO!",				// ATOMAND64
			"pshufd\t",				// PSHUFDri
			"phsubd\t",				// PHSUBDrm64
			"shldq\t%cl, ",				// SHLD64rrCL
			"movsbl\t",				// MOVSX32rm8
			"rorb\t%cl, ",				// ROR8rCL
			"jle\t",				// JLE8
			"unpcklpd\t",				// UNPCKLPDrm
			"fsubp\t",				// SUBR_FPrST0
			"movl\t%gs:",				// GS_MOV32rm
			null,				// MUL_FpI32m64
			"movsbq\t",				// MOVSX64rr8
			"pabsb\t",				// PABSBrm128
			"movd\t",				// MOVDI2SSrr
			"pshufd\t",				// PSHUFDmi
			"rcpss\t",				// RCPSSr_Int
			"psubusb\t",				// PSUBUSBrm
			"btq\t",				// BT64rr
			"incl\t",				// INC32r
			"incl\t",				// INC32m
			null,				// SUB_FpI32m64
			"movd\t",				// MOVDI2SSrm
			null,				// DIVR_Fp32m
			"rorb\t",				// ROR8mi
			null,				// CHS_Fp64
			null,				// DIVR_Fp64m32
			"btq\t",				// BT64ri8
			"movsbq\t",				// MOVSX64rm8
			"imulw\t",				// IMUL16rm
			"ptest \t",				// PTESTrr
			"psubusb\t",				// PSUBUSBrr
			null,				// CMOVNBE_Fp80
			"cmp",				// CMPPSrri
			"ptest \t",				// PTESTrm
			"call\t",				// MOVPC32r
			"pmovsxbq\t",				// PMOVSXBQrm
			null,				// DIV_Fp64
			"imulw\t",				// IMUL16rr
			"rorb\t",				// ROR8m1
			"minss\t",				// MINSSrm_Int
			"pmovsxbq\t",				// PMOVSXBQrr
			"movntq\t",				// MMX_MOVNTQmr
			"subss\t",				// SUBSSrr
			"btw\t",				// BT16mi8
			"subss\t",				// SUBSSrm
			"pcmpeqd\t",				// MMX_PCMPEQDrr
			null,				// SUB_FpI32m80
			"pcmpeqd\t",				// MMX_PCMPEQDrm
			"shrl\t%cl, ",				// SHR32mCL
			"movb\t",				// MOV8rr_NOREX
			null,				// SUB_Fp80m64
			"addw\t",				// ADD16mi8
			null,				// CHS_Fp80
			"cmove\t",				// CMOVE16rm
			"shrdq\t%cl, ",				// SHRD64rrCL
			"bsfq\t",				// BSF64rr
			null,				// DIV_Fp80
			"phminposuw\t",				// PHMINPOSUWrm128
			"movzbl\t",				// MOVZX16rm8
			"addsubps\t",				// ADDSUBPSrm
			"phsubsw\t",				// PHSUBSWrr128
			"clflush\t",				// CLFLUSH
			"roundps\t",				// ROUNDPSm_Int
			"cmove\t",				// CMOVE16rr
			"addq\t",				// ADD64ri8
			null,				// SIN_Fp32
			"imulq\t",				// IMUL64rmi32
			null,				// LD_Fp032
			"shrdw\t",				// SHRD16rri8
			"shlw\t",				// SHL16ri
			"bsfq\t",				// BSF64rm
			"decl\t",				// DEC64_32m
			"cvttss2siq\t",				// Int_CVTTSS2SI64rm
			"addl\t",				// ADD32ri8
			"pslld\t",				// PSLLDrr
			null,				// SUBR_Fp32m
			null,				// DIV_FpI32m80
			"rep;movsb",				// REP_MOVSB
			"rep;movsl",				// REP_MOVSD
			"rorb\t",				// ROR8r1
			null,				// ABS_Fp32
			"addl\t",				// ADD32mr
			"movsbl\t",				// MOVSX32rr8
			"filds\t",				// ILD_F16m
			"blendvpd\t%xmm0, ",				// BLENDVPDrr0
			"psrlq\t",				// MMX_PSRLQri
			"paddb\t",				// MMX_PADDBrm
			"paddb\t",				// MMX_PADDBrr
			"addsubps\t",				// ADDSUBPSrr
			"roll\t",				// ROL32r1
			"pmulhw\t",				// PMULHWrr
			"psrlq\t",				// MMX_PSRLQrm
			"decl\t",				// DEC64_32r
			"rep;movsw",				// REP_MOVSW
			"rep;movsq",				// REP_MOVSQ
			"psrlq\t",				// MMX_PSRLQrr
			"movzwl\t",				// MOVZX64rr16
			"phsubd\t",				// PHSUBDrr64
			"cmovae\t",				// CMOVAE16rm
			"pmulhw\t",				// PMULHWrm
			"subw\t",				// SUB16rm
			"cmovae\t",				// CMOVAE16rr
			"addsd\t",				// ADDSDrm
			"subw\t",				// SUB16rr
			"addsd\t",				// ADDSDrr
			"pslld\t",				// PSLLDrm
			"cvttss2siq\t",				// Int_CVTTSS2SI64rr
			"shufpd\t",				// SHUFPDrri
			"pslld\t",				// PSLLDri
			"sbbb\t",				// SBB8mi
			"cmp",				// CMPSDrr
			"fcmovbe\t",				// CMOVBE_F
			"cmpl\t",				// CMP32mi
			"cmp",				// CMPSDrm
			"fsubl\t",				// SUB_F64m
			"sbbb\t",				// SBB8mr
			"cmpl\t",				// CMP32mr
			"addss\t",				// ADDSSrr_Int
			"bsfw\t",				// BSF16rr
			"movupd\t",				// MOVUPDmr_Int
			"subw\t",				// SUB16ri
			"bsfw\t",				// BSF16rm
			"cmovno\t",				// CMOVNO16rr
			"fucom\t",				// UCOM_Fr
			"fadds\t",				// ADD_F32m
			"cmovno\t",				// CMOVNO16rm
			"paddsw\t",				// MMX_PADDSWrr
			"pcmpistri\t",				// PCMPISTRICrm
			"phaddsw\t",				// PHADDSWrr128
			"addl\t",				// ADD32mi
			"pcmpistri\t",				// PCMPISTRICrr
			"paddsw\t",				// MMX_PADDSWrm
			"adcw\t",				// ADC16ri8
			"xorw\t",				// XOR16ri8
			"lock\n\txaddw\t",				// LXADD16
			"rolw\t%cl, ",				// ROL16rCL
			"movzbl\t",				// MOVZX32rm8
			"phsubd\t",				// PHSUBDrm128
			"por\t",				// MMX_PORrr
			null,				// ABS_Fp64
			"mulpd\t",				// MULPDrm
			"cvtsi2sdq\t",				// Int_CVTSI2SD64rm
			null,				// CHS_Fp32
			"mulpd\t",				// MULPDrr
			"shldw\t",				// SHLD16rri8
			"por\t",				// MMX_PORrm
			"cvtsi2sdq\t",				// Int_CVTSI2SD64rr
			"cmovne\t",				// CMOVNE32rm
			"addl\t",				// ADD32ri
			"lock\n\tcmpxchgl\t",				// LCMPXCHG32
			"cmovne\t",				// CMOVNE32rr
			"addb\t",				// ADD8ri
			"shrl\t%cl, ",				// SHR32rCL
			"movabsq\t",				// MOV64ri
			null,				// IST_Fp16m80
			"cmp",				// Int_CMPSDrr
			"fcmovu\t ",				// CMOVP_F
			"movq\t",				// MOV64rm
			"cmp",				// Int_CMPSDrm
			"addl\t",				// ADD32rm
			"movq\t",				// MOV64rr
			"cvttsd2siq\t",				// CVTTSD2SI64rr
			"rcpps\t",				// RCPPSr_Int
			"addb\t",				// ADD8rm
			null,				// MUL_FpI32m32
			"bswapq\t",				// BSWAP64r
			"addb\t",				// ADD8rr
			"sbbb\t",				// SBB8rm
			"lock\n\txaddl\t",				// LXADD32
			"sbbb\t",				// SBB8rr
			"movmskpd\t",				// MOVMSKPDrr
			"lock\n\tsubl\t",				// LOCK_SUB32mi8
			"movlpd\t",				// MOVLPDmr
			"lock\n\tsubq\t",				// LOCK_SUB64mi8
			"addl\t",				// ADD32rr
			"orl\t",				// OR32mi8
			"roll\t",				// ROL32mi
			"lock\n\txadd\t",				// LXADD64
			"shufpd\t",				// SHUFPDrmi
			"andps\t",				// ANDPSrm
			"andps\t",				// ANDPSrr
			"lock\n\tcmpxchgw\t",				// LCMPXCHG16
			"sbbl\t",				// SBB32ri8
			"fsin",				// SIN_F
			null,				// IST_Fp16m64
			"maxss\t",				// MAXSSrr
			"maskmovq\t",				// MMX_MASKMOVQ64
			null,				// ADD_Fp64m32
			"pmullw\t",				// MMX_PMULLWrm
			"fsqrt",				// SQRT_F
			"cmpl\t",				// CMP32ri
			"psrld\t",				// PSRLDrm
			"psrld\t",				// PSRLDrr
			"sbbb\t",				// SBB8ri
			"pmullw\t",				// MMX_PMULLWrr
			null,				// DBG_LABEL
			null,				// EH_LABEL
			"psrad\t",				// PSRADrr
			"psrld\t",				// PSRLDri
			"roll\t",				// ROL32m1
			null,				// ST_FpP80m
			"pinsrq\t",				// PINSRQrr
			null,				// MOV_Fp8032
			"cvttsd2siq\t",				// CVTTSD2SI64rm
			"pinsrq\t",				// PINSRQrm
			"pand\t",				// MMX_PANDrr
			"btw\t",				// BT16ri8
			"emms",				// MMX_EMMS
			"pand\t",				// MMX_PANDrm
			"rorb\t",				// ROR8ri
			"maxss\t",				// MAXSSrm
			"psrad\t",				// PSRADrm
			"pinsrw\t",				// MMX_PINSRWrri
			"rorq\t",				// ROR64m1
			"psrad\t",				// PSRADri
			"lock\n\tsubw\t",				// LOCK_SUB16mi
			"movups\t",				// MOVUPSmr_Int
			"blendvps\t%xmm0, ",				// BLENDVPSrm0
			"ud2",				// TRAP
			null,				// SUBR_Fp80m64
			"fsubrp\t",				// SUB_FPrST0
			"lock\n\tsubw\t",				// LOCK_SUB16mr
			"pcmpeqd\t",				// MMX_V_SETALLONES
			"popl\t",				// POP32r
			"cmpl\t",				// CMP32rr
			"btw\t",				// BT16rr
			"psignw\t",				// PSIGNWrm128
			"lock\n\tcmpxchgq\t",				// LCMPXCHG64
			"cmpl\t",				// CMP32rm
			null,				// COPY_TO_REGCLASS
			"phaddsw\t",				// PHADDSWrr64
			"xorl\t",				// MOV16r0
			null,				// MUL_Fp64m
			"movslq\t",				// MOVSX64rr32
			null,				// FpSET_ST0_32
			"outl\t%eax, ",				// OUT32ir
			"maxss\t",				// MAXSSrm_Int
			"cmovl\t",				// CMOVL32rm
			null,				// ISTT_Fp32m80
			"addsd\t",				// ADDSDrm_Int
			"testq\t",				// TEST64rm
			null,				// MOV_Fp8064
			"call\t",				// CALLpcrel32
			"cmovl\t",				// CMOVL32rr
			"andq\t",				// AND64ri32
			"psrld\t",				// MMX_PSRLDrr
			"lock\n\tincq\t",				// LOCK_INC64m
			"testq\t",				// TEST64rr
			"andq\t",				// AND64ri8
			"fdivrs\t",				// DIVR_F32m
			"cmovbe\t",				// CMOVBE64rm
			"psrld\t",				// MMX_PSRLDri
			"cmovg\t",				// CMOVG64rr
			"mulq\t",				// MUL64r
			"psrad\t",				// MMX_PSRADrr
			"psrld\t",				// MMX_PSRLDrm
			"psrad\t",				// MMX_PSRADrm
			"movss\t",				// MOVPS2SSrr
			"psrad\t",				// MMX_PSRADri
			"pmaddubsw\t",				// PMADDUBSWrr64
			"movswq\t",				// MOVSX64rr16
			"psignb\t",				// PSIGNBrr64
			"sarb\t",				// SAR8ri
			"negl\t",				// NEG32m
			"cmovbe\t",				// CMOVBE64rr
			"cmovg\t",				// CMOVG64rm
			"mulq\t",				// MUL64m
			"roundsd\t",				// ROUNDSDm_Int
			"haddps\t",				// HADDPSrm
			"cvttps2pi\t",				// Int_CVTTPS2PIrm
			"pmuludq\t",				// PMULUDQrr
			"negl\t",				// NEG32r
			"pmuludq\t",				// PMULUDQrm
			"rolb\t%cl, ",				// ROL8rCL
			null,				// INSERT_SUBREG
			null,				// MOV_Fp8080
			"cvttps2pi\t",				// Int_CVTTPS2PIrr
			"andl\t",				// AND32ri8
			"psrlq\t",				// PSRLQrr
			null,				// ISTT_Fp32m64
			"andpd\t",				// FsANDPDrm
			"haddps\t",				// HADDPSrr
			"minss\t",				// MINSSrm
			"andpd\t",				// FsANDPDrr
			"cmp",				// CMPPDrmi
			"movzbl\t",				// MOVZX64rr8
			"imulw\t",				// IMUL16r
			"imulw\t",				// IMUL16m
			"minss\t",				// MINSSrr
			"psrlq\t",				// PSRLQrm
			"movw\t",				// MOV16mi
			"psrlq\t",				// PSRLQri
			"pcmpestri\t",				// PCMPESTRIrm
			"shldq\t",				// SHLD64mri8
			"movzbl\t",				// MOVZX32rr8
			"pcmpestri\t",				// PCMPESTRIrr
			"movw\t",				// MOV16mr
			"blendvps\t%xmm0, ",				// BLENDVPSrr0
			"phaddw\t",				// PHADDWrr128
			"shrq\t%cl, ",				// SHR64rCL
			"fstpt\t",				// ST_FP80m
			null,				// SUB_Fp64m32
			"pinsrd\t",				// PINSRDrr
			"faddp\t",				// ADD_FPrST0
			"andw\t",				// AND16mi8
			"shrw\t%cl, ",				// SHR16mCL
			null,				// ABS_Fp80
			"movaps\t",				// FsMOVAPSrm
			"movaps\t",				// FsMOVAPSrr
			"ucomiss\t",				// UCOMISSrr
			"paddw\t",				// PADDWrr
			"fldcw\t",				// FLDCW16m
			"fisttpll\t",				// ISTT_FP64m
			"ucomiss\t",				// UCOMISSrm
			"pcmpeqb\t",				// PCMPEQBrm
			"pinsrd\t",				// PINSRDrm
			"paddw\t",				// PADDWrm
			"subw\t",				// SUB16mr
			"pcmpeqb\t",				// PCMPEQBrr
			"xorps\t",				// FsXORPSrr
			"paddw\t",				// MMX_PADDWrm
			"subw\t",				// SUB16mi
			"paddw\t",				// MMX_PADDWrr
			"int\t",				// INT
			"cvtsi2ssq\t",				// Int_CVTSI2SS64rm
			"roll\t",				// ROL32ri
			"subb\t",				// SUB8mr
			"minss\t",				// MINSSrr_Int
			"xorps\t",				// FsXORPSrm
			"shldl\t",				// SHLD32rri8
			"movsd\t",				// MOVLPDrr
			"subb\t",				// SUB8mi
			"addq\t",				// ADD64ri32
			"movlpd\t",				// MOVLPDrm
			"cvtsi2ssq\t",				// Int_CVTSI2SS64rr
			"cvtsi2ss\t",				// CVTSI2SSrm
			"#PCMPESTRM128rr PSEUDO!",				// PCMPESTRM128REG
			"sqrtsd\t",				// SQRTSDr_Int
			"cvtsi2sd\t",				// Int_CVTSI2SDrr
			"cvtsi2sd\t",				// Int_CVTSI2SDrm
			"phsubw\t",				// PHSUBWrr64
			"movntps\t",				// MOVNTPSmr
			null,				// ISTT_Fp32m32
			"cvtsi2ss\t",				// CVTSI2SSrr
			"lock\n\tcmpxchg8b\t",				// LCMPXCHG8B
			null,				// LD_Fp80m
			"phsubsw\t",				// PHSUBSWrm128
			"minsd\t",				// MINSDrm_Int
			"pcmpeqd\t",				// V_SETALLONES
			"cvtpi2ps\t",				// Int_CVTPI2PSrr
			"pushf",				// PUSHFD
			"cmovno\t",				// CMOVNO32rm
			"add\t",				// ADD16i16
			"cvtpi2pd\t",				// MMX_CVTPI2PDrr
			"sqrtps\t",				// SQRTPSr_Int
			"pextrq\t",				// PEXTRQmr
			"#ATOMAND6432 PSEUDO!",				// ATOMAND6432
			"shldl\t",				// SHLD32mri8
			"cvtpi2ps\t",				// Int_CVTPI2PSrm
			null,				// SUBR_FpI16m80
			"fistl\t",				// IST_F32m
			"orw\t",				// OR16mi8
			"pavgw\t",				// MMX_PAVGWrm
			"psignb\t",				// PSIGNBrm128
			"sysret",				// SYSRET
			"cmovno\t",				// CMOVNO32rr
			"cvtpi2pd\t",				// MMX_CVTPI2PDrm
			null,				// SUB_Fp64m
			"pavgw\t",				// MMX_PAVGWrr
			null,				// FpSET_ST1_80
			"blendpd\t",				// BLENDPDrmi
			"cmovo\t",				// CMOVO16rr
			"rolq\t%cl, ",				// ROL64mCL
			null,				// UCOM_Fpr32
			"movsbl\t",				// MOVSX16rm8
			null,				// CMOVB_Fp32
			null,				// CMOVNP_Fp64
			"cvtpd2pi\t",				// MMX_CVTPD2PIrm
			"cvtsd2si\t",				// Int_CVTSD2SIrr
			"cvtpd2pi\t",				// MMX_CVTPD2PIrr
			"cvtsd2si\t",				// Int_CVTSD2SIrm
			"movswq\t",				// MOVSX64rm16
			"shlq\t",				// SHL64mi
			"pushf",				// PUSHFQ
			null,				// UCOM_Fpr64
			"imulw\t",				// IMUL16rmi
			"btq\t",				// BT64mi8
			"sarl\t",				// SAR32r1
			"jmpq\t*",				// JMP64m
			"cvttss2siq\t",				// CVTTSS2SI64rm
			null,				// SUB_Fp80
			"jmpq\t*",				// JMP64r
			"cvtsi2ss\t",				// Int_CVTSI2SSrr
			"cvttss2siq\t",				// CVTTSS2SI64rr
			"maskmovdqu\t",				// MASKMOVDQU64
			"movq\t%gs:",				// MOV64GSrm
			"cvtsi2ss\t",				// Int_CVTSI2SSrm
			"movsd\t",				// MOVSDmr
			"subq\t",				// SUB64mi32
			"cmovo\t",				// CMOVO16rm
			"shrb\t",				// SHR8m1
			null,				// ST_FpP32m
			"shlq\t%cl, ",				// SHL64mCL
			"rorw\t%cl, ",				// ROR16rCL
			"sbbl\t",				// SBB32mr
			"cvtps2pi\t",				// Int_CVTPS2PIrr
			"cvtps2pi\t",				// Int_CVTPS2PIrm
			"xorl\t",				// XOR32mr
			"sbbl\t",				// SBB32mi
			"sqrtpd\t",				// SQRTPDr_Int
			"shlq\t",				// SHL64m1
			"maxsd\t",				// MAXSDrm_Int
			null,				// CMOVNP_Fp80
			"packusdw\t",				// PACKUSDWrm
			"xorl\t",				// XOR32mi
			"andps\t",				// FsANDPSrm
			"packusdw\t",				// PACKUSDWrr
			"andps\t",				// FsANDPSrr
			"pextrd\t",				// PEXTRDrr
			"ret",				// RET
			"bsfl\t",				// BSF32rm
			"pcmpestri\t",				// PCMPESTRIZrm
			"testq\t",				// TEST64mi32
			"movsbl\t",				// MOVSX16rr8
			"#TC_RETURN ",				// TCRETURNri
			null,				// CMOVNP_Fp32
			"prefetcht0\t",				// PREFETCHT0
			"prefetcht2\t",				// PREFETCHT2
			"fisubrs\t",				// SUBR_FI16m
			"prefetcht1\t",				// PREFETCHT1
			"pcmpestri\t",				// PCMPESTRIZrr
			null,				// FpSET_ST1_32
			"bsfl\t",				// BSF32rr
			null,				// UCOM_Fpr80
			"movupd\t",				// MOVUPDmr
			"popq\t",				// POP64r
			"unpckhpd\t",				// UNPCKHPDrm
			"pextrq\t",				// PEXTRQrr
			"phsubw\t",				// PHSUBWrm64
			"unpckhpd\t",				// UNPCKHPDrr
			"idivb\t",				// IDIV8r
			"sarl\t",				// SAR32ri
			"idivl\t",				// IDIV32r
			"idivl\t",				// IDIV32m
			"rorb\t%cl, ",				// ROR8mCL
			"cmovae\t",				// CMOVAE64rr
			"negb\t",				// NEG8r
			null,				// COS_Fp80
			"fadd\t%st(0), ",				// ADD_FrST0
			"pshufb\t",				// PSHUFBrm128
			"sarb\t%cl, ",				// SAR8rCL
			null,				// CMOVNB_Fp80
			"negb\t",				// NEG8m
			"movhpd\t",				// MOVHPDmr
			"idivb\t",				// IDIV8m
			"#ATOMAND8 PSEUDO!",				// ATOMAND8
			"setae\t",				// SETAEm
			"cmovbe\t",				// CMOVBE16rm
			"setae\t",				// SETAEr
			"cmovae\t",				// CMOVAE64rm
			"movl\t",				// MOV64ri64i32
			"cmovbe\t",				// CMOVBE16rr
			"divw\t",				// DIV16m
			"pxor\t",				// PXORrm
			"divw\t",				// DIV16r
			"pxor\t",				// PXORrr
			"sarq\t%cl, ",				// SAR64rCL
			"psubb\t",				// MMX_PSUBBrr
			"sbbq\t",				// SBB64ri32
			null,				// COS_Fp64
			"imulw\t",				// IMUL16rmi8
			"ftst",				// TST_F
			null,				// FpSET_ST1_64
			"psubb\t",				// MMX_PSUBBrm
			"inb\t",				// IN8ri
			"psubusb\t",				// MMX_PSUBUSBrm
			null,				// ADD_FpI16m64
			"cvttsd2si\t",				// Int_CVTTSD2SIrr
			"movss\t",				// MOVLSS2PSrr
			"psubusb\t",				// MMX_PSUBUSBrr
			"phsubw\t",				// PHSUBWrm128
			"cmovp\t",				// CMOVP32rr
			"cvttsd2si\t",				// Int_CVTTSD2SIrm
			"xorl\t",				// XOR32rr
			"cmovp\t",				// CMOVP32rm
			"psignw\t",				// PSIGNWrr128
			"inb\t%dx, %al",				// IN8rr
			"xorl\t",				// XOR32rm
			"xorl\t",				// XOR32ri
			"psubw\t",				// MMX_PSUBWrm
			"decl\t",				// DEC32r
			"movsd\t",				// MOVZSD2PDrm
			"pushl\t",				// PUSH32r
			"movl\t",				// MOV32ri
			"outb\t%al, %dx",				// OUT8rr
			"movl\t",				// MOV32rm
			"movntdqa\t",				// MOVNTDQArm
			"movl\t",				// MOV32rr
			"inw\t",				// IN16ri
			"decl\t",				// DEC32m
			"pabsd\t",				// PABSDrm64
			"inw\t%dx, %ax",				// IN16rr
			"pcmpgtd\t",				// MMX_PCMPGTDrr
			"decb\t",				// DEC8r
			"psllq\t",				// PSLLQri
			"adcw\t",				// ADC16mi
			"monitor",				// MONITOR
			"decb\t",				// DEC8m
			"psllq\t",				// PSLLQrr
			"movnti\t",				// MOVNTImr
			"psllq\t",				// PSLLQrm
			"pcmpgtd\t",				// MMX_PCMPGTDrm
			"adcw\t",				// ADC16mr
			"fdiv\t%st(0), ",				// DIVR_FrST0
			"xorw\t",				// XOR16mi8
			"movb\t",				// MOV8mr_NOREX
			null,				// COS_Fp32
			"bsrw\t",				// BSR16rm
			"bsrw\t",				// BSR16rr
			null,				// DIVR_FpI32m80
			"sqrtss\t",				// SQRTSSm
			"pavgb\t",				// MMX_PAVGBrm
			"btl\t",				// BT32rr
			"pavgb\t",				// MMX_PAVGBrr
			null,				// ADD_FpI16m32
			"cmova\t",				// CMOVA32rr
			"xorl\t",				// MOV32r0
			"cmova\t",				// CMOVA32rm
			"sqrtss\t",				// SQRTSSr
			"shrdq\t",				// SHRD64rri8
			"xorq\t",				// XOR64ri8
			"fiaddl\t",				// ADD_FI32m
			"cvtsi2sdq\t",				// CVTSI2SD64rm
			"pslld\t",				// MMX_PSLLDrr
			"cvtsi2sdq\t",				// CVTSI2SD64rr
			"pslld\t",				// MMX_PSLLDrm
			"pmaxud\t",				// PMAXUDrr
			"##FP_REG_KILL",				// FP_REG_KILL
			"pslld\t",				// MMX_PSLLDri
			"xorl\t",				// XOR32ri8
			null,				// DIVR_FpI32m64
			"fmuls\t",				// MUL_F32m
			"punpckldq\t",				// PUNPCKLDQrr
			"punpckldq\t",				// PUNPCKLDQrm
			"fmul\t",				// MUL_FST0r
			"movhpd\t",				// MOVHPDrm
			"packuswb\t",				// MMX_PACKUSWBrr
			"mpsadbw\t",				// MPSADBWrri
			"psignw\t",				// PSIGNWrr64
			"phaddw\t",				// PHADDWrm64
			"minsd\t",				// MINSDrr_Int
			"fucompp",				// UCOM_FPPr
			"packuswb\t",				// MMX_PACKUSWBrm
			"rorq\t%cl, ",				// ROR64mCL
			"movsd\t",				// MOVSDrm
			"rsqrtps\t",				// RSQRTPSr_Int
			null,				// LD_Fp132
			"movsd\t",				// MOVSDrr
			"mulb\t",				// MUL8r
			"divpd\t",				// DIVPDrm
			"mulb\t",				// MUL8m
			"psrldq\t",				// PSRLDQri
			"divpd\t",				// DIVPDrr
			"fsubrl\t",				// SUBR_F64m
			"outl\t%eax, %dx",				// OUT32rr
			"pabsw\t",				// PABSWrm64
			"cvtss2si\t",				// Int_CVTSS2SIrm
			"cvtss2si\t",				// Int_CVTSS2SIrr
			"sbbl\t",				// SBB32rr
			"movl\t",				// MOV32mi
			"lock\n\tcmpxchgb\t",				// LCMPXCHG8
			"fstl\t",				// ST_F64m
			"sbbl\t",				// SBB32rm
			"cmovle\t",				// CMOVLE32rm
			"pextrd\t",				// PEXTRDmr
			null,				// LD_Fp164
			"sbbl\t",				// SBB32ri
			"psubw\t",				// MMX_PSUBWrr
			"adcw\t",				// ADC16ri
			"pavgb\t",				// PAVGBrr
			"movl\t",				// MOV32mr
			"cmovle\t",				// CMOVLE32rr
			"#ATOMNAND8 PSEUDO!",				// ATOMNAND8
			"ja\t",				// JA8
			"adcw\t",				// ADC16rr
			"pavgb\t",				// PAVGBrm
			"adcw\t",				// ADC16rm
			"#CMOV_V2F64 PSEUDO!",				// CMOV_V2F64
			"jae\t",				// JAE
			"pmulld\t",				// PMULLDrr
			null,				// ADD_FpI16m80
			null,				// DIVR_FpI32m32
			"pmulld\t",				// PMULLDrm
			"shldq\t",				// SHLD64rri8
			"movslq\t",				// MOVSX64rm32
			"cmovg\t",				// CMOVG32rm
			"jb\t",				// JB8
			"mpsadbw\t",				// MPSADBWrmi
			"cmovg\t",				// CMOVG32rr
			"roundsd\t",				// ROUNDSDr_Int
			"#ATOMAND16 PSEUDO!",				// ATOMAND16
			null,				// IST_Fp64m80
			"pcmpgtq\t",				// PCMPGTQrr
			"sarb\t%cl, ",				// SAR8mCL
			"jbe\t",				// JBE
			"pcmpgtq\t",				// PCMPGTQrm
			"fidivrl\t",				// DIVR_FI32m
			"rorl\t",				// ROR32m1
			"#ATOMNAND64 PSEUDO!",				// ATOMNAND64
			null,				// LD_Fp064
			"packsswb\t",				// PACKSSWBrr
			"blendps\t",				// BLENDPSrri
			null,				// FpGET_ST1_64
			"pmovsxwq\t",				// PMOVSXWQrm
			"sqrtsd\t",				// SQRTSDm_Int
			"fimuls\t",				// MUL_FI16m
			"lock\n\tincw\t",				// LOCK_INC16m
			"pmovsxwq\t",				// PMOVSXWQrr
			null,				// FpGET_ST1_80
			"andq\t",				// AND64mi8
			"cltq",				// CDQE
			"movq\t",				// MOVZQI2PQIrm
			"fstps\t",				// ST_FP32m
			"andw\t",				// AND16rm
			"movd\t",				// MOVZQI2PQIrr
			"andw\t",				// AND16ri
			"andw\t",				// AND16rr
			"pmaxsb\t",				// PMAXSBrm
			"pshufb\t",				// PSHUFBrr64
			"movd\t",				// MOV64toPQIrr
			"leave",				// LEAVE64
			"#ATOMMAX64 PSEUDO!",				// ATOMMAX64
			"rorl\t%cl, ",				// ROR32mCL
			null,				// DIV_Fp32
			"pmaxsb\t",				// PMAXSBrr
			"jmp\t",				// JMP8
			null,				// IST_Fp32m32
			"psubb\t",				// PSUBBrm
			"shlw\t",				// SHL16mi
			"sqrtpd\t",				// SQRTPDm
			"psubb\t",				// PSUBBrr
			"setns\t",				// SETNSm
			"xorps\t",				// V_SET0
			"sqrtpd\t",				// SQRTPDr
			"rorl\t",				// ROR32mi
			"cvttss2si\t",				// CVTTSS2SIrr
			"shrq\t%cl, ",				// SHR64mCL
			null,				// LD_Fp080
			"cvttss2si\t",				// CVTTSS2SIrm
			"je\t",				// JE8
			"setns\t",				// SETNSr
			null,				// DIVR_Fp80m32
			"movd\t",				// MMX_MOVD64mr
			"extractps\t",				// EXTRACTPSrr
			"palignr\t",				// PALIGNR64rm
			"int 3",				// INT3
			"pminub\t",				// MMX_PMINUBrr
			"palignr\t",				// PALIGNR64rr
			"pminub\t",				// MMX_PMINUBrm
			"pmovsxbd\t",				// PMOVSXBDrm
			"pmaxud\t",				// PMAXUDrm
			"shrw\t",				// SHR16m1
			"pmovsxbd\t",				// PMOVSXBDrr
			null,				// ST_Fp64m32
			null,				// CMOVP_Fp80
			"shrw\t",				// SHR16mi
			"cvtpd2dq\t",				// Int_CVTPD2DQrr
			"cvtpd2dq\t",				// Int_CVTPD2DQrm
			"pavgw\t",				// PAVGWrm
			"pavgw\t",				// PAVGWrr
			null,				// CMOVE_Fp80
			"#ADJCALLSTACKUP",				// ADJCALLSTACKUP64
			"jg\t",				// JG8
			"divsd\t",				// DIVSDrm
			"incw\t",				// INC64_16r
			"shlw\t",				// SHL16m1
			"cmovns\t",				// CMOVNS64rm
			null,				// IST_Fp32m64
			"jge\t",				// JGE
			"incw\t",				// INC64_16m
			"punpckhbw\t",				// PUNPCKHBWrr
			"psignb\t",				// PSIGNBrm64
			"punpckhbw\t",				// PUNPCKHBWrm
			"movdq2q\t",				// MMX_MOVDQ2Qrr
			"cmovns\t",				// CMOVNS64rr
			"blendps\t",				// BLENDPSrmi
			"#ATOMNAND16 PSEUDO!",				// ATOMNAND16
			"lock\n\taddq\t",				// LOCK_ADD64mi8
			null,				// DIVR_FpI16m80
			"psllq\t",				// MMX_PSLLQri
			"hsubpd\t",				// HSUBPDrr
			"pushq\t",				// PUSH64i8
			"imull\t",				// IMUL32rri
			"#ATOMAND32 PSEUDO!",				// ATOMAND32
			"hsubpd\t",				// HSUBPDrm
			"lock\n\tdecb\t",				// LOCK_DEC8m
			"movd\t",				// MMX_MOVD64rm
			"movd\t",				// MMX_MOVD64rr
			"outb\t%al, ",				// OUT8ir
			"addq\t",				// ADD64mi8
			"movddup\t",				// MOVDDUPrm
			"movss\t",				// MOVSS2PSrm
			"movddup\t",				// MOVDDUPrr
			"sarl\t%cl, ",				// SAR32mCL
			"cmovge\t",				// CMOVGE64rm
			"setno\t",				// SETNOr
			"##FP32_TO_INT16_IN_MEM PSEUDO!",				// FP32_TO_INT16_IN_MEM
			"subps\t",				// SUBPSrr
			"pmovzxbw\t",				// PMOVZXBWrm
			"phaddd\t",				// PHADDDrr64
			"cmovge\t",				// CMOVGE64rr
			"faddl\t",				// ADD_F64m
			"pmovzxbw\t",				// PMOVZXBWrr
			"divsd\t",				// DIVSDrr
			"setno\t",				// SETNOm
			null,				// IST_Fp32m80
			"subps\t",				// SUBPSrm
			"movss\t",				// MOVSS2PSrr
			"#ATOMNAND32 PSEUDO!",				// ATOMNAND32
			"pcmpestri\t",				// PCMPESTRIArr
			"minps\t",				// MINPSrm
			"minps\t",				// MINPSrr
			"psllq\t",				// MMX_PSLLQrr
			"rorl\t",				// ROR32r1
			"setnp\t",				// SETNPr
			"setnp\t",				// SETNPm
			"psllq\t",				// MMX_PSLLQrm
			"pcmpestri\t",				// PCMPESTRIArm
			"shrb\t",				// SHR8ri
			"cvtdq2ps\t",				// Int_CVTDQ2PSrr
			"pmaxsw\t",				// PMAXSWrm
			"roundpd\t",				// ROUNDPDr_Int
			"movq\t",				// MMX_MOVQ64mr
			"cvtdq2ps\t",				// Int_CVTDQ2PSrm
			"cmovb\t",				// CMOVB16rm
			"shrw\t",				// SHR16r1
			null,				// ST_Fp80m32
			"pmaxsw\t",				// PMAXSWrr
			"cmovb\t",				// CMOVB16rr
			null,				// SUB_FpI16m64
			"cvtss2siq\t",				// Int_CVTSS2SI64rm
			"fisttpl\t",				// ISTT_FP32m
			"shrw\t",				// SHR16ri
			"cvtss2siq\t",				// Int_CVTSS2SI64rr
			"cmove\t",				// CMOVE32rr
			"mwait",				// MWAIT
			"adcq\t",				// ADC64mr
			"fsubr\t",				// SUBR_FST0r
			"cmpq\t",				// CMP64mr
			"jl\t",				// JL8
			"addl\t",				// ADD32mi8
			"cmove\t",				// CMOVE32rm
			null,				// DIVR_FpI16m64
			"rcpss\t",				// RCPSSm_Int
			"cvtsi2ssq\t",				// CVTSI2SS64rm
			"jle\t",				// JLE
			"pcmpgtd\t",				// PCMPGTDrr
			"cvttpd2pi\t",				// Int_CVTTPD2PIrm
			"shlq\t",				// SHL64ri
			null,				// CMOVP_Fp64
			"xorl\t",				// XOR32mi8
			"roll\t%cl, ",				// ROL32mCL
			"cvtsi2ssq\t",				// CVTSI2SS64rr
			"maxpd\t",				// MAXPDrr
			"incb\t",				// INC8r
			"mulsd\t",				// MULSDrm
			"mulsd\t",				// MULSDrr
			"divq\t",				// DIV64r
			"shldl\t%cl, ",				// SHLD32rrCL
			null,				// DIVR_FpI16m32
			"incb\t",				// INC8m
			"rorw\t%cl, ",				// ROR16mCL
			"shrdw\t%cl, ",				// SHRD16mrCL
			"maxpd\t",				// MAXPDrm
			"cvttpd2pi\t",				// Int_CVTTPD2PIrr
			"movss\t",				// MOVZSS2PSrm
			"phaddw\t",				// PHADDWrr64
			null,				// SUB_FpI16m80
			"divq\t",				// DIV64m
			"orq\t",				// OR64ri8
			"jmp\t",				// JMP
			"psignw\t",				// PSIGNWrm64
			"imulq\t",				// IMUL64rr
			"pmaddubsw\t",				// PMADDUBSWrr128
			"movd\t",				// MOVPQIto64rr
			"#ADJCALLSTACKUP",				// ADJCALLSTACKUP32
			null,				// SUBR_FpI16m32
			null,				// ST_Fp80m64
			"pcmpgtd\t",				// PCMPGTDrm
			"imulq\t",				// IMUL64rm
			"#TC_RETURN ",				// TCRETURNdi
			"jne\t",				// JNE
			"setne\t",				// SETNEm
			"cmpq\t",				// CMP64rr
			"imulq\t",				// IMUL64rri32
			null,				// CMOVB_Fp64
			"sbbl\t",				// SBB32mi8
			"jno\t",				// JNO
			"setne\t",				// SETNEr
			"minps\t",				// MINPSrm_Int
			"blendpd\t",				// BLENDPDrri
			"jnp\t",				// JNP
			"jns\t",				// JNS
			"pminsd\t",				// PMINSDrm
			"pminsd\t",				// PMINSDrr
			"jo\t",				// JO8
			"pminuw\t",				// PMINUWrm
			null,				// IST_Fp64m32
			"sarq\t%cl, ",				// SAR64mCL
			"sbbq\t",				// SBB64mi8
			"andw\t",				// AND16mr
			"fsub\t",				// SUB_FST0r
			"shrb\t",				// SHR8mi
			"rolb\t",				// ROL8mi
			"adcq\t",				// ADC64rm
			"jp\t",				// JP8
			"imull\t",				// IMUL32rmi
			"adcq\t",				// ADC64rr
			"andnps\t",				// ANDNPSrr
			"cmpq\t",				// CMP64rm
			"andnps\t",				// ANDNPSrm
			"phminposuw\t",				// PHMINPOSUWrr128
			null,				// FpGET_ST1_32
			null,				// SUB_FpI16m32
			"notl\t",				// NOT32m
			null,				// IST_Fp64m64
			"imulb\t",				// IMUL8r
			"shrb\t",				// SHR8r1
			"pslldq\t",				// PSLLDQri
			"imulb\t",				// IMUL8m
			null,				// DIVR_Fp80m64
			"movupd\t",				// MOVUPDrm
			null,				// CMOVB_Fp80
			"movupd\t",				// MOVUPDrr
			"extractps\t",				// EXTRACTPSmr
			"psignd\t",				// PSIGNDrm64
			"btl\t",				// BT32mi8
			"sarl\t",				// SAR32mi
			null,				// SUBR_FpI16m64
			"cmovs\t",				// CMOVS16rm
			"andw\t",				// AND16mi
			"prefetchnta\t",				// PREFETCHNTA
			"cmovs\t",				// CMOVS16rr
			"ucomisd\t",				// Int_UCOMISDrm
			"fistpl\t",				// IST_FP32m
			"ucomisd\t",				// Int_UCOMISDrr
			"pminuw\t",				// PMINUWrr
			"rolb\t",				// ROL8m1
			null,				// CMOVP_Fp32
			"sarl\t",				// SAR32m1
			"flds\t",				// LD_F32m
			"movshdup\t",				// MOVSHDUPrm
			"cmovo\t",				// CMOVO64rm
			"movshdup\t",				// MOVSHDUPrr
			"mull\t",				// MUL32r
			"notl\t",				// NOT32r
			"mull\t",				// MUL32m
			"orl\t",				// OR32ri8
			"cmovo\t",				// CMOVO64rr
	};

	public X86GenATTAsmPrinter(OutputStream os, TargetMachine tm)
	{
		super(os, tm);
	}

	@Override
	public boolean printInstruction(MachineInstr mi)
	{
		// emit the opcode for the instruction.
		String asmStr = opStrs[mi.getOpcode()];
		if (asmStr != null)

			os.print(asmStr);

		switch (mi.getOpcode())
		{
			default: return false;
			case INLINEASM: printInlineAsm(mi); break;
			case CMOVS64rm:
				os.print("cmovs\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSDrr64:
				os.print("pabsd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);
				break;
			case AND8rm:
				os.print("andb\t");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);
				os.print("\n");
				break;
			case ROL8ri:
				os.print("rolb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND8ri:
				os.print("andb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JS8:
				os.print("js\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP16mi8:
				os.print("cmpw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL32ri:
				os.print("shll\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL16mCL:
				os.print("shlw\t%cl, ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP32ri8:
				os.print("cmpl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JAE8:
				os.print("jae\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL_FPrST0:
				os.print("fmulp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR64mi8:
				os.print("xorq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRM128MEM:
				os.print("#PCMPISTRM128rm PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case AND8rr:
				os.print("andb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RCPPSm_Int:
				os.print("rcpps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB64mr:
				os.print("sbbq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PACKUSWBrr:
				os.print("packuswb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TCRETURNdi64:
				os.print("#TC_RETURN ");
				printOperand(mi, 0);
				os.print(' ');
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVS64rr:
				os.print("cmovs\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDQrr:
				os.print("paddq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL32rCL:
				os.print("shll\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DPPDrmi:
				os.print("dppd\t");
				printOperand(mi, 7);
				os.print(", ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DWARF_LOC:
				os.print(".loc\t");
				printOperand(mi, 2);
				os.print(' ');
				printOperand(mi, 0);
				os.print(' ');
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVSDrm_Int:
				os.print("divsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL8r1:
				os.print("rolb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PACKUSWBrm:
				os.print("packuswb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP32_TO_INT32_IN_MEM:
				os.print("##FP32_TO_INT32_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SAR64m1:
				os.print("sarq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULSSrr_Int:
				os.print("mulss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ST_F32m:
				os.print("fsts\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC32mi8:
				os.print("adcl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case HADDPDrr:
				os.print("haddpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case HADDPDrm:
				os.print("haddpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKLQDQrr:
				os.print("punpcklqdq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXSSrr_Int:
				os.print("maxss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL16mi:
				os.print("rolw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR64rCL:
				os.print("rorq\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVAE32rr:
				os.print("cmovae\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNP64rr:
				os.print("cmovnp\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LD_F64m:
				os.print("fldl\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSADBWrr:
				os.print("psadbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVQ64rr:
				os.print("movq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNP64rm:
				os.print("cmovnp\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPEQWrr:
				os.print("pcmpeqw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVAPSmr:
				os.print("movaps\t");
				printOperand(mi, 5);
				os.print(", ");
				printf128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPEQWrm:
				os.print("pcmpeqw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR64ri32:
				os.print("xorq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND64mr:
				os.print("andq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVAE32rm:
				os.print("cmovae\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSADBWrm:
				os.print("psadbw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL64rmi8:
				os.print("imulq\t");
				printOperand(mi, 6);
				os.print(", ");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLWrr:
				os.print("psrlw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP16mi:
				os.print("cmpw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDSWrm128:
				os.print("phaddsw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXDQrm:
				os.print("pmovzxdq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV_FST0r:
				os.print("fdiv\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL32r:
				os.print("imull\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXDQrr:
				os.print("pmovzxdq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsANDNPDrr:
				os.print("andnpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDUSBrr:
				os.print("paddusb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVAPSrm:
				os.print("movaps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPGTWrm:
				os.print("pcmpgtw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVQI2PQIrm:
				os.print("movq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsANDNPDrm:
				os.print("andnpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL32m:
				os.print("imull\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVQ64rm:
				os.print("movq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPGTWrr:
				os.print("pcmpgtw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVAPSrr:
				os.print("movaps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP16mr:
				os.print("cmpw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLWri:
				os.print("psrlw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETBEr:
				os.print("setbe\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD16mrCL:
				os.print("shldw\t%cl, ");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDUSBrm:
				os.print("paddusb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DPPDrri:
				os.print("dppd\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL32mi:
				os.print("shll\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLWrm:
				os.print("psrlw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETBEm:
				os.print("setbe\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR64m1:
				os.print("shrq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVGE16rm:
				os.print("cmovge\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKLQDQrm:
				os.print("punpcklqdq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC64mi8:
				os.print("adcq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBDrr128:
				os.print("phsubd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL16m1:
				os.print("rolw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVLE64rr:
				os.print("cmovle\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR64mi:
				os.print("sarq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRAWrr:
				os.print("psraw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRAWrm:
				os.print("psraw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKLDQrm:
				os.print("punpckldq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CRC32r32:
				os.print("crc32 \t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRAWri:
				os.print("psraw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVGE16rr:
				os.print("cmovge\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVLE64rm:
				os.print("cmovle\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case COS_F:
				os.print("fcos");
				emitComments(mi);

				os.print("\n");
				break;
			case PADDQrm:
				os.print("paddq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLHPSrr:
				os.print("movlhps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB32mi8:
				os.print("subl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNE16rm:
				os.print("cmovne\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINUBrm:
				os.print("pminub\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB64rm:
				os.print("sbbq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNE16rr:
				os.print("cmovne\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINUBrr:
				os.print("pminub\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CRC32r16:
				os.print("crc32 \t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB64rr:
				os.print("sbbq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKHBWrm:
				os.print("punpckhbw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL32m1:
				os.print("shll\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND64rr:
				os.print("andq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND64rm:
				os.print("andq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKHBWrr:
				os.print("punpckhbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ORPDrr:
				os.print("orpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXDQrr:
				os.print("pmovsxdq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ORPDrm:
				os.print("orpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXDQrm:
				os.print("pmovsxdq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR64mi:
				os.print("shrq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTSSr_Int:
				os.print("sqrtss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JNE8:
				os.print("jne\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULHRSWrr64:
				os.print("pmulhrsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB_FI16m:
				os.print("fisubs\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMULUDQrm:
				os.print("pmuludq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVQ2DQrr:
				os.print("movq2dq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMULUDQrr:
				os.print("pmuludq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR32rCL:
				os.print("rorl\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBSDrr:
				os.print("subsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PANDNrm:
				os.print("pandn\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR64mr:
				os.print("xorq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB32mr:
				os.print("subl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PANDNrr:
				os.print("pandn\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ILD_F32m:
				os.print("fildl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL_F64m:
				os.print("fmull\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR64ri:
				os.print("sarq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBSDrm:
				os.print("subsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDDrm64:
				os.print("phaddd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMULHUWrm:
				os.print("pmulhuw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSBrr64:
				os.print("pabsb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMULHUWrr:
				os.print("pmulhuw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDPSrm:
				os.print("addps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL64rCL:
				os.print("shlq\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV_FI16m:
				os.print("fidivs\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADJCALLSTACKDOWN32:
				os.print("#ADJCALLSTACKDOWN");
				emitComments(mi);

				os.print("\n");
				break;
			case XCHG64rm:
				os.print("xchg\t");
				printOperand(mi, 6);
				os.print(", ");
				printi64mem(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC8ri:
				os.print("adcb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSLDUPrr:
				os.print("movsldup\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL32rri8:
				os.print("imull\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CALL64r:
				os.print("call\t*");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKHWDrr:
				os.print("punpckhwd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPS2PDrr:
				os.print("cvtps2pd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR64r1:
				os.print("sarq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CALL64m:
				os.print("call\t*");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKHWDrm:
				os.print("punpckhwd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC8rr:
				os.print("adcb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTPDm_Int:
				os.print("sqrtpd\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB32mi:
				os.print("subl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IDIV64r:
				os.print("idivq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPS2PDrm:
				os.print("cvtps2pd\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSLDUPrm:
				os.print("movsldup\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IDIV64m:
				os.print("idivq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC8rm:
				os.print("adcb\t");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TLS_addr64:
				os.print(".byte\t0x66; leaq\t");
				printlea64mem(mi, 0);
				os.print("(%rip), %rdi; .word\t0x6666; rex64; call\t__tls_get_addr@PLT");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPEQBrr:
				os.print("pcmpeqb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR64ri32:
				os.print("orq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR64r1:
				os.print("shrq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPEQBrm:
				os.print("pcmpeqb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKLDQrr:
				os.print("punpckldq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXWDrm:
				os.print("pmovsxwd\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXWDrr:
				os.print("pmovsxwd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOT8m:
				os.print("notb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOOPL:
				os.print("nopl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOT8r:
				os.print("notb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR16ri8:
				os.print("orw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP16rm:
				os.print("cmpw\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsORPSrr:
				os.print("orps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTSD2SI64rm:
				os.print("cvttsd2siq\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB64ri8:
				os.print("subq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP16ri:
				os.print("cmpw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP16rr:
				os.print("cmpw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD32mrCL:
				os.print("shldl\t%cl, ");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVE_F:
				os.print("fcmove\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case FsORPSrm:
				os.print("orps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTSD2SI64rr:
				os.print("cvttsd2siq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UNPCKLPSrm:
				os.print("unpcklps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADJCALLSTACKDOWN64:
				os.print("#ADJCALLSTACKDOWN");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PANDNrm:
				os.print("pandn\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case WINCALL64m:
				os.print("call\t*");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST32mi:
				os.print("testl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case WINCALL64r:
				os.print("call\t*");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR64ri:
				os.print("shrq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMOR8:
				os.print("#ATOMOR8 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_DEC16m:
				os.print("lock\n\tdecw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB32rm:
				os.print("subl\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND8mr:
				os.print("andb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB32rr:
				os.print("subl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC8mr:
				os.print("adcb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL16ri:
				os.print("rolw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRIZrm:
				os.print("pcmpistri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UNPCKLPSrr:
				os.print("unpcklps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC8mi:
				os.print("adcb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB32ri:
				os.print("subl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRIZrr:
				os.print("pcmpistri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RSQRTSSr_Int:
				os.print("rsqrtss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVB64rr:
				os.print("cmovb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DPPSrmi:
				os.print("dpps\t");
				printOperand(mi, 7);
				os.print(", ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVB64rm:
				os.print("cmovb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC64r:
				os.print("decq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSUBPDrr:
				os.print("addsubpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMMAX16:
				os.print("#ATOMMAX16 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PUSH64r:
				os.print("pushq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD32i32:
				os.print("add\t");
				printOperand(mi, 0);
				os.print(", %eax");
				emitComments(mi);

				os.print("\n");
				break;
			case JCXZ8:
				os.print("jcxz\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSUBPDrm:
				os.print("addsubpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC64m:
				os.print("decq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL16r1:
				os.print("rolw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB32mr:
				os.print("lock\n\tsubl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRM128rr:
				os.print("pcmpestrm\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMUMAX32:
				os.print("#ATOMUMAX32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case LXADD8:
				os.print("lock\n\txaddb\t");
				printOperand(mi, 6);
				os.print(", ");
				printi8mem(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case JMP32m:
				os.print("jmpl\t*");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRM128rm:
				os.print("pcmpestrm\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBDrm:
				os.print("psubd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JMP32r:
				os.print("jmpl\t*");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD32mi8:
				os.print("lock\n\taddl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBDrr:
				os.print("psubd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDQUmr_Int:
				os.print("movdqu\t");
				printOperand(mi, 5);
				os.print(", ");
				printi128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB32mi:
				os.print("lock\n\tsubl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDDrm128:
				os.print("phaddd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR16rCL:
				os.print("sarw\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMMAX32:
				os.print("#ATOMMAX32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case ADDPSrr:
				os.print("addps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND8mi:
				os.print("andb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RCPPSm:
				os.print("rcpps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PACKSSWBrm:
				os.print("packsswb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RCPPSr:
				os.print("rcpps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD64mi32:
				os.print("lock\n\taddq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMUMAX16:
				os.print("#ATOMUMAX16 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PANDNrr:
				os.print("pandn\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SFENCE:
				os.print("sfence");
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLWrr:
				os.print("psrlw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPEQQrr:
				os.print("pcmpeqq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLWrm:
				os.print("psrlw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPEQQrm:
				os.print("pcmpeqq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLWri:
				os.print("psrlw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JNP8:
				os.print("jnp\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRAWrr:
				os.print("psraw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ANDPDrm:
				os.print("andpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRAWrm:
				os.print("psraw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVLE16rr:
				os.print("cmovle\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ANDPDrr:
				os.print("andpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL8m1:
				os.print("shlb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULDQrr:
				os.print("pmuldq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVLE16rm:
				os.print("cmovle\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLPSmr:
				os.print("movlps\t");
				printOperand(mi, 5);
				os.print(", ");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD16mri8:
				os.print("shrdw\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case POPFD:
				os.print("popf");
				emitComments(mi);

				os.print("\n");
				break;
			case PMULDQrm:
				os.print("pmuldq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR32rr:
				os.print("orl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UCOM_FPr:
				os.print("fucomp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRAWri:
				os.print("psraw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JNO8:
				os.print("jno\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case POPFQ:
				os.print("popf");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPDI2DImr:
				os.print("movd\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDQrm:
				os.print("paddq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETGEr:
				os.print("setge\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRISrr:
				os.print("pcmpestri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDQrr:
				os.print("paddq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRISrm:
				os.print("pcmpestri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMADDWDrr:
				os.print("pmaddwd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNS32rr:
				os.print("cmovns\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR32ri:
				os.print("orl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNS32rm:
				os.print("cmovns\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR32rm:
				os.print("orl\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETGEm:
				os.print("setge\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXWDrm:
				os.print("pmovzxwd\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMOR64:
				os.print("#ATOMOR64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SUB64mi8:
				os.print("subq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMADDWDrm:
				os.print("pmaddwd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXWDrr:
				os.print("pmovzxwd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL8mi:
				os.print("shlb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD32mri8:
				os.print("shrdl\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB16mi8:
				os.print("subw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP64_TO_INT16_IN_MEM:
				os.print("##FP64_TO_INT16_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPSrm_Int:
				os.print("movups\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDUSWrm:
				os.print("paddusw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZPQILo2PQIrr:
				os.print("movq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NEG16r:
				os.print("negw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZPQILo2PQIrm:
				os.print("movq\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDUSWrr:
				os.print("paddusw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NEG16m:
				os.print("negw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSR64rm:
				os.print("bsrq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC32mr:
				os.print("adcl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKLBWrr:
				os.print("punpcklbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSR64rr:
				os.print("bsrq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTTSD2SIrm:
				os.print("cvttsd2si\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVL16rm:
				os.print("cmovl\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKLBWrm:
				os.print("punpcklbw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LEA32r:
				os.print("leal\t");
				printlea32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RDTSC:
				os.print("rdtsc");
				emitComments(mi);

				os.print("\n");
				break;
			case INC16r:
				os.print("incw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTSDm:
				os.print("sqrtsd\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDDrm:
				os.print("paddd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC16m:
				os.print("incw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVO32rm:
				os.print("cmovo\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVO32rr:
				os.print("cmovo\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDDrr:
				os.print("paddd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPDI2DIrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSWrr64:
				os.print("pabsw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXPSrr_Int:
				os.print("maxps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PACKSSDWrr:
				os.print("packssdw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPD2PSrm:
				os.print("cvtpd2ps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTSDr:
				os.print("sqrtsd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JNS8:
				os.print("jns\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ST_FP64m:
				os.print("fstpl\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPD2PSrr:
				os.print("cvtpd2ps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXSDrm:
				os.print("maxsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PACKSSDWrm:
				os.print("packssdw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMOR32:
				os.print("#ATOMOR32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case MAXSDrr:
				os.print("maxsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMXOR8:
				os.print("#ATOMXOR8 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSSrr:
				os.print("addss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPGTBrr:
				os.print("pcmpgtb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLWrm:
				os.print("psllw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPGTBrm:
				os.print("pcmpgtb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSADBWrr:
				os.print("psadbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TCRETURNri64:
				os.print("#TC_RETURN ");
				printOperand(mi, 0);
				os.print(' ');
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLWri:
				os.print("psllw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case REP_STOSQ:
				os.print("rep;stosq");
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLWrr:
				os.print("psllw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case REP_STOSW:
				os.print("rep;stosw");
				emitComments(mi);

				os.print("\n");
				break;
			case LEAVE:
				os.print("leave");
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CMPSSrr:
				os.print("cmp");
				printSSECC(mi, 3);
				os.print("ss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CMPSSrm:
				os.print("cmp");
				printSSECC(mi, 7);
				os.print("ss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSBrm64:
				os.print("pabsb\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TLS_addr32:
				os.print("leal\t");
				printlea32mem(mi, 0);
				os.print(", %eax; call\t___tls_get_addr@PLT");
				emitComments(mi);

				os.print("\n");
				break;
			case PMULHRSWrr128:
				os.print("pmulhrsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CRC64r64:
				os.print("crc32 \t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case LFENCE:
				os.print("lfence");
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMOR16:
				os.print("#ATOMOR16 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDQUmr:
				os.print("movdqu\t");
				printOperand(mi, 5);
				os.print(", ");
				printi128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OUT16ir:
				os.print("outw\t%ax, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMPSSrr:
				os.print("cmp");
				printSSECC(mi, 3);
				os.print("ss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMPSSrm:
				os.print("cmp");
				printSSECC(mi, 7);
				os.print("ss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROUNDPDm_Int:
				os.print("roundpd\t");
				printOperand(mi, 6);
				os.print(", ");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSADBWrm:
				os.print("psadbw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVL16rr:
				os.print("cmovl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVMSKPSrr:
				os.print("movmskps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case REP_STOSD:
				os.print("rep;stosl");
				emitComments(mi);

				os.print("\n");
				break;
			case ADC32mi:
				os.print("adcl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case REP_STOSB:
				os.print("rep;stosb");
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSSrm:
				os.print("addss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UCOM_FIr:
				os.print("fucomi\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSS2SDrm:
				os.print("cvtss2sd\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDDrr:
				os.print("paddd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC32ri:
				os.print("adcl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNB_F:
				os.print("fcmovnb\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case SAR32rCL:
				os.print("sarl\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDDrm:
				os.print("paddd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC32rr:
				os.print("adcl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVNTPDmr:
				os.print("movntpd\t");
				printOperand(mi, 5);
				os.print(", ");
				printi128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsXORPDrr:
				os.print("xorpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP80_TO_INT64_IN_MEM:
				os.print("##FP80_TO_INT64_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case ADC32rm:
				os.print("adcl\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSS2SDrr:
				os.print("cvtss2sd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD64mrCL:
				os.print("shrdq\t%cl, ");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsXORPDrm:
				os.print("xorpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULSDrr_Int:
				os.print("mulsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL16rri:
				os.print("imulw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD16mi8:
				os.print("lock\n\taddw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSD2PDrr:
				os.print("movsd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMUMIN32:
				os.print("#ATOMUMIN32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case INSERTPSrr:
				os.print("insertps\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVD64rrv164:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64mi32:
				os.print("movq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MASKMOVDQU:
				os.print("maskmovdqu\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXPDrm_Int:
				os.print("maxpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_DEC64m:
				os.print("lock\n\tdecq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMMIN16:
				os.print("#ATOMMIN16 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRIrm:
				os.print("pcmpistri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_COMISSrm:
				os.print("comiss\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX32_NOREXrm8:
				os.print("movzbl\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				os.print("  # NOREX");
				emitComments(mi);

				os.print("\n");
				break;
			case PINSRBrr:
				os.print("pinsrb\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRIrr:
				os.print("pcmpistri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INSERTPSrm:
				os.print("insertps\t");
				printOperand(mi, 7);
				os.print(", ");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPEQDrm:
				os.print("pcmpeqd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR16mCL:
				os.print("sarw\t%cl, ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_COMISSrr:
				os.print("comiss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINSDrm:
				os.print("minsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PINSRBrm:
				os.print("pinsrb\t");
				printOperand(mi, 7);
				os.print(", ");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL16rri8:
				os.print("imulw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDQUrm:
				os.print("movdqu\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPEQDrr:
				os.print("pcmpeqd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP16ri8:
				os.print("cmpw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSD2PDrm:
				os.print("movsd\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSBrr128:
				os.print("pabsb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKHDQrr:
				os.print("punpckhdq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINPDrr_Int:
				os.print("minpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV_F32m:
				os.print("fdivs\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR8mr:
				os.print("orb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKHDQrm:
				os.print("punpckhdq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LDDQUrm:
				os.print("lddqu\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR8mi:
				os.print("orb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTTSD2SIrr:
				os.print("cvttsd2si\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMUMIN16:
				os.print("#ATOMUMIN16 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFBrm64:
				os.print("pshufb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMMIN32:
				os.print("#ATOMMIN32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case XORPDrr:
				os.print("xorpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSWrr128:
				os.print("pabsw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XORPDrm:
				os.print("xorpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBSDrm_Int:
				os.print("subsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsMOVAPDrm:
				os.print("movapd\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IST_FP64m:
				os.print("fistpll\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsMOVAPDrr:
				os.print("movapd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULPSrm:
				os.print("mulps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULPSrr:
				os.print("mulps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLPSrr:
				os.print("movss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLPSrm:
				os.print("movlps\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX32rm16:
				os.print("movswl\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMUMIN64:
				os.print("#ATOMUMIN64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case DIVSSrm_Int:
				os.print("divss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OUT16rr:
				os.print("outw\t%ax, %dx");
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMMIN64:
				os.print("#ATOMMIN64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case CRC32r8:
				os.print("crc32 \t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSI2SDrm:
				os.print("cvtsi2sd\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROUNDSSr_Int:
				os.print("roundss\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SYSENTER:
				os.print("sysenter");
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSI2SDrr:
				os.print("cvtsi2sd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROUNDPSr_Int:
				os.print("roundps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC64ri32:
				os.print("adcq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINSDrr:
				os.print("minsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TAILJMPr64:
				os.print("jmpq\t*");
				printOperand(mi, 0);
				os.print("  # TAILCALL");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNP16rr:
				os.print("cmovnp\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNP16rm:
				os.print("cmovnp\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RSQRTSSr:
				os.print("rsqrtss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PXORrm:
				os.print("pxor\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR8rr:
				os.print("orb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_INC8m:
				os.print("lock\n\tincb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR32mr:
				os.print("orl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RETI:
				os.print("ret\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR8rm:
				os.print("orb\t");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XCHG16rm:
				os.print("xchgw\t");
				printOperand(mi, 6);
				os.print(", ");
				printi16mem(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL32rr:
				os.print("imull\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX32_NOREXrr8:
				os.print("movzbl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				os.print("  # NOREX");
				emitComments(mi);

				os.print("\n");
				break;
			case OR8ri:
				os.print("orb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV32r:
				os.print("divl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBSWrm64:
				os.print("phsubsw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PXORrr:
				os.print("pxor\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CBW:
				os.print("cbtw");
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD32rrCL:
				os.print("shrdl\t%cl, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL32rm:
				os.print("imull\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBUSWrm:
				os.print("psubusw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBUSWrr:
				os.print("psubusw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKLWDrm:
				os.print("punpcklwd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JBE8:
				os.print("jbe\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CWDE:
				os.print("cwtl");
				emitComments(mi);

				os.print("\n");
				break;
			case UCOMISDrr:
				os.print("ucomisd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV32m:
				os.print("divl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FS_MOV32rm:
				os.print("movl\t%fs:");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKLWDrr:
				os.print("punpcklwd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CALL64pcrel32:
				os.print("call\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UCOMISDrm:
				os.print("ucomisd\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RSQRTSSm:
				os.print("rsqrtss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR32mi:
				os.print("orl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL8rCL:
				os.print("shlb\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL32mCL:
				os.print("shll\t%cl, ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRIArr:
				os.print("pcmpistri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRIArm:
				os.print("pcmpistri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case EH_RETURN64:
				os.print("ret\t#eh_return, addr: ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST8mi:
				os.print("testb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB8mi:
				os.print("lock\n\tsubb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSSmr:
				os.print("movss\t");
				printOperand(mi, 5);
				os.print(", ");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKHQDQrm:
				os.print("punpckhqdq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC64r:
				os.print("incq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC64m:
				os.print("incq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKHQDQrr:
				os.print("punpckhqdq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CDQ:
				os.print("cltd");
				emitComments(mi);

				os.print("\n");
				break;
			case OR16ri:
				os.print("orw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB8mr:
				os.print("lock\n\tsubb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD_FST0r:
				os.print("fadd\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD16mri8:
				os.print("shldw\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVHPSmr:
				os.print("movhps\t");
				printOperand(mi, 5);
				os.print(", ");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVL64rr:
				os.print("cmovl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ISTT_FP16m:
				os.print("fisttps\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPD2PIrm:
				os.print("cvtpd2pi\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPD2PIrr:
				os.print("cvtpd2pi\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LD_Frr:
				os.print("fld\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTPS2PIrm:
				os.print("cvtps2pi\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVL64rm:
				os.print("cmovl\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CRC64m64:
				os.print("crc32 \t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTPS2PIrr:
				os.print("cvtps2pi\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC16m:
				os.print("decw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPGTWrm:
				os.print("pcmpgtw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPGTWrr:
				os.print("pcmpgtw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETEm:
				os.print("sete\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR32m1:
				os.print("shrl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETEr:
				os.print("sete\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC16r:
				os.print("decw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR32mi:
				os.print("shrl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ST_Frr:
				os.print("fst\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CRC32m8:
				os.print("crc32 \t");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSS2DImr:
				os.print("movd\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVR_FPrST0:
				os.print("fdivp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTPI2PSrm:
				os.print("cvtpi2ps\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMINSWrr:
				os.print("pminsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UNPCKHPSrm:
				os.print("unpckhps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR16m1:
				os.print("rorw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMINSWrm:
				os.print("pminsw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PEXTRBmr:
				os.print("pextrb\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULSDrm_Int:
				os.print("mulsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UNPCKHPSrr:
				os.print("unpckhps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB16ri8:
				os.print("sbbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL32rmi8:
				os.print("imull\t");
				printOperand(mi, 6);
				os.print(", ");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND32ri:
				os.print("andl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTTPS2PIrm:
				os.print("cvttps2pi\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND16ri8:
				os.print("andw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTTPS2PIrr:
				os.print("cvttps2pi\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB64mr:
				os.print("subq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMNAND6432:
				os.print("#ATOMNAND6432 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBDrm:
				os.print("psubd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTPI2PSrr:
				os.print("cvtpi2ps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND32rr:
				os.print("andl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLWrr:
				os.print("psllw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND32rm:
				os.print("andl\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLQ128mr:
				os.print("movq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBDrr:
				os.print("psubd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLWrm:
				os.print("psllw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPI2PDrr:
				os.print("cvtpi2pd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETGm:
				os.print("setg\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLWri:
				os.print("psllw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPI2PDrm:
				os.print("cvtpi2pd\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETGr:
				os.print("setg\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXPSrm_Int:
				os.print("maxps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETBr:
				os.print("setb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MASKMOVQ:
				os.print("maskmovq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZDI2PDIrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZDI2PDIrm:
				os.print("movd\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSS2SDrr:
				os.print("cvtss2sd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV8m:
				os.print("divb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV8r:
				os.print("divb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX32rm16:
				os.print("movzwl\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMOVMSKBrr:
				os.print("pmovmskb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD16ri8:
				os.print("addw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPEQWrr:
				os.print("pcmpeqw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPEQWrm:
				os.print("pcmpeqw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHUFPSrri:
				os.print("shufps\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PBLENDVBrm0:
				os.print("pblendvb\t%xmm0, ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LD_F1:
				os.print("fld1");
				emitComments(mi);

				os.print("\n");
				break;
			case ROR16mi:
				os.print("rorw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULSSrm:
				os.print("mulss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LD_F0:
				os.print("fldz");
				emitComments(mi);

				os.print("\n");
				break;
			case SETBm:
				os.print("setb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST8ri:
				os.print("testb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETAr:
				os.print("seta\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBQrr:
				os.print("psubq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBSWrm:
				os.print("psubsw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST8rm:
				os.print("testb\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULLWrr:
				os.print("pmullw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST8rr:
				os.print("testb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR32r1:
				os.print("shrl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULLWrm:
				os.print("pmullw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVP16rr:
				os.print("cmovp\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD64mr:
				os.print("lock\n\taddq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBQrm:
				os.print("psubq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBSWrr:
				os.print("psubsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSSrm_Int:
				os.print("addss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDSBrr:
				os.print("paddsb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETAm:
				os.print("seta\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDSBrm:
				os.print("paddsb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVB32rm:
				os.print("cmovb\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOV_V1I64:
				os.print("#CMOV_V1I64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVP16rm:
				os.print("cmovp\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD16mi:
				os.print("addw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD16mr:
				os.print("addw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVB32rr:
				os.print("cmovb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR16rr:
				os.print("orw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSS2DIrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR16rCL:
				os.print("shrw\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULSSrr:
				os.print("mulss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTPS2DQrr:
				os.print("cvttps2dq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTPS2DQrm:
				os.print("cvttps2dq\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX64rm8:
				os.print("movzbl\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case OR16rm:
				os.print("orw\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR32ri:
				os.print("shrl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ST_FPrr:
				os.print("fstp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV16ri:
				os.print("movw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR8rm:
				os.print("xorb\t");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB64rr:
				os.print("subq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR8rr:
				os.print("xorb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV16rm:
				os.print("movw\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB64rm:
				os.print("subq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV16rr:
				os.print("movw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NEG64m:
				os.print("negq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSS2SDrm:
				os.print("cvtss2sd\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR8ri:
				os.print("xorb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PEXTRBrr:
				os.print("pextrb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC64_16r:
				os.print("decw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLSD2PDrr:
				os.print("movsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL64r:
				os.print("imulq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC64_16m:
				os.print("decw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDUSBrr:
				os.print("paddusb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL64m:
				os.print("imulq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXUBrr:
				os.print("pmaxub\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDUSBrm:
				os.print("paddusb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LDMXCSR:
				os.print("ldmxcsr\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND32mi:
				os.print("andl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IST_F16m:
				os.print("fists\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND32mr:
				os.print("andl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKHWDrm:
				os.print("punpckhwd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR64mi:
				os.print("rorq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKHWDrr:
				os.print("punpckhwd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64ri32:
				os.print("movq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PEXTRWri:
				os.print("pextrw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSH32i16:
				os.print("pushl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL_FI32m:
				os.print("fimull\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHUFPSrmi:
				os.print("shufps\t");
				printOperand(mi, 7);
				os.print(", ");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PALIGNR128rm:
				os.print("palignr\t");
				printOperand(mi, 7);
				os.print(", ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRIOrr:
				os.print("pcmpestri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRIOrm:
				os.print("pcmpestri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMADDUBSWrm128:
				os.print("pmaddubsw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX32rr16:
				os.print("movswl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOV_V4F32:
				os.print("#CMOV_V4F32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PALIGNR128rr:
				os.print("palignr\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD16ri:
				os.print("addw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHI:
				os.print("PHINODE");
				emitComments(mi);

				os.print("\n");
				break;
			case PABSWrm128:
				os.print("pabsw\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PBLENDWrri:
				os.print("pblendw\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETPr:
				os.print("setp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP64_TO_INT64_IN_MEM:
				os.print("##FP64_TO_INT64_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case ROR64r1:
				os.print("rorq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSH32i32:
				os.print("pushl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR8rCL:
				os.print("shrb\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSSrr:
				os.print("movss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVS32rm:
				os.print("cmovs\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FNSTSW8r:
				os.print("fnstsw");
				emitComments(mi);

				os.print("\n");
				break;
			case AND64mi32:
				os.print("andq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVR_FST0r:
				os.print("fdivr\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETPm:
				os.print("setp\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP32mi8:
				os.print("cmpl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CRC32m32:
				os.print("crc32 \t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVSSrr_Int:
				os.print("divss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRM128REG:
				os.print("#PCMPISTRM128rr PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SETOm:
				os.print("seto\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD16rm:
				os.print("addw\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTTPD2PIrm:
				os.print("cvttpd2pi\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMXOR6432:
				os.print("#ATOMXOR6432 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case ADD16rr:
				os.print("addw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD8mr:
				os.print("addb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTTPD2PIrr:
				os.print("cvttpd2pi\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD16rrCL:
				os.print("shrdw\t%cl, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETOr:
				os.print("seto\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD8mi:
				os.print("addb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSSrm:
				os.print("movss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB64mr:
				os.print("lock\n\tsubq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LEA64_32r:
				os.print("leal\t");
				printlea64_32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR64ri:
				os.print("rorq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XCHG32rm:
				os.print("xchgl\t");
				printOperand(mi, 6);
				os.print(", ");
				printi32mem(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case OR16mr:
				os.print("orw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXWQrm:
				os.print("pmovzxwq\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSDrr_Int:
				os.print("addsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSH64i32:
				os.print("pushq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDWrm128:
				os.print("phaddw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULHUWrr:
				os.print("pmulhuw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULHUWrm:
				os.print("pmulhuw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR16mi:
				os.print("orw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXWQrr:
				os.print("pmovzxwq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNP32rr:
				os.print("cmovnp\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNP32rm:
				os.print("cmovnp\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDSWrm:
				os.print("paddsw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ILD_F64m:
				os.print("fildll\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDSWrr:
				os.print("paddsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROUNDSSm_Int:
				os.print("roundss\t");
				printOperand(mi, 7);
				os.print(", ");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVS32rr:
				os.print("cmovs\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC64mi32:
				os.print("adcq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SYSEXIT64:
				os.print("sysexit");
				emitComments(mi);

				os.print("\n");
				break;
			case LEA16r:
				os.print("leaw\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CQO:
				os.print("cqto");
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTPD2DQrm:
				os.print("cvttpd2dq\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CALL32r:
				os.print("call\t*");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTPD2DQrr:
				os.print("cvttpd2dq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVD64to64rr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CALL32m:
				os.print("call\t*");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CRC32m16:
				os.print("crc32 \t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case PBLENDWrmi:
				os.print("pblendw\t");
				printOperand(mi, 7);
				os.print(", ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNBE_F:
				os.print("fcmovnbe\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case SYSCALL:
				os.print("syscall");
				emitComments(mi);

				os.print("\n");
				break;
			case DIV_FPrST0:
				os.print("fdivrp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBSSrm_Int:
				os.print("subss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL8ri:
				os.print("shlb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case VASTART_SAVE_XMM_REGS:
				os.print("#VASTART_SAVE_XMM_REGS ");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 2);
				emitComments(mi);

				os.print("\n");
				break;
			case PACKSSDWrr:
				os.print("packssdw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_FEMMS:
				os.print("femms");
				emitComments(mi);

				os.print("\n");
				break;
			case PMULHRSWrm64:
				os.print("pmulhrsw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PACKSSDWrm:
				os.print("packssdw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD8i8:
				os.print("add\t");
				printOperand(mi, 0);
				os.print(", %al");
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPS2DQrm:
				os.print("cvtps2dq\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETLm:
				os.print("setl\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINPSrr_Int:
				os.print("minps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETLr:
				os.print("setl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPS2DQrr:
				os.print("cvtps2dq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVHLPSrr:
				os.print("movhlps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP64_TO_INT32_IN_MEM:
				os.print("##FP64_TO_INT32_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD32mrCL:
				os.print("shrdl\t%cl, ");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVPSrr:
				os.print("divps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVHPSrm:
				os.print("movhps\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVPSrm:
				os.print("divps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXUBrm:
				os.print("pmaxub\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL_FrST0:
				os.print("fmul\t%st(0), ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD64mi32:
				os.print("addq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB32ri8:
				os.print("subl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX64rr32:
				os.print("movl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case CMP64mi8:
				os.print("cmpq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BLENDVPDrm0:
				os.print("blendvpd\t%xmm0, ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DPPSrri:
				os.print("dpps\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDDrr128:
				os.print("phaddd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL64m1:
				os.print("rolq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB_FI32m:
				os.print("fisubl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PINSRWrri:
				os.print("pinsrw\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXBDrr:
				os.print("pmovzxbd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVSSrr:
				os.print("divss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD16mr:
				os.print("lock\n\taddw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVSSrm:
				os.print("divss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVA64rr:
				os.print("cmova\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVA64rm:
				os.print("cmova\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD16mi:
				os.print("lock\n\taddw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBQrm:
				os.print("psubq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSWAP32r:
				os.print("bswapl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINSWrm:
				os.print("pminsw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST32ri:
				os.print("testl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB16mr:
				os.print("sbbw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINPDrm:
				os.print("minpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINPDrr:
				os.print("minpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST32rm:
				os.print("testl\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR16m1:
				os.print("sarw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINSWrr:
				os.print("pminsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB16mi:
				os.print("sbbw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBPDrr:
				os.print("subpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR64mr:
				os.print("orq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVB_F:
				os.print("fcmovb\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFBrr128:
				os.print("pshufb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB64ri32:
				os.print("subq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSHUFWri:
				os.print("pshufw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBPDrm:
				os.print("subpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXBDrm:
				os.print("pmovzxbd\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST32rr:
				os.print("testl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNBrr128:
				os.print("psignb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP8mr:
				os.print("cmpb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDSBrr:
				os.print("paddsb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR64mi32:
				os.print("xorq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNDrm128:
				os.print("psignd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSD2SI64rr:
				os.print("cvtsd2siq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX32rr16:
				os.print("movzwl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSH64i16:
				os.print("pushq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CWD:
				os.print("cwtd");
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRISrm:
				os.print("pcmpistri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDUSWrm:
				os.print("paddusw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC64ri8:
				os.print("adcq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRISrr:
				os.print("pcmpistri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP8mi:
				os.print("cmpb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR8mCL:
				os.print("shrb\t%cl, ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMXOR16:
				os.print("#ATOMXOR16 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMUMAX64:
				os.print("#ATOMUMAX64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNE64rm:
				os.print("cmovne\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8rm_NOREX:
				os.print("movb\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				os.print("  # NOREX");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNE64rr:
				os.print("cmovne\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVP64rm:
				os.print("cmovp\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDUSWrr:
				os.print("paddusw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVP64rr:
				os.print("cmovp\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR16mi:
				os.print("sarw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsFLD0SD:
				os.print("pxor\t");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD_FI16m:
				os.print("fiadds\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRICrr:
				os.print("pcmpestri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRICrm:
				os.print("pcmpestri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SYSEXIT:
				os.print("sysexit");
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSD2SI64rm:
				os.print("cvtsd2siq\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsFLD0SS:
				os.print("pxor\t");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDSWrm64:
				os.print("phaddsw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVSDrr_Int:
				os.print("divsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR16r1:
				os.print("sarw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB64mi32:
				os.print("sbbq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PEXTRWmr:
				os.print("pextrw\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVBE32rm:
				os.print("cmovbe\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR64rr:
				os.print("orq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETSm:
				os.print("sets\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64toSDrm:
				os.print("movq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP64mi32:
				os.print("cmpq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD64mri8:
				os.print("shrdq\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVBE32rr:
				os.print("cmovbe\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case HSUBPSrr:
				os.print("hsubps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64toSDrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XCHG8rm:
				os.print("xchgb\t");
				printOperand(mi, 6);
				os.print(", ");
				printi8mem(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBSWrr64:
				os.print("phsubsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case HSUBPSrm:
				os.print("hsubps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR64rm:
				os.print("xorq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSD2SSrr:
				os.print("cvtsd2ss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR64rr:
				os.print("xorq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBSWrr:
				os.print("psubsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RCPSSm:
				os.print("rcpss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSHUFWmi:
				os.print("pshufw\t");
				printOperand(mi, 6);
				os.print(", ");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RCPSSr:
				os.print("rcpss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RSQRTPSm:
				os.print("rsqrtps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JGE8:
				os.print("jge\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD64mr:
				os.print("addq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RSQRTPSr:
				os.print("rsqrtps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR64rm:
				os.print("orq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBSWrm:
				os.print("psubsw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL8mCL:
				os.print("shlb\t%cl, ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDSBrm:
				os.print("paddsb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSD2SSrm:
				os.print("cvtsd2ss\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOT16r:
				os.print("notw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD16rrCL:
				os.print("shldw\t%cl, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXSDrr:
				os.print("pmaxsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXSDrm:
				os.print("pmaxsd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB_F32m:
				os.print("fsubs\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR16ri:
				os.print("sarw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFHWmi:
				os.print("pshufhw\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOT16m:
				os.print("notw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTSS2SIrr:
				os.print("cvttss2si\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMOR6432:
				os.print("#ATOMOR6432 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTSS2SIrm:
				os.print("cvttss2si\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_INC32m:
				os.print("lock\n\tincl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTSSm_Int:
				os.print("sqrtss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXUWrm:
				os.print("pmaxuw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXUWrr:
				os.print("pmaxuw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL16rCL:
				os.print("shlw\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBQrr:
				os.print("psubq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8rr:
				os.print("movb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBUSWrr:
				os.print("psubusw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVR_F64m:
				os.print("fdivrl\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IST_FP16m:
				os.print("fistps\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST64ri32:
				os.print("testq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKHDQrm:
				os.print("punpckhdq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKHDQrr:
				os.print("punpckhdq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD8mi:
				os.print("lock\n\taddb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBUSWrm:
				os.print("psubusw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETSr:
				os.print("sets\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PACKSSWBrr:
				os.print("packsswb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PACKSSWBrm:
				os.print("packsswb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD8mr:
				os.print("lock\n\taddb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXPDrr_Int:
				os.print("maxpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPDrm_Int:
				os.print("movupd\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETLEr:
				os.print("setle\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NEG64r:
				os.print("negq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVR_FI16m:
				os.print("fidivrs\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CHS_F:
				os.print("fchs");
				emitComments(mi);

				os.print("\n");
				break;
			case SETLEm:
				os.print("setle\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINSBrm:
				os.print("pminsb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR8mi:
				os.print("xorb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINSBrr:
				os.print("pminsb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB16mi8:
				os.print("lock\n\tsubw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKLWDrr:
				os.print("punpcklwd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPSmr:
				os.print("movups\t");
				printOperand(mi, 5);
				os.print(", ");
				printf128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSD2SSrm:
				os.print("cvtsd2ss\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LEA64r:
				os.print("leaq\t");
				printlea64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULSSrm_Int:
				os.print("mulss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8rm:
				os.print("movb\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSR32rr:
				os.print("bsrl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD64mrCL:
				os.print("shldq\t%cl, ");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8ri:
				os.print("movb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC16mi8:
				os.print("adcw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PORrm:
				os.print("por\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8r0:
				os.print("xorb\t");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP8rr:
				os.print("cmpb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPD2SDrr:
				os.print("movsd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD64rr:
				os.print("addq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXBWrr:
				os.print("pmovsxbw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP80_TO_INT32_IN_MEM:
				os.print("##FP80_TO_INT32_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case ADD64rm:
				os.print("addq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC32ri8:
				os.print("adcl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR64mi32:
				os.print("orq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PEXTRWri:
				os.print("pextrw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXBWrm:
				os.print("pmovsxbw\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR16r1:
				os.print("rorw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMXOR64:
				os.print("#ATOMXOR64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case CMP64ri8:
				os.print("cmpq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP8rm:
				os.print("cmpb\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP8ri:
				os.print("cmpb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXSDrr_Int:
				os.print("maxsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PORrr:
				os.print("por\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSDrr128:
				os.print("pabsd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSDto64rr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTDQ2PDrm:
				os.print("cvtdq2pd\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOOP:
				os.print("nop");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMAXUBrm:
				os.print("pmaxub\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTPSm_Int:
				os.print("sqrtps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMAXUBrr:
				os.print("pmaxub\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINUDrm:
				os.print("pminud\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTDQ2PDrr:
				os.print("cvtdq2pd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_UCOMISSrm:
				os.print("ucomiss\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINUDrr:
				os.print("pminud\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRIOrr:
				os.print("pcmpistri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_UCOMISSrr:
				os.print("ucomiss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR16rm:
				os.print("xorw\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case WINCALL64pcrel32:
				os.print("call\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR16ri:
				os.print("xorw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case EH_RETURN:
				os.print("ret\t#eh_return, addr: ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPQI2QImr:
				os.print("movq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RSQRTSSm_Int:
				os.print("rsqrtss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PINSRWrmi:
				os.print("pinsrw\t");
				printOperand(mi, 7);
				os.print(", ");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR8mr:
				os.print("xorb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PUNPCKLWDrm:
				os.print("punpcklwd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR16rr:
				os.print("xorw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSD2SSrr:
				os.print("cvtsd2ss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRIOrm:
				os.print("pcmpistri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IN32rr:
				os.print("inl\t%dx, %eax");
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRM128rm:
				os.print("pcmpistrm\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL64ri:
				os.print("rolq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMADD6432:
				os.print("#ATOMADD6432 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBWrr128:
				os.print("phsubw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR16ri:
				os.print("rorw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRM128rr:
				os.print("pcmpistrm\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPSrm:
				os.print("movups\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8mi:
				os.print("movb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB16rr:
				os.print("sbbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB16rm:
				os.print("sbbw\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IN32ri:
				os.print("inl\t");
				printOperand(mi, 0);
				os.print(", %eax");
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8mr:
				os.print("movb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB16ri:
				os.print("sbbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBR_FI32m:
				os.print("fisubrl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMXOR32:
				os.print("#ATOMXOR32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSDto64mr:
				os.print("movq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB16ri8:
				os.print("subw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC64_32m:
				os.print("incl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVAPDmr:
				os.print("movapd\t");
				printOperand(mi, 5);
				os.print(", ");
				printf128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVA16rm:
				os.print("cmova\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVA16rr:
				os.print("cmova\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMADDWDrm:
				os.print("pmaddwd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR16mi:
				os.print("xorw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XCH_F:
				os.print("fxch\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMADDWDrr:
				os.print("pmaddwd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL64rri8:
				os.print("imulq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBR_FrST0:
				os.print("fsub\t%st(0), ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IDIV16r:
				os.print("idivw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL64r1:
				os.print("rolq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IDIV16m:
				os.print("idivw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPD2SDmr:
				os.print("movsd\t");
				printOperand(mi, 5);
				os.print(", ");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPSrr:
				os.print("movups\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC64_32r:
				os.print("incl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULLDrr_int:
				os.print("pmulld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR16mr:
				os.print("xorw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TAILJMPm:
				os.print("jmp\t*");
				printi32mem(mi, 0);
				os.print("  # TAILCALL");
				emitComments(mi);

				os.print("\n");
				break;
			case TAILJMPr:
				os.print("jmpl\t*");
				printOperand(mi, 0);
				os.print("  # TAILCALL");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNE_F:
				os.print("fcmovne\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case PANDrr:
				os.print("pand\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TAILJMPd:
				os.print("jmp\t");
				print_pcrel_imm(mi, 0);
				os.print("  # TAILCALL");
				emitComments(mi);

				os.print("\n");
				break;
			case PANDrm:
				os.print("pand\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB_FrST0:
				os.print("fsubr\t%st(0), ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL64mi:
				os.print("rolq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSR32rm:
				os.print("bsrl\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV_F64m:
				os.print("fdivl\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ANDNPDrr:
				os.print("andnpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVNTDQmr:
				os.print("movntdq\t");
				printOperand(mi, 5);
				os.print(", ");
				printf128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ANDNPDrm:
				os.print("andnpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAHF:
				os.print("sahf");
				emitComments(mi);

				os.print("\n");
				break;
			case MAXPSrm:
				os.print("maxps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UCOM_FIPr:
				os.print("fucomip\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDQAmr:
				os.print("movdqa\t");
				printOperand(mi, 5);
				os.print(", ");
				printi128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXPSrr:
				os.print("maxps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RSQRTPSm_Int:
				os.print("rsqrtps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBSBrr:
				os.print("psubsb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOV_FR64:
				os.print("#CMOV_FR64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBSBrm:
				os.print("psubsb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PBLENDVBrr0:
				os.print("pblendvb\t%xmm0, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP32_TO_INT64_IN_MEM:
				os.print("##FP32_TO_INT64_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPGTBrr:
				os.print("pcmpgtb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDQUrm_Int:
				os.print("movdqu\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPGTBrm:
				os.print("pcmpgtb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR8m1:
				os.print("sarb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMSWAP6432:
				os.print("#ATOMSWAP6432 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNS16rm:
				os.print("cmovns\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNDrr64:
				os.print("psignd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOV_FR32:
				os.print("#CMOV_FR32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNS16rr:
				os.print("cmovns\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBSSrr_Int:
				os.print("subss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB8ri:
				os.print("subb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTPSm:
				os.print("sqrtps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMSUB6432:
				os.print("#ATOMSUB6432 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTPSr:
				os.print("sqrtps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ABS_F:
				os.print("fabs");
				emitComments(mi);

				os.print("\n");
				break;
			case PMADDUBSWrm64:
				os.print("pmaddubsw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV_FI32m:
				os.print("fidivl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOV_V2I64:
				os.print("#CMOV_V2I64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SUB8rr:
				os.print("subb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVAPDrm:
				os.print("movapd\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB8rm:
				os.print("subb\t");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINPDrm_Int:
				os.print("minpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD32rri8:
				os.print("shrdl\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVE64rr:
				os.print("cmove\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOT64m:
				os.print("notq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD32mr:
				os.print("lock\n\taddl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDQArr:
				os.print("movdqa\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB64mi32:
				os.print("lock\n\tsubq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKLBWrr:
				os.print("punpcklbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKLBWrm:
				os.print("punpcklbw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD32mi:
				os.print("lock\n\taddl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMULHWrm:
				os.print("pmulhw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST16mi:
				os.print("testw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL8mCL:
				os.print("rolb\t%cl, ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVE64rm:
				os.print("cmove\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVD64from64rr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMULHWrr:
				os.print("pmulhw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNDrr128:
				os.print("psignd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDQArm:
				os.print("movdqa\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFLWmi:
				os.print("pshuflw\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMPPDrri:
				os.print("cmp");
				printSSECC(mi, 3);
				os.print("pd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVZDI2PDIrm:
				os.print("movd\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_V_SET0:
				os.print("pxor\t");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOT64r:
				os.print("notq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVZDI2PDIrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB64ri8:
				os.print("sbbq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MFENCE:
				os.print("mfence");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNP_F:
				os.print("fcmovnu\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case ROL32rCL:
				os.print("roll\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT32ri8:
				os.print("btl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDBrr:
				os.print("paddb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR64mi8:
				os.print("orq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDBrm:
				os.print("paddb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ORPSrm:
				os.print("orps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ORPSrr:
				os.print("orps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XORPSrr:
				os.print("xorps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRM128MEM:
				os.print("#PCMPESTRM128rm PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case XORPSrm:
				os.print("xorps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL16mCL:
				os.print("rolw\t%cl, ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR8r1:
				os.print("sarb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsORPDrr:
				os.print("orpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_DEC32m:
				os.print("lock\n\tdecl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP80_TO_INT16_IN_MEM:
				os.print("##FP80_TO_INT16_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX64rm32:
				os.print("movl\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVAPDrr:
				os.print("movapd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVG16rm:
				os.print("cmovg\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsORPDrm:
				os.print("orpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVG16rr:
				os.print("cmovg\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR8mi:
				os.print("sarb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV_FrST0:
				os.print("fdivr\t%st(0), ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFLWri:
				os.print("pshuflw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_COMISDrm:
				os.print("comisd\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNO64rm:
				os.print("cmovno\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST16ri:
				os.print("testw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX64rm16:
				os.print("movzwl\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case Int_COMISDrr:
				os.print("comisd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL16m:
				os.print("mulw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case STMXCSR:
				os.print("stmxcsr\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPS2SSmr:
				os.print("movss\t");
				printOperand(mi, 5);
				os.print(", ");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP64ri32:
				os.print("cmpq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64FSrm:
				os.print("movq\t%fs:");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsANDNPSrr:
				os.print("andnps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST16rm:
				os.print("testw\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsANDNPSrm:
				os.print("andnps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST16rr:
				os.print("testw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL16r:
				os.print("mulw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNO64rr:
				os.print("cmovno\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULLDrm_int:
				os.print("pmulld\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX16rr8:
				os.print("movzbl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case CMPPSrmi:
				os.print("cmp");
				printSSECC(mi, 7);
				os.print("ps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULHRSWrm128:
				os.print("pmulhrsw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LAHF:
				os.print("lahf");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVQ2FR64rr:
				os.print("movq2dq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR32ri:
				os.print("rorl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSH32i8:
				os.print("pushl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB16mi8:
				os.print("sbbw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64mr:
				os.print("movq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JA:
				os.print("ja\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JB:
				os.print("jb\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JE:
				os.print("je\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JG:
				os.print("jg\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JL:
				os.print("jl\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBR_F32m:
				os.print("fsubrs\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXBQrm:
				os.print("pmovzxbq\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JO:
				os.print("jo\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND32mi8:
				os.print("andl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JP:
				os.print("jp\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBSBrr:
				os.print("psubsb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JS:
				os.print("js\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UNPCKLPDrr:
				os.print("unpcklpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FNSTCW16m:
				os.print("fnstcw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBSBrm:
				os.print("psubsb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBSDrr_Int:
				os.print("subsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFHWri:
				os.print("pshufhw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDPDrm:
				os.print("addpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSDrm128:
				os.print("pabsd\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVMSKBrr:
				os.print("pmovmskb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDI2PDIrm:
				os.print("movd\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDPDrr:
				os.print("addpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXBQrr:
				os.print("pmovzxbq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMAXSWrr:
				os.print("pmaxsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDI2PDIrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMAXSWrm:
				os.print("pmaxsw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVGE32rr:
				os.print("cmovge\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL64rCL:
				os.print("rolq\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBWrm:
				os.print("psubw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVGE32rm:
				os.print("cmovge\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBWrr:
				os.print("psubw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PINSRWrmi:
				os.print("pinsrw\t");
				printOperand(mi, 7);
				os.print(", ");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LD_F80m:
				os.print("fldt\t");
				printf80mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMAND64:
				os.print("#ATOMAND64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFDri:
				os.print("pshufd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBDrm64:
				os.print("phsubd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD64rrCL:
				os.print("shldq\t%cl, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX32rm8:
				os.print("movsbl\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR8rCL:
				os.print("rorb\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JLE8:
				os.print("jle\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UNPCKLPDrm:
				os.print("unpcklpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBR_FPrST0:
				os.print("fsubp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case GS_MOV32rm:
				os.print("movl\t%gs:");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX64rr8:
				os.print("movsbq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSBrm128:
				os.print("pabsb\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDI2SSrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFDmi:
				os.print("pshufd\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RCPSSr_Int:
				os.print("rcpss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBUSBrm:
				os.print("psubusb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT64rr:
				os.print("btq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC32r:
				os.print("incl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC32m:
				os.print("incl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDI2SSrm:
				os.print("movd\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR8mi:
				os.print("rorb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT64ri8:
				os.print("btq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX64rm8:
				os.print("movsbq\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL16rm:
				os.print("imulw\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PTESTrr:
				os.print("ptest \t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBUSBrr:
				os.print("psubusb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMPPSrri:
				os.print("cmp");
				printSSECC(mi, 3);
				os.print("ps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PTESTrm:
				os.print("ptest \t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPC32r:
				os.print("call\t");
				printPICLabel(mi, 1);
				os.print("\n\tpopl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXBQrm:
				os.print("pmovsxbq\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL16rr:
				os.print("imulw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR8m1:
				os.print("rorb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINSSrm_Int:
				os.print("minss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXBQrr:
				os.print("pmovsxbq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVNTQmr:
				os.print("movntq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBSSrr:
				os.print("subss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT16mi8:
				os.print("btw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBSSrm:
				os.print("subss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPEQDrr:
				os.print("pcmpeqd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPEQDrm:
				os.print("pcmpeqd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR32mCL:
				os.print("shrl\t%cl, ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8rr_NOREX:
				os.print("movb\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				os.print("  # NOREX");
				emitComments(mi);

				os.print("\n");
				break;
			case ADD16mi8:
				os.print("addw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVE16rm:
				os.print("cmove\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD64rrCL:
				os.print("shrdq\t%cl, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSF64rr:
				os.print("bsfq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHMINPOSUWrm128:
				os.print("phminposuw\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX16rm8:
				os.print("movzbl\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSUBPSrm:
				os.print("addsubps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBSWrr128:
				os.print("phsubsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CLFLUSH:
				os.print("clflush\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROUNDPSm_Int:
				os.print("roundps\t");
				printOperand(mi, 6);
				os.print(", ");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVE16rr:
				os.print("cmove\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD64ri8:
				os.print("addq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL64rmi32:
				os.print("imulq\t");
				printOperand(mi, 6);
				os.print(", ");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD16rri8:
				os.print("shrdw\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL16ri:
				os.print("shlw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSF64rm:
				os.print("bsfq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC64_32m:
				os.print("decl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTSS2SI64rm:
				os.print("cvttss2siq\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD32ri8:
				os.print("addl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLDrr:
				os.print("pslld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case REP_MOVSB:
				os.print("rep;movsb");
				emitComments(mi);

				os.print("\n");
				break;
			case REP_MOVSD:
				os.print("rep;movsl");
				emitComments(mi);

				os.print("\n");
				break;
			case ROR8r1:
				os.print("rorb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD32mr:
				os.print("addl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX32rr8:
				os.print("movsbl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ILD_F16m:
				os.print("filds\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BLENDVPDrr0:
				os.print("blendvpd\t%xmm0, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLQri:
				os.print("psrlq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDBrm:
				os.print("paddb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDBrr:
				os.print("paddb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSUBPSrr:
				os.print("addsubps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL32r1:
				os.print("roll\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULHWrr:
				os.print("pmulhw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLQrm:
				os.print("psrlq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC64_32r:
				os.print("decl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case REP_MOVSW:
				os.print("rep;movsw");
				emitComments(mi);

				os.print("\n");
				break;
			case REP_MOVSQ:
				os.print("rep;movsq");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLQrr:
				os.print("psrlq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX64rr16:
				os.print("movzwl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBDrr64:
				os.print("phsubd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVAE16rm:
				os.print("cmovae\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULHWrm:
				os.print("pmulhw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB16rm:
				os.print("subw\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVAE16rr:
				os.print("cmovae\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSDrm:
				os.print("addsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB16rr:
				os.print("subw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSDrr:
				os.print("addsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLDrm:
				os.print("pslld\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTSS2SI64rr:
				os.print("cvttss2siq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHUFPDrri:
				os.print("shufpd\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLDri:
				os.print("pslld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB8mi:
				os.print("sbbb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMPSDrr:
				os.print("cmp");
				printSSECC(mi, 3);
				os.print("sd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVBE_F:
				os.print("fcmovbe\t");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case CMP32mi:
				os.print("cmpl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMPSDrm:
				os.print("cmp");
				printSSECC(mi, 7);
				os.print("sd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB_F64m:
				os.print("fsubl\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB8mr:
				os.print("sbbb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP32mr:
				os.print("cmpl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSSrr_Int:
				os.print("addss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSF16rr:
				os.print("bsfw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPDmr_Int:
				os.print("movupd\t");
				printOperand(mi, 5);
				os.print(", ");
				printf128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB16ri:
				os.print("subw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSF16rm:
				os.print("bsfw\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNO16rr:
				os.print("cmovno\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UCOM_Fr:
				os.print("fucom\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD_F32m:
				os.print("fadds\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNO16rm:
				os.print("cmovno\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDSWrr:
				os.print("paddsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRICrm:
				os.print("pcmpistri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDSWrr128:
				os.print("phaddsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD32mi:
				os.print("addl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPISTRICrr:
				os.print("pcmpistri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDSWrm:
				os.print("paddsw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC16ri8:
				os.print("adcw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR16ri8:
				os.print("xorw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LXADD16:
				os.print("lock\n\txaddw\t");
				printOperand(mi, 6);
				os.print(", ");
				printi16mem(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL16rCL:
				os.print("rolw\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX32rm8:
				os.print("movzbl\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBDrm128:
				os.print("phsubd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PORrr:
				os.print("por\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULPDrm:
				os.print("mulpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSI2SD64rm:
				os.print("cvtsi2sdq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULPDrr:
				os.print("mulpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD16rri8:
				os.print("shldw\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PORrm:
				os.print("por\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSI2SD64rr:
				os.print("cvtsi2sdq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNE32rm:
				os.print("cmovne\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD32ri:
				os.print("addl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LCMPXCHG32:
				os.print("lock\n\tcmpxchgl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNE32rr:
				os.print("cmovne\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD8ri:
				os.print("addb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR32rCL:
				os.print("shrl\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64ri:
				os.print("movabsq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CMPSDrr:
				os.print("cmp");
				printSSECC(mi, 3);
				os.print("sd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVP_F:
				os.print("fcmovu\t ");
				printOperand(mi, 0);
				os.print(", %st(0)");
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64rm:
				os.print("movq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CMPSDrm:
				os.print("cmp");
				printSSECC(mi, 7);
				os.print("sd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD32rm:
				os.print("addl\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64rr:
				os.print("movq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTTSD2SI64rr:
				os.print("cvttsd2siq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RCPPSr_Int:
				os.print("rcpps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD8rm:
				os.print("addb\t");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSWAP64r:
				os.print("bswapq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD8rr:
				os.print("addb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB8rm:
				os.print("sbbb\t");
				printi8mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LXADD32:
				os.print("lock\n\txaddl\t");
				printOperand(mi, 6);
				os.print(", ");
				printi32mem(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB8rr:
				os.print("sbbb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVMSKPDrr:
				os.print("movmskpd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB32mi8:
				os.print("lock\n\tsubl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLPDmr:
				os.print("movlpd\t");
				printOperand(mi, 5);
				os.print(", ");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB64mi8:
				os.print("lock\n\tsubq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD32rr:
				os.print("addl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR32mi8:
				os.print("orl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL32mi:
				os.print("roll\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LXADD64:
				os.print("lock\n\txadd\t");
				printOperand(mi, 6);
				os.print(", ");
				printi64mem(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case SHUFPDrmi:
				os.print("shufpd\t");
				printOperand(mi, 7);
				os.print(", ");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ANDPSrm:
				os.print("andps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ANDPSrr:
				os.print("andps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LCMPXCHG16:
				os.print("lock\n\tcmpxchgw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB32ri8:
				os.print("sbbl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SIN_F:
				os.print("fsin");
				emitComments(mi);

				os.print("\n");
				break;
			case MAXSSrr:
				os.print("maxss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MASKMOVQ64:
				os.print("maskmovq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMULLWrm:
				os.print("pmullw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRT_F:
				os.print("fsqrt");
				emitComments(mi);

				os.print("\n");
				break;
			case CMP32ri:
				os.print("cmpl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLDrm:
				os.print("psrld\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLDrr:
				os.print("psrld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB8ri:
				os.print("sbbb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMULLWrr:
				os.print("pmullw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRADrr:
				os.print("psrad\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLDri:
				os.print("psrld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL32m1:
				os.print("roll\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PINSRQrr:
				os.print("pinsrq\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTTSD2SI64rm:
				os.print("cvttsd2siq\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PINSRQrm:
				os.print("pinsrq\t");
				printOperand(mi, 7);
				os.print(", ");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PANDrr:
				os.print("pand\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT16ri8:
				os.print("btw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_EMMS:
				os.print("emms");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PANDrm:
				os.print("pand\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR8ri:
				os.print("rorb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXSSrm:
				os.print("maxss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRADrm:
				os.print("psrad\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PINSRWrri:
				os.print("pinsrw\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR64m1:
				os.print("rorq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRADri:
				os.print("psrad\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB16mi:
				os.print("lock\n\tsubw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPSmr_Int:
				os.print("movups\t");
				printOperand(mi, 5);
				os.print(", ");
				printf128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BLENDVPSrm0:
				os.print("blendvps\t%xmm0, ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TRAP:
				os.print("ud2");
				emitComments(mi);

				os.print("\n");
				break;
			case SUB_FPrST0:
				os.print("fsubrp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_SUB16mr:
				os.print("lock\n\tsubw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_V_SETALLONES:
				os.print("pcmpeqd\t");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case POP32r:
				os.print("popl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP32rr:
				os.print("cmpl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT16rr:
				os.print("btw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNWrm128:
				os.print("psignw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LCMPXCHG64:
				os.print("lock\n\tcmpxchgq\t");
				printOperand(mi, 5);
				os.print(',');
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP32rm:
				os.print("cmpl\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDSWrr64:
				os.print("phaddsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV16r0:
				os.print("xorl\t");
				printOperand(mi, 0, "subreg32");
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX64rr32:
				os.print("movslq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OUT32ir:
				os.print("outl\t%eax, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXSSrm_Int:
				os.print("maxss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVL32rm:
				os.print("cmovl\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADDSDrm_Int:
				os.print("addsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST64rm:
				os.print("testq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CALLpcrel32:
				os.print("call\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVL32rr:
				os.print("cmovl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND64ri32:
				os.print("andq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLDrr:
				os.print("psrld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_INC64m:
				os.print("lock\n\tincq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST64rr:
				os.print("testq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND64ri8:
				os.print("andq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVR_F32m:
				os.print("fdivrs\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVBE64rm:
				os.print("cmovbe\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLDri:
				os.print("psrld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVG64rr:
				os.print("cmovg\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL64r:
				os.print("mulq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRADrr:
				os.print("psrad\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRLDrm:
				os.print("psrld\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRADrm:
				os.print("psrad\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPS2SSrr:
				os.print("movss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSRADri:
				os.print("psrad\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMADDUBSWrr64:
				os.print("pmaddubsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX64rr16:
				os.print("movswq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNBrr64:
				os.print("psignb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR8ri:
				os.print("sarb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NEG32m:
				os.print("negl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVBE64rr:
				os.print("cmovbe\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVG64rm:
				os.print("cmovg\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL64m:
				os.print("mulq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROUNDSDm_Int:
				os.print("roundsd\t");
				printOperand(mi, 7);
				os.print(", ");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case HADDPSrm:
				os.print("haddps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTPS2PIrm:
				os.print("cvttps2pi\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULUDQrr:
				os.print("pmuludq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NEG32r:
				os.print("negl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULUDQrm:
				os.print("pmuludq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL8rCL:
				os.print("rolb\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTPS2PIrr:
				os.print("cvttps2pi\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND32ri8:
				os.print("andl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLQrr:
				os.print("psrlq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsANDPDrm:
				os.print("andpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case HADDPSrr:
				os.print("haddps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINSSrm:
				os.print("minss\t");
				printf32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsANDPDrr:
				os.print("andpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMPPDrmi:
				os.print("cmp");
				printSSECC(mi, 7);
				os.print("pd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX64rr8:
				os.print("movzbl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL16r:
				os.print("imulw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL16m:
				os.print("imulw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINSSrr:
				os.print("minss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLQrm:
				os.print("psrlq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV16mi:
				os.print("movw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLQri:
				os.print("psrlq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRIrm:
				os.print("pcmpestri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD64mri8:
				os.print("shldq\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZX32rr8:
				os.print("movzbl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRIrr:
				os.print("pcmpestri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV16mr:
				os.print("movw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BLENDVPSrr0:
				os.print("blendvps\t%xmm0, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDWrr128:
				os.print("phaddw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR64rCL:
				os.print("shrq\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ST_FP80m:
				os.print("fstpt\t");
				printf80mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PINSRDrr:
				os.print("pinsrd\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD_FPrST0:
				os.print("faddp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND16mi8:
				os.print("andw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR16mCL:
				os.print("shrw\t%cl, ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsMOVAPSrm:
				os.print("movaps\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsMOVAPSrr:
				os.print("movaps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UCOMISSrr:
				os.print("ucomiss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDWrr:
				os.print("paddw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FLDCW16m:
				os.print("fldcw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ISTT_FP64m:
				os.print("fisttpll\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UCOMISSrm:
				os.print("ucomiss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPEQBrm:
				os.print("pcmpeqb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PINSRDrm:
				os.print("pinsrd\t");
				printOperand(mi, 7);
				os.print(", ");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PADDWrm:
				os.print("paddw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB16mr:
				os.print("subw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPEQBrr:
				os.print("pcmpeqb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsXORPSrr:
				os.print("xorps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDWrm:
				os.print("paddw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB16mi:
				os.print("subw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PADDWrr:
				os.print("paddw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INT:
				os.print("int\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSI2SS64rm:
				os.print("cvtsi2ssq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL32ri:
				os.print("roll\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB8mr:
				os.print("subb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINSSrr_Int:
				os.print("minss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsXORPSrm:
				os.print("xorps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD32rri8:
				os.print("shldl\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLPDrr:
				os.print("movsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB8mi:
				os.print("subb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD64ri32:
				os.print("addq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLPDrm:
				os.print("movlpd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSI2SS64rr:
				os.print("cvtsi2ssq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSI2SSrm:
				os.print("cvtsi2ss\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRM128REG:
				os.print("#PCMPESTRM128rr PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTSDr_Int:
				os.print("sqrtsd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSI2SDrr:
				os.print("cvtsi2sd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSI2SDrm:
				os.print("cvtsi2sd\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBWrr64:
				os.print("phsubw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVNTPSmr:
				os.print("movntps\t");
				printOperand(mi, 5);
				os.print(", ");
				printi128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSI2SSrr:
				os.print("cvtsi2ss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LCMPXCHG8B:
				os.print("lock\n\tcmpxchg8b\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBSWrm128:
				os.print("phsubsw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINSDrm_Int:
				os.print("minsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case V_SETALLONES:
				os.print("pcmpeqd\t");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPI2PSrr:
				os.print("cvtpi2ps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSHFD:
				os.print("pushf");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNO32rm:
				os.print("cmovno\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD16i16:
				os.print("add\t");
				printOperand(mi, 0);
				os.print(", %ax");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTPI2PDrr:
				os.print("cvtpi2pd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTPSr_Int:
				os.print("sqrtps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PEXTRQmr:
				os.print("pextrq\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMAND6432:
				os.print("#ATOMAND6432 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD32mri8:
				os.print("shldl\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPI2PSrm:
				os.print("cvtpi2ps\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IST_F32m:
				os.print("fistl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR16mi8:
				os.print("orw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PAVGWrm:
				os.print("pavgw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNBrm128:
				os.print("psignb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SYSRET:
				os.print("sysret");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNO32rr:
				os.print("cmovno\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTPI2PDrm:
				os.print("cvtpi2pd\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PAVGWrr:
				os.print("pavgw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BLENDPDrmi:
				os.print("blendpd\t");
				printOperand(mi, 7);
				os.print(", ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVO16rr:
				os.print("cmovo\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL64mCL:
				os.print("rolq\t%cl, ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX16rm8:
				os.print("movsbl\t");
				printi8mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTPD2PIrm:
				os.print("cvtpd2pi\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSD2SIrr:
				os.print("cvtsd2si\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_CVTPD2PIrr:
				os.print("cvtpd2pi\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSD2SIrm:
				os.print("cvtsd2si\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX64rm16:
				os.print("movswq\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL64mi:
				os.print("shlq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSHFQ:
				os.print("pushf");
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL16rmi:
				os.print("imulw\t");
				printOperand(mi, 6);
				os.print(", ");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT64mi8:
				os.print("btq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR32r1:
				os.print("sarl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JMP64m:
				os.print("jmpq\t*");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTTSS2SI64rm:
				os.print("cvttss2siq\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JMP64r:
				os.print("jmpq\t*");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSI2SSrr:
				os.print("cvtsi2ss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTTSS2SI64rr:
				os.print("cvttss2siq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MASKMOVDQU64:
				os.print("maskmovdqu\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64GSrm:
				os.print("movq\t%gs:");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSI2SSrm:
				os.print("cvtsi2ss\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSDmr:
				os.print("movsd\t");
				printOperand(mi, 5);
				os.print(", ");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB64mi32:
				os.print("subq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVO16rm:
				os.print("cmovo\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR8m1:
				os.print("shrb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL64mCL:
				os.print("shlq\t%cl, ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR16rCL:
				os.print("rorw\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB32mr:
				os.print("sbbl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPS2PIrr:
				os.print("cvtps2pi\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPS2PIrm:
				os.print("cvtps2pi\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR32mr:
				os.print("xorl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB32mi:
				os.print("sbbl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTPDr_Int:
				os.print("sqrtpd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL64m1:
				os.print("shlq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXSDrm_Int:
				os.print("maxsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PACKUSDWrm:
				os.print("packusdw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR32mi:
				os.print("xorl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsANDPSrm:
				os.print("andps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PACKUSDWrr:
				os.print("packusdw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FsANDPSrr:
				os.print("andps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PEXTRDrr:
				os.print("pextrd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RET:
				os.print("ret");
				emitComments(mi);

				os.print("\n");
				break;
			case BSF32rm:
				os.print("bsfl\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRIZrm:
				os.print("pcmpestri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TEST64mi32:
				os.print("testq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX16rr8:
				os.print("movsbl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case TCRETURNri:
				os.print("#TC_RETURN ");
				printOperand(mi, 0);
				os.print(' ');
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case PREFETCHT0:
				os.print("prefetcht0\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PREFETCHT2:
				os.print("prefetcht2\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBR_FI16m:
				os.print("fisubrs\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PREFETCHT1:
				os.print("prefetcht1\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRIZrr:
				os.print("pcmpestri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSF32rr:
				os.print("bsfl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPDmr:
				os.print("movupd\t");
				printOperand(mi, 5);
				os.print(", ");
				printf128mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case POP64r:
				os.print("popq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UNPCKHPDrm:
				os.print("unpckhpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PEXTRQrr:
				os.print("pextrq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBWrm64:
				os.print("phsubw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UNPCKHPDrr:
				os.print("unpckhpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IDIV8r:
				os.print("idivb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR32ri:
				os.print("sarl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IDIV32r:
				os.print("idivl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IDIV32m:
				os.print("idivl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR8mCL:
				os.print("rorb\t%cl, ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVAE64rr:
				os.print("cmovae\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NEG8r:
				os.print("negb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD_FrST0:
				os.print("fadd\t%st(0), ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFBrm128:
				os.print("pshufb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR8rCL:
				os.print("sarb\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NEG8m:
				os.print("negb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVHPDmr:
				os.print("movhpd\t");
				printOperand(mi, 5);
				os.print(", ");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IDIV8m:
				os.print("idivb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMAND8:
				os.print("#ATOMAND8 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SETAEm:
				os.print("setae\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVBE16rm:
				os.print("cmovbe\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETAEr:
				os.print("setae\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVAE64rm:
				os.print("cmovae\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64ri64i32:
				os.print("movl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0, "subreg32");
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVBE16rr:
				os.print("cmovbe\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV16m:
				os.print("divw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PXORrm:
				os.print("pxor\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV16r:
				os.print("divw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PXORrr:
				os.print("pxor\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR64rCL:
				os.print("sarq\t%cl, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBBrr:
				os.print("psubb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB64ri32:
				os.print("sbbq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL16rmi8:
				os.print("imulw\t");
				printOperand(mi, 6);
				os.print(", ");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TST_F:
				os.print("ftst");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBBrm:
				os.print("psubb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IN8ri:
				os.print("inb\t");
				printOperand(mi, 0);
				os.print(", %al");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBUSBrm:
				os.print("psubusb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTSD2SIrr:
				os.print("cvttsd2si\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVLSS2PSrr:
				os.print("movss\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBUSBrr:
				os.print("psubusb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHSUBWrm128:
				os.print("phsubw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVP32rr:
				os.print("cmovp\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTSD2SIrm:
				os.print("cvttsd2si\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR32rr:
				os.print("xorl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVP32rm:
				os.print("cmovp\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNWrr128:
				os.print("psignw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IN8rr:
				os.print("inb\t%dx, %al");
				emitComments(mi);

				os.print("\n");
				break;
			case XOR32rm:
				os.print("xorl\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR32ri:
				os.print("xorl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBWrm:
				os.print("psubw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC32r:
				os.print("decl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZSD2PDrm:
				os.print("movsd\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSH32r:
				os.print("pushl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV32ri:
				os.print("movl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OUT8rr:
				os.print("outb\t%al, %dx");
				emitComments(mi);

				os.print("\n");
				break;
			case MOV32rm:
				os.print("movl\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVNTDQArm:
				os.print("movntdqa\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV32rr:
				os.print("movl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IN16ri:
				os.print("inw\t");
				printOperand(mi, 0);
				os.print(", %ax");
				emitComments(mi);

				os.print("\n");
				break;
			case DEC32m:
				os.print("decl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PABSDrm64:
				os.print("pabsd\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IN16rr:
				os.print("inw\t%dx, %ax");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPGTDrr:
				os.print("pcmpgtd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DEC8r:
				os.print("decb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLQri:
				os.print("psllq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC16mi:
				os.print("adcw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MONITOR:
				os.print("monitor");
				emitComments(mi);

				os.print("\n");
				break;
			case DEC8m:
				os.print("decb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLQrr:
				os.print("psllq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVNTImr:
				os.print("movnti\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLQrm:
				os.print("psllq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PCMPGTDrm:
				os.print("pcmpgtd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC16mr:
				os.print("adcw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVR_FrST0:
				os.print("fdiv\t%st(0), ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR16mi8:
				os.print("xorw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV8mr_NOREX:
				os.print("movb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				os.print("  # NOREX");
				emitComments(mi);

				os.print("\n");
				break;
			case BSR16rm:
				os.print("bsrw\t");
				printi16mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BSR16rr:
				os.print("bsrw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTSSm:
				os.print("sqrtss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PAVGBrm:
				os.print("pavgb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT32rr:
				os.print("btl\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PAVGBrr:
				os.print("pavgb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVA32rr:
				os.print("cmova\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV32r0:
				os.print("xorl\t");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVA32rm:
				os.print("cmova\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTSSr:
				os.print("sqrtss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD64rri8:
				os.print("shrdq\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR64ri8:
				os.print("xorq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD_FI32m:
				os.print("fiaddl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSI2SD64rm:
				os.print("cvtsi2sdq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLDrr:
				os.print("pslld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSI2SD64rr:
				os.print("cvtsi2sdq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLDrm:
				os.print("pslld\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXUDrr:
				os.print("pmaxud\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP_REG_KILL:
				os.print("##FP_REG_KILL");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLDri:
				os.print("pslld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR32ri8:
				os.print("xorl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL_F32m:
				os.print("fmuls\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKLDQrr:
				os.print("punpckldq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKLDQrm:
				os.print("punpckldq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL_FST0r:
				os.print("fmul\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVHPDrm:
				os.print("movhpd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PACKUSWBrr:
				os.print("packuswb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MPSADBWrri:
				os.print("mpsadbw\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNWrr64:
				os.print("psignw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDWrm64:
				os.print("phaddw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINSDrr_Int:
				os.print("minsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case UCOM_FPPr:
				os.print("fucompp");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PACKUSWBrm:
				os.print("packuswb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR64mCL:
				os.print("rorq\t%cl, ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSDrm:
				os.print("movsd\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RSQRTPSr_Int:
				os.print("rsqrtps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSDrr:
				os.print("movsd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL8r:
				os.print("mulb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVPDrm:
				os.print("divpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL8m:
				os.print("mulb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSRLDQri:
				os.print("psrldq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVPDrr:
				os.print("divpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBR_F64m:
				os.print("fsubrl\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OUT32rr:
				os.print("outl\t%eax, %dx");
				emitComments(mi);

				os.print("\n");
				break;
			case PABSWrm64:
				os.print("pabsw\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSS2SIrm:
				os.print("cvtss2si\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSS2SIrr:
				os.print("cvtss2si\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB32rr:
				os.print("sbbl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV32mi:
				os.print("movl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LCMPXCHG8:
				os.print("lock\n\tcmpxchgb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ST_F64m:
				os.print("fstl\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB32rm:
				os.print("sbbl\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVLE32rm:
				os.print("cmovle\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PEXTRDmr:
				os.print("pextrd\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB32ri:
				os.print("sbbl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSUBWrr:
				os.print("psubw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC16ri:
				os.print("adcw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PAVGBrr:
				os.print("pavgb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV32mr:
				os.print("movl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVLE32rr:
				os.print("cmovle\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMNAND8:
				os.print("#ATOMNAND8 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case JA8:
				os.print("ja\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC16rr:
				os.print("adcw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PAVGBrm:
				os.print("pavgb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC16rm:
				os.print("adcw\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOV_V2F64:
				os.print("#CMOV_V2F64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case JAE:
				os.print("jae\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULLDrr:
				os.print("pmulld\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMULLDrm:
				os.print("pmulld\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD64rri8:
				os.print("shldq\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSX64rm32:
				os.print("movslq\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVG32rm:
				os.print("cmovg\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JB8:
				os.print("jb\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MPSADBWrmi:
				os.print("mpsadbw\t");
				printOperand(mi, 7);
				os.print(", ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVG32rr:
				os.print("cmovg\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROUNDSDr_Int:
				os.print("roundsd\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMAND16:
				os.print("#ATOMAND16 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPGTQrr:
				os.print("pcmpgtq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR8mCL:
				os.print("sarb\t%cl, ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JBE:
				os.print("jbe\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPGTQrm:
				os.print("pcmpgtq\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVR_FI32m:
				os.print("fidivrl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR32m1:
				os.print("rorl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMNAND64:
				os.print("#ATOMNAND64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PACKSSWBrr:
				os.print("packsswb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BLENDPSrri:
				os.print("blendps\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXWQrm:
				os.print("pmovsxwq\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTSDm_Int:
				os.print("sqrtsd\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL_FI16m:
				os.print("fimuls\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_INC16m:
				os.print("lock\n\tincw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXWQrr:
				os.print("pmovsxwq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND64mi8:
				os.print("andq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CDQE:
				os.print("cltq");
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZQI2PQIrm:
				os.print("movq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ST_FP32m:
				os.print("fstps\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND16rm:
				os.print("andw\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZQI2PQIrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND16ri:
				os.print("andw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND16rr:
				os.print("andw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXSBrm:
				os.print("pmaxsb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSHUFBrr64:
				os.print("pshufb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOV64toPQIrr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LEAVE64:
				os.print("leave");
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMMAX64:
				os.print("#ATOMMAX64 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case ROR32mCL:
				os.print("rorl\t%cl, ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXSBrr:
				os.print("pmaxsb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JMP8:
				os.print("jmp\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBBrm:
				os.print("psubb\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL16mi:
				os.print("shlw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTPDm:
				os.print("sqrtpd\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSUBBrr:
				os.print("psubb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETNSm:
				os.print("setns\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case V_SET0:
				os.print("xorps\t");
				printOperand(mi, 0);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SQRTPDr:
				os.print("sqrtpd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR32mi:
				os.print("rorl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTTSS2SIrr:
				os.print("cvttss2si\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR64mCL:
				os.print("shrq\t%cl, ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTTSS2SIrm:
				os.print("cvttss2si\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JE8:
				os.print("je\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETNSr:
				os.print("setns\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVD64mr:
				os.print("movd\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case EXTRACTPSrr:
				os.print("extractps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PALIGNR64rm:
				os.print("palignr\t");
				printOperand(mi, 7);
				os.print(", ");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INT3:
				os.print("int 3");
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMINUBrr:
				os.print("pminub\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PALIGNR64rr:
				os.print("palignr\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PMINUBrm:
				os.print("pminub\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXBDrm:
				os.print("pmovsxbd\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXUDrm:
				os.print("pmaxud\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR16m1:
				os.print("shrw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVSXBDrr:
				os.print("pmovsxbd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR16mi:
				os.print("shrw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPD2DQrr:
				os.print("cvtpd2dq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTPD2DQrm:
				os.print("cvtpd2dq\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PAVGWrm:
				os.print("pavgw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PAVGWrr:
				os.print("pavgw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADJCALLSTACKUP64:
				os.print("#ADJCALLSTACKUP");
				emitComments(mi);

				os.print("\n");
				break;
			case JG8:
				os.print("jg\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVSDrm:
				os.print("divsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC64_16r:
				os.print("incw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL16m1:
				os.print("shlw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNS64rm:
				os.print("cmovns\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JGE:
				os.print("jge\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC64_16m:
				os.print("incw\t");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKHBWrr:
				os.print("punpckhbw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNBrm64:
				os.print("psignb\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUNPCKHBWrm:
				os.print("punpckhbw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVDQ2Qrr:
				os.print("movdq2q\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVNS64rr:
				os.print("cmovns\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BLENDPSrmi:
				os.print("blendps\t");
				printOperand(mi, 7);
				os.print(", ");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMNAND16:
				os.print("#ATOMNAND16 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_ADD64mi8:
				os.print("lock\n\taddq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLQri:
				os.print("psllq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case HSUBPDrr:
				os.print("hsubpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PUSH64i8:
				os.print("pushq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL32rri:
				os.print("imull\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMAND32:
				os.print("#ATOMAND32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case HSUBPDrm:
				os.print("hsubpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LOCK_DEC8m:
				os.print("lock\n\tdecb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVD64rm:
				os.print("movd\t");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVD64rr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OUT8ir:
				os.print("outb\t%al, ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD64mi8:
				os.print("addq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDDUPrm:
				os.print("movddup\t");
				printf64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSS2PSrm:
				os.print("movss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVDDUPrr:
				os.print("movddup\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR32mCL:
				os.print("sarl\t%cl, ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVGE64rm:
				os.print("cmovge\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETNOr:
				os.print("setno\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case FP32_TO_INT16_IN_MEM:
				os.print("##FP32_TO_INT16_IN_MEM PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case SUBPSrr:
				os.print("subps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXBWrm:
				os.print("pmovzxbw\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDDrr64:
				os.print("phaddd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVGE64rr:
				os.print("cmovge\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD_F64m:
				os.print("faddl\t");
				printf64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMOVZXBWrr:
				os.print("pmovzxbw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIVSDrr:
				os.print("divsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETNOm:
				os.print("setno\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBPSrm:
				os.print("subps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSS2PSrr:
				os.print("movss\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ATOMNAND32:
				os.print("#ATOMNAND32 PSEUDO!");
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRIArr:
				os.print("pcmpestri\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINPSrm:
				os.print("minps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINPSrr:
				os.print("minps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLQrr:
				os.print("psllq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR32r1:
				os.print("rorl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETNPr:
				os.print("setnp\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETNPm:
				os.print("setnp\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_PSLLQrm:
				os.print("psllq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPESTRIArm:
				os.print("pcmpestri\t");
				printOperand(mi, 6);
				os.print(", ");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR8ri:
				os.print("shrb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTDQ2PSrr:
				os.print("cvtdq2ps\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXSWrm:
				os.print("pmaxsw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROUNDPDr_Int:
				os.print("roundpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MMX_MOVQ64mr:
				os.print("movq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTDQ2PSrm:
				os.print("cvtdq2ps\t");
				printi128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVB16rm:
				os.print("cmovb\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR16r1:
				os.print("shrw\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMAXSWrr:
				os.print("pmaxsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVB16rr:
				os.print("cmovb\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSS2SI64rm:
				os.print("cvtss2siq\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ISTT_FP32m:
				os.print("fisttpl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR16ri:
				os.print("shrw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTSS2SI64rr:
				os.print("cvtss2siq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVE32rr:
				os.print("cmove\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MWAIT:
				os.print("mwait");
				emitComments(mi);

				os.print("\n");
				break;
			case ADC64mr:
				os.print("adcq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUBR_FST0r:
				os.print("fsubr\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP64mr:
				os.print("cmpq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JL8:
				os.print("jl\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADD32mi8:
				os.print("addl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVE32rm:
				os.print("cmove\t");
				printi32mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case RCPSSm_Int:
				os.print("rcpss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSI2SS64rm:
				os.print("cvtsi2ssq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JLE:
				os.print("jle\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPGTDrr:
				os.print("pcmpgtd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTPD2PIrm:
				os.print("cvttpd2pi\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHL64ri:
				os.print("shlq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case XOR32mi8:
				os.print("xorl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL32mCL:
				os.print("roll\t%cl, ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CVTSI2SS64rr:
				os.print("cvtsi2ssq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXPDrr:
				os.print("maxpd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC8r:
				os.print("incb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULSDrm:
				os.print("mulsd\t");
				printf64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MULSDrr:
				os.print("mulsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV64r:
				os.print("divq\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHLD32rrCL:
				os.print("shldl\t%cl, ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case INC8m:
				os.print("incb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROR16mCL:
				os.print("rorw\t%cl, ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHRD16mrCL:
				os.print("shrdw\t%cl, ");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MAXPDrm:
				os.print("maxpd\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_CVTTPD2PIrr:
				os.print("cvttpd2pi\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVZSS2PSrm:
				os.print("movss\t");
				printf32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHADDWrr64:
				os.print("phaddw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case DIV64m:
				os.print("divq\t");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR64ri8:
				os.print("orq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JMP:
				os.print("jmp\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNWrm64:
				os.print("psignw\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL64rr:
				os.print("imulq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMADDUBSWrr128:
				os.print("pmaddubsw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVPQIto64rr:
				os.print("movd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADJCALLSTACKUP32:
				os.print("#ADJCALLSTACKUP");
				emitComments(mi);

				os.print("\n");
				break;
			case PCMPGTDrm:
				os.print("pcmpgtd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL64rm:
				os.print("imulq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case TCRETURNdi:
				os.print("#TC_RETURN ");
				printOperand(mi, 0);
				os.print(' ');
				printOperand(mi, 1);
				emitComments(mi);

				os.print("\n");
				break;
			case JNE:
				os.print("jne\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETNEm:
				os.print("setne\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP64rr:
				os.print("cmpq\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL64rri32:
				os.print("imulq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB32mi8:
				os.print("sbbl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JNO:
				os.print("jno\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SETNEr:
				os.print("setne\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MINPSrm_Int:
				os.print("minps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BLENDPDrri:
				os.print("blendpd\t");
				printOperand(mi, 3);
				os.print(", ");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JNP:
				os.print("jnp\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JNS:
				os.print("jns\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINSDrm:
				os.print("pminsd\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINSDrr:
				os.print("pminsd\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JO8:
				os.print("jo\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINUWrm:
				os.print("pminuw\t");
				printi128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR64mCL:
				os.print("sarq\t%cl, ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SBB64mi8:
				os.print("sbbq\t");
				printOperand(mi, 5);
				os.print(", ");
				printi64mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND16mr:
				os.print("andw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SUB_FST0r:
				os.print("fsub\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR8mi:
				os.print("shrb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL8mi:
				os.print("rolb\t");
				printOperand(mi, 5);
				os.print(", ");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC64rm:
				os.print("adcq\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case JP8:
				os.print("jp\t");
				print_pcrel_imm(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL32rmi:
				os.print("imull\t");
				printOperand(mi, 6);
				os.print(", ");
				printi32mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ADC64rr:
				os.print("adcq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ANDNPSrr:
				os.print("andnps\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMP64rm:
				os.print("cmpq\t");
				printi64mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ANDNPSrm:
				os.print("andnps\t");
				printf128mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PHMINPOSUWrr128:
				os.print("phminposuw\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOT32m:
				os.print("notl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL8r:
				os.print("imulb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SHR8r1:
				os.print("shrb\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSLLDQri:
				os.print("pslldq\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IMUL8m:
				os.print("imulb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPDrm:
				os.print("movupd\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVUPDrr:
				os.print("movupd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case EXTRACTPSmr:
				os.print("extractps\t");
				printOperand(mi, 6);
				os.print(", ");
				printOperand(mi, 5);
				os.print(", ");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PSIGNDrm64:
				os.print("psignd\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case BT32mi8:
				os.print("btl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR32mi:
				os.print("sarl\t");
				printOperand(mi, 5);
				os.print(", ");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVS16rm:
				os.print("cmovs\t");
				printi16mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case AND16mi:
				os.print("andw\t");
				printOperand(mi, 5);
				os.print(", ");
				printi16mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PREFETCHNTA:
				os.print("prefetchnta\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVS16rr:
				os.print("cmovs\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_UCOMISDrm:
				os.print("ucomisd\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case IST_FP32m:
				os.print("fistpl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case Int_UCOMISDrr:
				os.print("ucomisd\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case PMINUWrr:
				os.print("pminuw\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case ROL8m1:
				os.print("rolb\t");
				printi8mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case SAR32m1:
				os.print("sarl\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case LD_F32m:
				os.print("flds\t");
				printf32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSHDUPrm:
				os.print("movshdup\t");
				printf128mem(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVO64rm:
				os.print("cmovo\t");
				printi64mem(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MOVSHDUPrr:
				os.print("movshdup\t");
				printOperand(mi, 1);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL32r:
				os.print("mull\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case NOT32r:
				os.print("notl\t");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case MUL32m:
				os.print("mull\t");
				printi32mem(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case OR32ri8:
				os.print("orl\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			case CMOVO64rr:
				os.print("cmovo\t");
				printOperand(mi, 2);
				os.print(", ");
				printOperand(mi, 0);
				emitComments(mi);

				os.print("\n");
				break;
			}// end of switch.
		return true;
	}// end of printInstruction.
}// end of interface.

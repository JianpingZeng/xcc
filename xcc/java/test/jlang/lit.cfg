# -*- Python -*-

import os
import platform
import re
import subprocess
import tempfile

import lit.formats
import lit.util

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'Jlang'

# Tweak PATH for Win32
if platform.system() == 'Windows':
    # Seek sane tools in directories and set to $PATH.
    path = getattr(config, 'lit_tools_dir', None)
    path = lit_config.getToolsPath(path,
                                   config.environment['PATH'],
                                   ['cmp.exe', 'grep.exe', 'sed.exe'])
    if path is not None:
        path = os.path.pathsep.join((path,
                                     config.environment['PATH']))
        config.environment['PATH'] = path

# Choose between lit's internal shell pipeline runner and a real shell.  If
# LIT_USE_INTERNAL_SHELL is in the environment, we use that as an override.
use_lit_shell = os.environ.get("LIT_USE_INTERNAL_SHELL")
if use_lit_shell:
    # 0 is external, "" is default, and everything else is internal.
    execute_external = (use_lit_shell == "0")
else:
    # Otherwise we default to internal on Windows and external elsewhere, as
    # bash on Windows is usually very slow.
    execute_external = (not sys.platform in ['win32'])

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp', '.m', '.mm', '.cu', '.ll', '.cl', '.s', '.S', '.modulemap', '.test', '.rs']

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = ['Inputs', 'CMakeLists.txt', 'README.txt', 'LICENSE.txt']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
jlang_obj_root = getattr(config, 'jlang_obj_root', None)
if jlang_obj_root is not None:
    config.test_exec_root = os.path.join(jlang_obj_root, 'test')

# Set xcc_{src,obj}_root for use by others.
config.xcc_src_root = getattr(config, 'xcc_src_root', None)
config.xcc_obj_root = getattr(config, 'xcc_obj_root', None)

# Clear some environment variables that might affect Jlang.
#
# This first set of vars are read by Jlang, but shouldn't affect tests
# that aren't specifically looking for these features, or are required
# simply to run the tests at all.
#
# FIXME: Should we have a tool that enforces this?

# safe_env_vars = ('TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',
#                  'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',
#                  'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',
#                  'VC80COMNTOOLS')
possibly_dangerous_env_vars = ['COMPILER_PATH', 'RC_DEBUG_OPTIONS',
                               'CINDEXTEST_PREAMBLE_FILE', 'LIBRARY_PATH',
                               'CPATH', 'C_INCLUDE_PATH', 'CPLUS_INCLUDE_PATH',
                               'OBJC_INCLUDE_PATH', 'OBJCPLUS_INCLUDE_PATH',
                               'LIBCLANG_TIMING', 'LIBCLANG_OBJTRACKING',
                               'LIBCLANG_LOGGING', 'LIBCLANG_BGPRIO_INDEX',
                               'LIBCLANG_BGPRIO_EDIT', 'LIBCLANG_NOTHREADS',
                               'LIBCLANG_RESOURCE_USAGE',
                               'LIBCLANG_CODE_COMPLETION_LOGGING']
# Jlang/Win32 may refer to %INCLUDE%. vsvarsall.bat sets it.
if platform.system() != 'Windows':
    possibly_dangerous_env_vars.append('INCLUDE')
for name in possibly_dangerous_env_vars:
  if name in config.environment:
    del config.environment[name]

# Tweak the PATH to include the tools dir and the scripts dir.
if jlang_obj_root is not None:
    xcc_libs_dir = getattr(config, 'xcc_libs_dir', None)
    if not xcc_libs_dir:
        lit_config.fatal('No XCC libs dir set!')
    path = os.path.pathsep.join((xcc_libs_dir,
                                 config.environment.get('LD_LIBRARY_PATH','')))
    config.environment['LD_LIBRARY_PATH'] = path

# Propagate path to symbolizer for ASan/MSan.
for symbolizer in ['ASAN_SYMBOLIZER_PATH', 'MSAN_SYMBOLIZER_PATH']:
    if symbolizer in os.environ:
        config.environment[symbolizer] = os.environ[symbolizer]

###

# Check that the object root is known.
if config.test_exec_root is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'jlang_site_config' user parameter, and use that if available.
    site_cfg = lit_config.params.get('jlang_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

    # Try to detect the situation where we are using an out-of-tree build by
    # looking for 'xcc-config'.
    #
    # FIXME: I debated (i.e., wrote and threw away) adding logic to
    # automagically generate the lit.site.cfg if we are in some kind of fresh
    # build situation. This means knowing how to invoke the build system though,
    # and I decided it was too much magic. We should solve this by just having
    # the .cfg files generated during the configuration step.

    xcc_config = lit.util.which('xcc-config', config.environment['PATH'])
    if not xcc_config:
        lit_config.fatal('No site specific configuration available!')

    # Get the source and object roots.
    xcc_src_root = lit.util.capture(['xcc-config', '--src-root']).strip()
    xcc_obj_root = lit.util.capture(['xcc-config', '--obj-root']).strip()
    jlang_src_root = os.path.join(xcc_src_root, "tools", "jlang")
    jlang_obj_root = os.path.join(xcc_obj_root, "tools", "jlang")

    # Validate that we got a tree which points to here, using the standard
    # tools/jlang layout.
    this_src_root = os.path.dirname(config.test_source_root)
    if os.path.realpath(jlang_src_root) != os.path.realpath(this_src_root):
        lit_config.fatal('No site specific configuration available!')

    # Check that the site specific configuration exists.
    site_cfg = os.path.join(jlang_obj_root, 'test', 'lit.site.cfg')
    if not os.path.exists(site_cfg):
        lit_config.fatal(
            'No site specific configuration available! You may need to '
            'run "make test" in your Jlang build directory.')

    # Okay, that worked. Notify the user of the automagic, and reconfigure.
    lit_config.note('using out-of-tree build at %r' % jlang_obj_root)
    lit_config.load_config(config, site_cfg)
    raise SystemExit

###

# Discover the 'jlang'

import os

def inferJlang(PATH):
    # Determine which jlang to use.
    jlang = os.path.join(config.xcc_obj_root, 'bin', 'jlang')#os.getenv('JLANG')

    # If the user set jlang in the environment, definitely use that and don't
    # try to validate.
    if jlang:
        return jlang

    # Otherwise look in the path.
    jlang = lit.util.which('jlang', PATH)

    if not jlang:
        lit_config.fatal("couldn't find 'jlang' program, try setting "
                         "JLANG in your environment")

    return jlang

config.jlang = inferJlang(config.environment['PATH']).replace('\\', '/')
if not lit_config.quiet:
    lit_config.note('using jlang: %r' % config.jlang)


# Note that when substituting %jlang_cc1 also fill in the include directory of
# the builtin headers. Those are part of even a freestanding environment, but
# Jlang relies on the driver to locate them.
def getJlangBuiltinIncludeDir(jlang):
    # FIXME: Rather than just getting the version, we should have jlang print
    # out its resource dir here in an easy to scrape form.
  return jlang + '-cc'


config.substitutions.append( ('%jlang_cc1',
                              '%s -cc1 -internal-isystem %s -nostdsysteminc'
                              % (config.jlang,
                                 getJlangBuiltinIncludeDir(config.jlang))) )

config.substitutions.append( ('%jlang', ' ' + config.jlang + ' ') )

# FIXME: Find nicer way to prohibit this.
config.substitutions.append(
    (' jlang ', """*** Do not use 'jlang' in tests, use '%jlang'. ***""") )

config.substitutions.append(
    (' jlang-cc ',
     """*** Do not use 'jlang-cc' in tests, use '%jlang_cc1'. ***""") )
config.substitutions.append(
    (' jlang -cc1 ',
     """*** Do not use 'jlang -cc1' in tests, use '%jlang_cc1'. ***""") )
config.substitutions.append(
    (' %jlang-cc1 ',
     """*** invalid substitution, use '%jlang_cc1'. ***""") )

# For each occurrence of a jlang tool name as its own word, replace it
# with the full path to the build directory holding that tool.  This
# ensures that we are testing the tools just built and not some random
# tools that might happen to be in the user's PATH.
tool_dirs = os.path.join(config.xcc_obj_root, 'bin')

# Regex assertions to reject neighbor hyphens/dots (seen in some tests).
# For example, don't match 'jlang-check-' or '.jlang-format'.
NoPreHyphenDot = r"(?<!(-|\.))"
NoPostHyphenDot = r"(?!(-|\.))"
NoPostBar = r"(?!(/|\\))"

tool_patterns = [r"\bFileCheck\b",
                 r"\bc-index-test\b",
                 NoPreHyphenDot + r"\bjlang-check\b" + NoPostHyphenDot,
                 NoPreHyphenDot + r"\bjlang-format\b" + NoPostHyphenDot,
                 # FIXME: Some jlang test uses opt?
                 NoPreHyphenDot + r"\bopt\b" + NoPostBar + NoPostHyphenDot,
                 # Handle these specially as they are strings searched
                 # for during testing.
                 r"\| \bcount\b",
                 r"\| \bnot\b"]

for pattern in tool_patterns:
    # Extract the tool name from the pattern.  This relies on the tool
    # name being surrounded by \b word match operators.  If the
    # pattern starts with "| ", include it in the string to be
    # substituted.
    tool_match = re.match(r"^(\\)?((\| )?)\W+b([0-9A-Za-z-_]+)\\b\W*$",
                          pattern)
    tool_pipe = tool_match.group(2)
    tool_name = tool_match.group(4)
    tool_path = lit.util.which(tool_name, tool_dirs)
    if not tool_path:
        # Warn, but still provide a substitution.
        lit_config.note('Did not find ' + tool_name + ' in ' + tool_dirs)
        tool_path = tool_dirs + '/' + tool_name
    config.substitutions.append((pattern, tool_pipe + tool_path))

###

# Set available features we allow tests to conditionalize on.

# For tests that require Darwin to run.
# This is used by debuginfo-tests/*block*.m and debuginfo-tests/foreach.m.
if platform.system() in ['Darwin']:
    config.available_features.add('system-darwin')
elif platform.system() in ['Windows']:
    # For tests that require Windows to run.
    config.available_features.add('system-windows')

# ANSI escape sequences in non-dumb terminal
if platform.system() not in ['Windows']:
    config.available_features.add('ansi-escape-sequences')

# Capability to print utf8 to the terminal.
# Windows expects codepage, unless Wide API.
if platform.system() not in ['Windows']:
    config.available_features.add('utf8-capable-terminal')

# Native compilation: Check if triples match.
# FIXME: Consider cases that target can be executed
# even if host_triple were different from target_triple.
if config.host_triple == config.target_triple:
    config.available_features.add("native")



# Tests that require the /dev/fd filesystem.
if os.path.exists("/dev/fd/0") and sys.platform not in ['cygwin']:
    config.available_features.add('dev-fd-fs')

# [PR18856] Depends to remove opened file. On win32, a file could be removed
# only if all handles were closed.
if platform.system() not in ['Windows']:
    config.available_features.add('can-remove-opened-file')


# Check if we should allow outputs to console.
run_console_tests = int(lit_config.params.get('enable_console', '0'))
if run_console_tests != 0:
  config.available_features.add('console')

lit.util.usePlatformSdkOnDarwin(config, lit_config)
